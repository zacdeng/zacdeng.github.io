<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Getting Start With Docker</title>
    <link href="/2022/03/29/Getting%20Start%20With%20Docker/"/>
    <url>/2022/03/29/Getting%20Start%20With%20Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Getting-Start-With-Docker"><a href="#Getting-Start-With-Docker" class="headerlink" title="Getting Start With Docker"></a>Getting Start With Docker</h1><blockquote><p>This blog is the personal summary of Docker’s official document named Getting Started</p></blockquote><h2 id="Demo-Application"><a href="#Demo-Application" class="headerlink" title="Demo Application"></a>Demo Application</h2><p>For the rest of this tutorial, we will be working with a simple todo list manager that is running in Node.js. If you’re not familiar with Node.js, don’t worry! No real JavaScript experience is needed!</p><p>At this point, your development team is quite small and you’re simply building an app to prove out your MVP (minimum viable product). You want to show how it works and what it’s capable of doing without needing to think about how it will work for a large team, multiple developers, etc.</p><h3 id="Getting-the-Demo-App"><a href="#Getting-the-Demo-App" class="headerlink" title="Getting the Demo App"></a>Getting the Demo App</h3><p>Firstly, we need to open the docker tutorial on terminal, in case you forgot, here’s the command:</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -d -p 80:80 docker/getting-started</code></pre></div><p>You’ll notice a few flags being used. Here’s some more info on them:</p><ul><li><code>-d</code> - run the container in detached mode (in the background)</li><li><code>-p 80:80</code> - map port 80 of the host to port 80 in the container</li><li><code>docker/getting-started</code> - the image to use</li></ul><p>then download the zip file from the tutorial to get start with.</p><h3 id="Building-the-App’s-Container-Image"><a href="#Building-the-App’s-Container-Image" class="headerlink" title="Building the App’s Container Image"></a>Building the App’s Container Image</h3><p>In order to build the application, we need to use a <code>Dockerfile</code>. A Dockerfile is simply a text-based script of instructions that is used to create a container image. If you’ve created Dockerfiles before, you might see a few flaws in the Dockerfile below. But, don’t worry! We’ll go over them.</p><ol><li><p>Create a file named <code>Dockerfile</code> in the same folder as the file <code>package.json</code> with the following contents. ( Please check that the file <code>Dockerfile</code> has no file extension like <code>.txt</code> )</p><div class="code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">12</span>-alpine<span class="hljs-comment"># Adding build tools to make yarn install work on Apple silicon / arm64 machines</span><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache python2 g++ make</span><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><span class="hljs-keyword">RUN</span><span class="language-bash"> yarn install --production</span><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;src/index.js&quot;</span>]</span></code></pre></div></li><li><p>Now build the container image using the <code>docker build</code> command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ <span class="hljs-built_in">cd</span> app/$ docker build -t getting-started .</code></pre></div><p>Build an image from a Dockerfile ( <a href="https://docs.docker.com/engine/reference/commandline/build/">docker build</a> ):</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker build [OPTIONS] PATH | URL | -</code></pre></div><p>The <code>-t</code> flag tags our image. Think of this simply as a human-readable name for the final image. Since we named the image <code>getting-started</code>, we can refer to that image when we run a container.</p><p>The <code>.</code> at the end of the <code>docker build</code> command tells that Docker should look for the <code>Dockerfile</code> in the current directory.</p></li></ol><h3 id="Starting-an-App-Container"><a href="#Starting-an-App-Container" class="headerlink" title="Starting an App Container"></a>Starting an App Container</h3><ol><li><p>Start your container using the <code>docker run</code> command and specify the name of the image we just created:</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 getting-started</code></pre></div><p>Run a command in a new container ( <a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a> ):</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></pre></div><p>Remember the <code>-d</code> and <code>-p</code> flags? We’re running the new container in “detached” mode (in the background) and creating a mapping between the host’s port 3000 to the container’s port 3000. Without the port mapping, we wouldn’t be able to access the application.</p></li><li><p>After a few seconds, open your web browser to <a href="http://localhost:3000/">http://localhost:3000</a>. You should see our app!</p></li><li><p>Go ahead and add an item or two and see that it works as you expect. You can mark items as complete and remove items. Your frontend is successfully storing items in the backend! Pretty quick and easy, huh?</p></li></ol><h2 id="Updating-our-App"><a href="#Updating-our-App" class="headerlink" title="Updating our App"></a>Updating our App</h2><ol><li><p>In the <code>src/static/js/app.js</code> file, update line 56 to use the new empty text.</p><div class="code-wrapper"><pre><code class="hljs js">-                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>No items yet! Add one above!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>+                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>You have no todo items yet! Add one above!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></code></pre></div></li><li><p>Remove the old <code>getting-started</code> image.</p><ol><li><p>Get the ID of the container by using the <code>docker ps</code> command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker ps</code></pre></div></li><li><p>Use the <code>docker stop</code> command to stop the container ( or using <code>-f</code> flag on <code>docker rm</code> command)</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># Swap out &lt;the-container-id&gt; with the ID from docker ps</span>$ docker stop &lt;the-container-id&gt;</code></pre></div><p>or</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker <span class="hljs-built_in">rm</span> -f &lt;the-container-id or the-contaniner-name&gt;</code></pre></div></li><li><p>Once the container has stopped, you can remove it by using the <code>docker rm</code> command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker <span class="hljs-built_in">rm</span> &lt;the-container-id&gt;</code></pre></div></li></ol></li><li><p>Let’s build our updated version of the image, using the same command we used before.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker build -t getting-started .</code></pre></div></li><li><p>Let’s start a new container using the updated code.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 getting-started</code></pre></div></li></ol><h3 id="Removing-a-container-using-the-Docker-Dashboard"><a href="#Removing-a-container-using-the-Docker-Dashboard" class="headerlink" title="Removing a container using the Docker Dashboard"></a>Removing a container using the Docker Dashboard</h3><p>If you open the Docker dashboard, you can remove a container with two clicks! It’s certainly much easier than having to look up the container ID and remove it.</p><ol><li>With the dashboard opened, hover over the app container and you’ll see a collection of action buttons appear on the right.</li><li>Click on the trash can icon to delete the container.</li><li>Confirm the removal and you’re done!</li></ol><h2 id="Sharing-our-App"><a href="#Sharing-our-App" class="headerlink" title="Sharing our App"></a>Sharing our App</h2><p>Now that we’ve built an image, let’s share it! To share Docker images, you have to use a Docker registry. The default registry is Docker Hub and is where all of the images we’ve used have come from.</p><h3 id="Create-a-Repo"><a href="#Create-a-Repo" class="headerlink" title="Create a Repo"></a>Create a Repo</h3><p>To push an image, we first need to create a repo on Docker Hub.</p><ol><li>Go to <a href="https://hub.docker.com/">Docker Hub</a> and log in if you need to.</li><li>Click the <strong>Create Repository</strong> button.</li><li>For the repo name, use <code>getting-started</code>. Make sure the Visibility is <code>Public</code>.</li><li>Click the <strong>Create</strong> button!</li></ol><p>If you look on the right-side of the page, you’ll see a section named <strong>Docker commands</strong>. This gives an example command that you will need to run to push to this repo.</p><h3 id="Pushing-our-Image"><a href="#Pushing-our-Image" class="headerlink" title="Pushing our Image"></a>Pushing our Image</h3><ol><li>In the command line, try running the push command you see on Docker Hub. Note that your command will be using your namespace, not “docker”. ( <a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a> )</li></ol><p>Push an image or a repository to a registry</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker push [OPTIONS] NAME[:TAG]</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">$ docker push docker/getting-startedThe push refers to repository [docker.io/docker/getting-started]An image does not exist locally with the tag: docker/getting-started</code></pre></div><p>Why did it fail? The push command was looking for an image named docker&#x2F;getting-started, but didn’t find one. If you run <code>docker image ls</code>, you won’t see one either.</p><p>To fix this, we need to “tag” our existing image we’ve built to give it another name.</p><ol start="2"><li><p>Login to the Docker Hub using the command <code>docker login -u YOUR-USER-NAME</code>.</p></li><li><p>Use the <code>docker tag</code> command to give the <code>getting-started</code> image a new name. Be sure to swap out <code>YOUR-USER-NAME</code> with your Docker ID. ( <a href="https://docs.docker.com/engine/reference/commandline/tag/">docker tag</a> )</p></li></ol><p>Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">$ docker tag getting-started YOUR-USER-NAME/getting-started</code></pre></div><ol start="4"><li>Now try your push command again. If you’re copying the value from Docker Hub, you can drop the <code>tagname</code> portion, as we didn’t add a tag to the image name. If you don’t specify a tag, Docker will use a tag called <code>latest</code>.</li></ol><div class="code-wrapper"><pre><code class="hljs sh">$ docker push YOUR-USER-NAME/getting-started</code></pre></div><h3 id="Running-our-Image-on-a-New-Instance"><a href="#Running-our-Image-on-a-New-Instance" class="headerlink" title="Running our Image on a New Instance"></a>Running our Image on a New Instance</h3><p>Now that our image has been built and pushed into a registry, let’s try running our app on a brand new instance that has never seen this container image! To do this, we will use Play with Docker.</p><ol><li><p>Open your browser to <a href="https://labs.play-with-docker.com/">Play with Docker</a>.</p></li><li><p>Log in with your Docker Hub account.</p></li><li><p>Once you’re logged in, click on the “+ ADD NEW INSTANCE” link in the left side bar. (If you don’t see it, make your browser a little wider.) After a few seconds, a terminal window will be opened in your browser.</p></li><li><p>In the terminal, start your freshly pushed app.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 YOUR-USER-NAME/getting-started</code></pre></div><p>You should see the image get pulled down and eventually start up!</p></li><li><p>Click on the 3000 badge when it comes up and you should see the app with your modifications! Hooray! If the 3000 badge doesn’t show up, you can click on the “Open Port” button and type in 3000.</p></li></ol><h2 id="Persisting-our-DB"><a href="#Persisting-our-DB" class="headerlink" title="Persisting our DB"></a>Persisting our DB</h2><p>In case you didn’t notice, our todo list is being wiped clean every single time we launch the container. Why is this? Let’s dive into how the container is working.</p><h3 id="The-Container’s-Filesystem"><a href="#The-Container’s-Filesystem" class="headerlink" title="The Container’s Filesystem"></a>The Container’s Filesystem</h3><p>When a container runs, it uses the various layers from an image for its filesystem. Each container also gets its own “scratch space” to create&#x2F;update&#x2F;remove files. Any changes won’t be seen in another container, <em>even if</em> they are using the same image.</p><h3 id="Container-Volumes"><a href="#Container-Volumes" class="headerlink" title="Container Volumes"></a>Container Volumes</h3><p>With the previous experiment, we saw that each container starts from the image definition each time it starts. While containers can create, update, and delete files, those changes are lost when the container is removed and all changes are isolated to that container. With volumes, we can change all of this.</p><p><a href="https://docs.docker.com/storage/volumes/">Volumes</a> provide the ability to connect specific filesystem paths of the container back to the host machine. If a directory in the container is mounted, changes in that directory are also seen on the host machine. If we mount that same directory across container restarts, we’d see the same files.</p><p>There are two main types of volumes. We will eventually use both, but we will start with <strong>named volumes</strong>.</p><h3 id="Persisting-our-Todo-Data"><a href="#Persisting-our-Todo-Data" class="headerlink" title="Persisting our Todo Data"></a>Persisting our Todo Data</h3><p>By default, the todo app stores its data in a <a href="https://www.sqlite.org/index.html">SQLite Database</a> at <code>/etc/todos/todo.db</code>. We’ll talk about switching this to a different database engine later.</p><p>With the database being a single file, if we can persist that file on the host and make it available to the next container, it should be able to pick up where the last one left off. By creating a volume and attaching (often called “mounting”) it to the directory the data is stored in, we can persist the data. As our container writes to the <code>todo.db</code> file, it will be persisted to the host in the volume.</p><p>As mentioned, we are going to use a <strong>named volume</strong>. Think of a named volume as simply a bucket of data. Docker maintains the physical location on the disk and you only need to remember the name of the volume. Every time you use the volume, Docker will make sure the correct data is provided.</p><ol><li><p>Create a volume by using the <code>docker volume create</code> command. ( <a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a> )</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker volume create [OPTIONS] [VOLUME]</code></pre></div><div class="code-wrapper"><pre><code class="hljs sh">$ docker volume create todo-db</code></pre></div></li><li><p>Stop the todo app container once again in the Dashboard (or with <code>docker rm -f &lt;container-id&gt;</code>), as it is still running without using the persistent volume.</p></li><li><p>Start the todo app container, but add the <code>-v</code> flag to specify a volume mount. We will use the named volume and mount it to <code>/etc/todos</code>, which will capture all files created at the path.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \-v todo-db:/etc/todos \--name named-volumes \getting-started</code></pre></div></li><li><p>Once the container starts up, open the app and add a few items to your todo list.</p></li><li><p>Remove the container for the todo app. Use the Dashboard or <code>docker ps</code> to get the ID and then <code>docker rm -f &lt;container-id&gt;</code> to remove it.</p></li><li><p>Start a new container using the same command from above.</p></li><li><p>Open the app. You should see your items still in your list!</p></li><li><p>Go ahead and remove the container when you’re done checking out your list.</p></li></ol><h3 id="Diving-into-our-Volume"><a href="#Diving-into-our-Volume" class="headerlink" title="Diving into our Volume"></a>Diving into our Volume</h3><p>A lot of people frequently ask “Where is Docker <em>actually</em> storing my data when I use a named volume?” If you want to know, you can use the <code>docker volume inspect</code> command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker volume inspect todo-db[    &#123;        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2019-09-26T02:18:36Z&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/todo-db/_data&quot;</span>,        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;todo-db&quot;</span>,        <span class="hljs-string">&quot;Options&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>    &#125;]</code></pre></div><p>The <code>Mountpoint</code> is the actual location on the disk where the data is stored. Note that on most machines, you will need to have root access to access this directory from the host. But, that’s where it is!</p><h2 id="Using-Bind-Mounts"><a href="#Using-Bind-Mounts" class="headerlink" title="Using Bind Mounts"></a>Using Bind Mounts</h2><p>In the previous chapter, we talked about and used a <strong>named volume</strong> to persist the data in our database. Named volumes are great if we simply want to store data, as we don’t have to worry about where the data is stored.</p><p>With <strong>bind mounts</strong>, we control the exact mountpoint on the host. We can use this to persist data, but is often used to provide additional data into containers. When working on an application, we can use a bind mount to mount our source code into the container to let it see code changes, respond, and <em>let us see the changes right away</em>.</p><p>For Node-based applications, <a href="https://npmjs.com/package/nodemon">nodemon</a> is a great tool to watch for file changes and then restart the application. There are equivalent tools in most other languages and frameworks.</p><h3 id="Quick-Volume-Type-Comparisons"><a href="#Quick-Volume-Type-Comparisons" class="headerlink" title="Quick Volume Type Comparisons"></a>Quick Volume Type Comparisons</h3><p>Bind mounts and named volumes are the two main types of volumes that come with the Docker engine. However, additional volume drivers are available to support other use cases (<a href="https://github.com/vieux/docker-volume-sshfs">SFTP</a>, <a href="https://ceph.com/geen-categorie/getting-started-with-the-docker-rbd-volume-plugin/">Ceph</a>, <a href="https://netappdvp.readthedocs.io/en/stable/">NetApp</a>, <a href="https://github.com/elementar/docker-s3-volume">S3</a>, and more).</p><table><thead><tr><th align="left"></th><th align="left">Named Volumes</th><th align="left">Bind Mounts</th></tr></thead><tbody><tr><td align="left">Host Location</td><td align="left">Docker chooses</td><td align="left">You control</td></tr><tr><td align="left">Mount Example (using <code>-v</code>)</td><td align="left">my-volume:&#x2F;usr&#x2F;local&#x2F;data</td><td align="left">&#x2F;path&#x2F;to&#x2F;data:&#x2F;usr&#x2F;local&#x2F;data</td></tr><tr><td align="left">Populates new volume with container contents</td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left">Supports Volume Drivers</td><td align="left">Yes</td><td align="left">No</td></tr></tbody></table><h3 id="Starting-a-Dev-Mode-Container"><a href="#Starting-a-Dev-Mode-Container" class="headerlink" title="Starting a Dev-Mode Container"></a>Starting a Dev-Mode Container</h3><p>To run our container to support a development workflow, we will do the following:</p><ul><li>Mount our source code into the container</li><li>Install all dependencies, including the “dev” dependencies</li><li>Start nodemon to watch for filesystem changes</li></ul><p>So, let’s do it!</p><ol><li><p>Make sure you don’t have any previous <code>getting-started</code> containers running.</p></li><li><p>Run the following command from the source code folder. We’ll explain what’s going on afterwards:</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \    -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> \    node:12-alpine \    --name Bind-Mounts \    sh -c <span class="hljs-string">&quot;yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><p>If you are using PowerShell then use this command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 `    -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> `    node:12-alpine `    --name Bind-Mounts `    sh -c <span class="hljs-string">&quot;yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><p>If you are using an Apple Silicon Mac or another ARM64 device then use this command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \    -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> \    node:12-alpine \    --name Bind-Mounts \    sh -c <span class="hljs-string">&quot;apk add --no-cache python2 g++ make &amp;&amp; yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><ul><li><code>-dp 3000:3000</code> - same as before. Run in detached (background) mode and create a port mapping</li><li><code>-w /app</code> - sets the container’s present working directory where the command will run from</li><li><code>-v &quot;$(pwd):/app&quot;</code> - bind mount (link) the host’s present working directory to the container’s <code>/app</code> directory</li><li><code>node:12-alpine</code> - the image to use. Note that this is the base image for our app from the Dockerfile</li><li><code>--name Bind-Mounts</code> - rename the container as bind mounts</li><li><code>sh -c &quot;yarn install &amp;&amp; yarn run dev&quot;</code> - the command. We’re starting a shell using <code>sh</code> (alpine doesn’t have <code>bash</code>) and running <code>yarn install</code> to install <em>all</em> dependencies and then running <code>yarn run dev</code>. If we look in the <code>package.json</code>, we’ll see that the <code>dev</code> script is starting <code>nodemon</code>.</li></ul></li><li><p>You can watch the logs using <code>docker logs -f &lt;container-id&gt;</code>. You’ll know you’re ready to go when you see this…</p><div class="code-wrapper"><pre><code class="hljs sh">docker logs -f &lt;container-id&gt;$ nodemon src/index.js[nodemon] 1.19.2[nodemon] to restart at any time, enter `rs`[nodemon] watching <span class="hljs-built_in">dir</span>(s): *.*[nodemon] starting `node src/index.js`Using sqlite database at /etc/todos/todo.dbListening on port 3000</code></pre></div><p>When you’re done watching the logs, exit out by hitting <code>Ctrl</code>+<code>C</code>.</p></li><li><p>Now, let’s make a change to the app. In the <code>src/static/js/app.js</code> file, let’s change the “Add Item” button to simply say “Add”. This change will be on line 109 - remember to save the file.</p><div class="code-wrapper"><pre><code class="hljs js">-                         &#123;submitting ? <span class="hljs-string">&#x27;Adding...&#x27;</span> : <span class="hljs-string">&#x27;Add Item&#x27;</span>&#125;+                         &#123;submitting ? <span class="hljs-string">&#x27;Adding...&#x27;</span> : <span class="hljs-string">&#x27;Add&#x27;</span>&#125;</code></pre></div></li><li><p>Simply refresh the page (or open it) and you should see the change reflected in the browser almost immediately. It might take a few seconds for the Node server to restart, so if you get an error, just try refreshing after a few seconds.</p></li><li><p>Feel free to make any other changes you’d like to make. When you’re done, stop the container and build your new image using <code>docker build -t getting-started .</code>.</p></li></ol><p>Using bind mounts is <em>very</em> common for local development setups. The advantage is that the dev machine doesn’t need to have all of the build tools and environments installed. With a single <code>docker run</code> command, the dev environment is pulled and ready to go. We’ll talk about Docker Compose in a future step, as this will help simplify our commands (we’re already getting a lot of flags).</p><h2 id="Multi-Container-Apps"><a href="#Multi-Container-Apps" class="headerlink" title="Multi-Container Apps"></a>Multi-Container Apps</h2><p>Up to this point, we have been working with single container apps. But, we now want to add MySQL to the application stack. The following question often arises - “Where will MySQL run? Install it in the same container or run it separately?” In general, <strong>each container should do one thing and do it well.</strong> A few reasons:</p><ul><li>There’s a good chance you’d have to scale APIs and front-ends differently than databases.</li><li>Separate containers let you version and update versions in isolation.</li><li>While you may use a container for the database locally, you may want to use a managed service for the database in production. You don’t want to ship your database engine with your app then.</li><li>Running multiple processes will require a process manager (the container only starts one process), which adds complexity to container startup&#x2F;shutdown.</li></ul><p>And there are more reasons. So, we will update our application to work like this:</p><h3 id="Container-Networking"><a href="#Container-Networking" class="headerlink" title="Container Networking"></a>Container Networking</h3><p>Remember that containers, by default, run in isolation and don’t know anything about other processes or containers on the same machine. So, how do we allow one container to talk to another? The answer is <strong>networking</strong>. Simply remember this rule…</p><blockquote><p>If two containers are on the same network, they can talk to each other. If they aren’t, they can’t.</p></blockquote><h3 id="Starting-MySQL"><a href="#Starting-MySQL" class="headerlink" title="Starting MySQL"></a>Starting MySQL</h3><p>There are two ways to put a container on a network: 1) Assign it at start or 2) connect an existing container. For now, we will create the network first and attach the MySQL container at startup.</p><ol><li><p>Create the network.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker network create todo-app</code></pre></div></li><li><p>Start a MySQL container and attach it to the network. We’re also going to define a few environment variables that the database will use to initialize the database (see the “Environment Variables” section in the <a href="https://hub.docker.com/_/mysql/">MySQL Docker Hub listing</a>).</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -d \    --network todo-app --network-alias mysql \    -v todo-mysql-data:/var/lib/mysql \    -e MYSQL_ROOT_PASSWORD=secret \    -e MYSQL_DATABASE=todos \    --name MySQL \    mysql:5.7</code></pre></div><p>If you are using PowerShell then use this command.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -d `    --network todo-app --network-alias mysql `    -v todo-mysql-data:/var/lib/mysql `    -e MYSQL_ROOT_PASSWORD=secret `    -e MYSQL_DATABASE=todos `    --name MySQL `    mysql:5.7</code></pre></div><p>You’ll also see we specified the <code>--network-alias</code> flag. We’ll come back to that in just a moment.</p></li></ol><blockquote><p>If you see a <code>docker: no matching manifest</code> error, it’s because you’re trying to run the container in a different architecture than amd64, which is the only supported architecture for the mysql image at the moment. To solve this add the flag <code>--platform linux/amd64</code> in the previous command. So your new command should look like this:</p><p>`&#96;&#96;bash</p></blockquote><ol start="3"><li>To confirm we have the database up and running, connect to the database and verify it connects.</li></ol><div class="code-wrapper"><pre><code class="hljs sh">$ docker <span class="hljs-built_in">exec</span> -it &lt;mysql-container-id&gt; mysql -p</code></pre></div><p>When the password prompt comes up, type in <em><strong>secret</strong></em>. In the MySQL shell, list the databases and verify you see the <code>todos</code> database.</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW DATABASES;</code></pre></div><p>You should see output that looks like this:</p><div class="code-wrapper"><pre><code class="hljs mysql">+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || todos              |+--------------------+5 rows in set (0.00 sec)</code></pre></div><p>Hooray! We have our <code>todos</code> database and it’s ready for us to use!</p><p>To exit the sql terminal type <code>exit</code> in the terminal.</p><h3 id="Running-our-App-with-MySQL"><a href="#Running-our-App-with-MySQL" class="headerlink" title="Running our App with MySQL"></a>Running our App with MySQL</h3><p>The todo app supports the setting of a few environment variables to specify MySQL connection settings. They are:</p><ul><li><code>MYSQL_HOST</code> - the hostname for the running MySQL server</li><li><code>MYSQL_USER</code> - the username to use for the connection</li><li><code>MYSQL_PASSWORD</code> - the password to use for the connection</li><li><code>MYSQL_DB</code> - the database to use once connected</li></ul><p>With all of that explained, let’s start our dev-ready container!</p><ol><li><p>We’ll specify each of the environment variables above, as well as connect the container to our app network.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \  -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> \  --network todo-app \  --name MySQL-App \  -e MYSQL_HOST=mysql \  -e MYSQL_USER=root \  -e MYSQL_PASSWORD=secret \  -e MYSQL_DB=todos \  node:12-alpine \  sh -c <span class="hljs-string">&quot;yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><p>If you updated your docker file in the Bind Mount section of the tutorial use the updated command:</p><div class="code-wrapper"><pre><code class="hljs sh">```bash hl_lines=<span class="hljs-string">&quot;3 4 5 6 7&quot;</span></code></pre></div><p>If you are using MacOS then use this command:</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \   -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> \   --network todo-app \   --name MySQL-App \  -e MYSQL_HOST=mysql \   -e MYSQL_USER=root \   -e MYSQL_PASSWORD=secret \   -e MYSQL_DB=todos \   node:12-alpine \   sh -c <span class="hljs-string">&quot;apk --no-cache --virtual build-dependencies add python2 make g++ &amp;&amp; yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><p>If you are using PowerShell then use this command:</p><div class="code-wrapper"><pre><code class="hljs sh">$ powershell hl_lines=<span class="hljs-string">&quot;3 4 5 6 7&quot;</span> $ docker run -dp 3000:3000 `  -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span>`  --network todo-app `  --name MySQL-App `  -e MYSQL_HOST=mysql `  -e MYSQL_USER=root `  -e MYSQL_PASSWORD=secret`   -e MYSQL_DB=todos `  node:12-alpine`  sh -c <span class="hljs-string">&quot;yarn install &amp;&amp; yarn run dev&quot;</span> ```</code></pre></div></li><li><p>If we look at the logs for the container (<code>docker logs &lt;container-id&gt;</code>), we should see a message indicating it’s using the mysql database.</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># Previous log messages omitted</span>$ docker logs -f &lt;container-id&gt;$ nodemon src/index.js[nodemon] 1.19.2[nodemon] to restart at any time, enter `rs`[nodemon] watching <span class="hljs-built_in">dir</span>(s): *.*[nodemon] starting `node src/index.js`Connected to mysql db at host mysqlListening on port 3000</code></pre></div></li><li><p>Open the app in your browser and add a few items to your todo list.</p></li><li><p>Connect to the mysql database and prove that the items are being written to the database. Remember, the password is <strong>secret</strong>.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker <span class="hljs-built_in">exec</span> -it &lt;mysql-container-id&gt; mysql -p todos</code></pre></div><p>And in the mysql shell, run the following:</p><div class="code-wrapper"><pre><code class="hljs sh">mysql&gt; select * from todo_items;+--------------------------------------+--------------------+-----------+| <span class="hljs-built_in">id</span>                                   | name               | completed |+--------------------------------------+--------------------+-----------+| c906ff08-60e6-44e6-8f49-ed56a0853e85 | Do amazing things! |         0 || 2912a79e-8486-4bc3-a4c5-460793a575ab | Be awesome!        |         0 |+--------------------------------------+--------------------+-----------+</code></pre></div><p>Obviously, your table will look different because it has your items. But, you should see them stored there!</p></li></ol><p>If you take a quick look at the Docker Dashboard, you’ll see that we have two app containers running. But, there’s no real indication that they are grouped together in a single app. We’ll see how to make that better shortly!</p><h2 id="Using-Docker-Compose"><a href="#Using-Docker-Compose" class="headerlink" title="Using Docker Compose"></a>Using Docker Compose</h2><p><a href="https://docs.docker.com/compose/">Docker Compose</a> is a tool that was developed to help define and share multi-container applications. With Compose, we can create a YAML file to define the services and with a single command, can spin everything up or tear it all down.</p><p>The <em>big</em> advantage of using Compose is you can define your application stack in a file, keep it at the root of your project repo (it’s now version controlled), and easily enable someone else to contribute to your project. Someone would only need to clone your repo and start the compose app. In fact, you might see quite a few projects on GitHub&#x2F;GitLab doing exactly this now.</p><h3 id="Installing-Docker-Compose"><a href="#Installing-Docker-Compose" class="headerlink" title="Installing Docker Compose"></a>Installing Docker Compose</h3><p>If you installed Docker Desktop&#x2F;Toolbox for either Windows or Mac, you already have Docker Compose! Play-with-Docker instances already have Docker Compose installed as well. If you are on a Linux machine, you will need to install Docker Compose using <a href="https://docs.docker.com/compose/install/">the instructions here</a>.</p><p>After installation, you should be able to run the following and see version information.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker-compose version</code></pre></div><h3 id="Creating-our-Compose-File"><a href="#Creating-our-Compose-File" class="headerlink" title="Creating our Compose File"></a>Creating our Compose File</h3><p>At the root of the app project, create a file named <code>docker-compose.yml</code>.</p><p>Remember that the two services defined on the yaml file is the same as we metion above:</p><ol><li>Service 1 : app</li></ol><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -d \    --network todo-app --network-alias mysql \    -v todo-mysql-data:/var/lib/mysql \    -e MYSQL_ROOT_PASSWORD=secret \    -e MYSQL_DATABASE=todos \    --name MySQL \    mysql:5.7</code></pre></div><ol start="2"><li>Service 2 : mysql</li></ol><div class="code-wrapper"><pre><code class="hljs sh">$ docker run -dp 3000:3000 \   -w /app -v <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>:/app&quot;</span> \   --network todo-app \   --name MySQL-App \  -e MYSQL_HOST=mysql \   -e MYSQL_USER=root \   -e MYSQL_PASSWORD=secret \   -e MYSQL_DB=todos \   node:12-alpine \   sh -c <span class="hljs-string">&quot;apk --no-cache --virtual build-dependencies add python2 make g++ &amp;&amp; yarn install &amp;&amp; yarn run dev&quot;</span></code></pre></div><p>Our complete <code>docker-compose.yml</code> should look like this:</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># define the schema version</span><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><span class="hljs-comment"># define the list of services (or containers) we want to run as part of our application</span><span class="hljs-attr">services:</span><span class="hljs-comment"># SERVICE 1</span><span class="hljs-comment"># define the service entry and the image for the container</span>  <span class="hljs-attr">app:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">node:12-alpine</span>        <span class="hljs-comment"># migrate the command</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">sh</span> <span class="hljs-string">-c</span> <span class="hljs-string">&quot;apk --no-cache --virtual build-dependencies add python2 make g++ &amp;&amp; yarn install &amp;&amp; yarn run dev&quot;</span>        <span class="hljs-comment"># migrate the -p 3000:3000</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">3000</span><span class="hljs-string">:3000</span>          <span class="hljs-comment"># migrate both the working directory (-w /app) and the volume mapping (-v &quot;$(pwd):/app&quot;)</span>    <span class="hljs-attr">working_dir:</span> <span class="hljs-string">/app</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./:/app</span>        <span class="hljs-comment"># we need to migrate the environment variable definitions using the environment key.</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">MYSQL_HOST:</span> <span class="hljs-string">mysql</span>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">root</span>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">secret</span>      <span class="hljs-attr">MYSQL_DB:</span> <span class="hljs-string">todos</span><span class="hljs-comment"># SERVICE 2</span><span class="hljs-comment"># define the new service and name it mysql</span>  <span class="hljs-attr">mysql:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span>        <span class="hljs-comment"># define the volume mapping</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">todo-mysql-data:/var/lib/mysql</span>          <span class="hljs-comment"># specify the environment variables</span>    <span class="hljs-attr">environment:</span>       <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">secret</span>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">todos</span><span class="hljs-attr">volumes:</span>  <span class="hljs-attr">todo-mysql-data:</span></code></pre></div><h3 id="Running-our-Application-Stack"><a href="#Running-our-Application-Stack" class="headerlink" title="Running our Application Stack"></a>Running our Application Stack</h3><p>Now that we have our <code>docker-compose.yml</code> file, we can start it up!</p><ol><li><p>Make sure no other copies of the app&#x2F;db are running first (<code>docker ps</code> and <code>docker rm -f &lt;ids&gt;</code>).</p></li><li><p>Start up the application stack using the <code>docker-compose up</code> command. We’ll add the <code>-d</code> flag to run everything in the background.</p><div class="code-wrapper"><pre><code class="hljs sh">$ docker-compose up -d</code></pre></div><p>When we run this, we should see output like this:</p><div class="code-wrapper"><pre><code class="hljs sh">Creating network <span class="hljs-string">&quot;app_default&quot;</span> with the default driverCreating volume <span class="hljs-string">&quot;app_todo-mysql-data&quot;</span> with default driverCreating app_app_1   ... <span class="hljs-keyword">done</span>Creating app_mysql_1 ... <span class="hljs-keyword">done</span></code></pre></div><p>You’ll notice that the volume was created as well as a network! By default, Docker Compose automatically creates a network specifically for the application stack (which is why we didn’t define one in the compose file).</p></li><li><p>Let’s look at the logs using the <code>docker-compose logs -f</code> command. You’ll see the logs from each of the services interleaved into a single stream. This is incredibly useful when you want to watch for timing-related issues. The <code>-f</code> flag “follows” the log, so will give you live output as it’s generated.</p><p>If you don’t already, you’ll see output that looks like this…</p><div class="code-wrapper"><pre><code class="hljs sh">mysql_1  | 2019-10-03T03:07:16.083639Z 0 [Note] mysqld: ready <span class="hljs-keyword">for</span> connections.mysql_1  | Version: <span class="hljs-string">&#x27;5.7.27&#x27;</span>  socket: <span class="hljs-string">&#x27;/var/run/mysqld/mysqld.sock&#x27;</span>  port: 3306  MySQL Community Server (GPL)app_1    | Connected to mysql db at host mysqlapp_1    | Listening on port 3000</code></pre></div><p>The service name is displayed at the beginning of the line (often colored) to help distinguish messages. If you want to view the logs for a specific service, you can add the service name to the end of the logs command (for example, <code>docker-compose logs -f app</code>).</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (Ⅵ) - Continuous integration with Github Actions</title>
    <link href="/2021/11/11/Software%20Prototyping%20(%E2%85%A5)%20-%20Continuous%20integration%20with%20Github%20Actions/"/>
    <url>/2021/11/11/Software%20Prototyping%20(%E2%85%A5)%20-%20Continuous%20integration%20with%20Github%20Actions/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-Ⅵ-Continuous-integration-with-Github-Actions"><a href="#Software-Prototyping-Ⅵ-Continuous-integration-with-Github-Actions" class="headerlink" title="Software Prototyping (Ⅵ) - Continuous integration with Github Actions"></a>Software Prototyping (Ⅵ) - Continuous integration with Github Actions</h1><p><a href="https://martinfowler.com/articles/continuousIntegration.html">Continuous integration (CI) servers </a>are a great way to make sure that all changes to master are tested before deploying. CI servers are also great for automating the deployment part. CI servers used to be a real pain to configure. Cloud-based CI servers have simplified things so that now there’s no reason not to set one up for any project that needs public deployment.</p><h2 id="Quickstart-for-Github-Actions"><a href="#Quickstart-for-Github-Actions" class="headerlink" title="Quickstart for Github Actions"></a>Quickstart for Github Actions</h2><p>Follow this link : <a href="https://docs.github.com/en/actions/quickstart">CI with Github Actions</a> to Enable your Github Actions and run your Github Actions workflow.</p><p>Github looks for <em>workflow files</em>. These are YAML files in the subdirectory <strong>.github&#x2F;workflows</strong> at the root of the repository.</p><h2 id="YAML-for-ReactJS-web-apps"><a href="#YAML-for-ReactJS-web-apps" class="headerlink" title="YAML for ReactJS web apps"></a>YAML for ReactJS web apps</h2><p>First, here is <a href="https://www.cypress.io/blog/2019/11/20/drastically-simplify-your-testing-with-cypress-github-action/">a basic workflow file for ReactJS</a>.</p><blockquote><p>Read through the text that follows to understand how the script works. A similar script appears in the next subsection for testing and deploying the web version of an Expo React Native app. That section assumes you’ve read and understood this section.</p></blockquote><p>Then create a <strong>main.yml</strong> file under <strong>.github&#x2F;workflows&#x2F;</strong> folder : </p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">React</span> <span class="hljs-string">CI</span><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<span class="hljs-attr">jobs:</span>  <span class="hljs-attr">build:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">unit</span> <span class="hljs-string">test</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span> <span class="hljs-string">--if-present</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">test</span>    <span class="hljs-attr">cypress:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">Cypress</span> <span class="hljs-string">test</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-comment"># https://www.cypress.io/blog/2019/11/20/drastically-simplify-your-testing-with-cypress-github-action/</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">cypress-io/github-action@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">build:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span>          <span class="hljs-attr">start:</span> <span class="hljs-string">npm</span> <span class="hljs-string">start</span>          <span class="hljs-attr">wait-on:</span> <span class="hljs-string">http://localhost:3000</span>  <span class="hljs-attr">deploy:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">Firebase</span> <span class="hljs-string">deploy</span>    <span class="hljs-attr">needs:</span> [<span class="hljs-string">build</span>, <span class="hljs-string">cypress</span>]    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;14&#x27;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">-g</span> <span class="hljs-string">firebase-tools</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">firebase</span> <span class="hljs-string">deploy</span> <span class="hljs-string">--token</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; secrets.FIREBASE_DEPLOY_TOKEN &#125;&#125;</span>&quot;</span> <span class="hljs-string">--non-interactive</span></code></pre></div><p>This defines three jobs:</p><ul><li><strong>build</strong>: this builds the app and runs any unit tests</li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm installnpm run build --if-presentnpm test</code></pre></div><ul><li><strong>cypress</strong>: this builds the app and runs any Cypress end-to-end tests</li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm run buildnpm start</code></pre></div><ul><li><strong>deploy</strong>: this builds and deploys the app to a Firebase host site if the first two succeed.</li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm installnpm run buildnpm install -g firebase-toolsfirebase deploy --token &quot;$&#123;&#123; secrets.FIREBASE_DEPLOY_TOKEN &#125;&#125;&quot; --non-interactive</code></pre></div><h2 id="Deployment-tokens-for-firebase"><a href="#Deployment-tokens-for-firebase" class="headerlink" title="Deployment tokens for firebase"></a>Deployment tokens for firebase</h2><p>To deploy to Firebase, you have to have selected that option when you run <strong>firebase init</strong>. The initialization will ask what Firebase project you want to associate your app with. This could be a new project or an existing one. If you are already using the Firebase Realtime Database, use that project.</p><p>When Firebase asks what directory to use, enter <strong>build</strong> for React.</p><p>Test that deployment works locally first, do this for ReactJS:</p><div class="code-wrapper"><pre><code class="hljs shell">npm run buildfirebase deploy</code></pre></div><p>The token is a secret encrypted key that Firebase will give you, that you need to store on Github. It should never be shared or put in any public location.</p><p>To get the key, use this command:</p><div class="code-wrapper"><pre><code class="hljs shell">firebase login:ci</code></pre></div><blockquote><p><em>Don’t put secret keys into the YAML file or any other code file that is checked in!</em> Instead, <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets">store the key on Github in a secret environment variable.</a> Go to the Github repository for your app. Go to the <strong>Settings</strong> page. Click on <strong>Secrets</strong>. Create a new repository key. Call it <strong>FIREBASE_DEPLOY_TOKEN</strong>. Copy and paste the encrypted key returned by <strong>firebase login:ci</strong>.</p></blockquote><p><img src="https://i.loli.net/2021/11/12/69wtmdMYvOLWaCe.png" alt="image-20211111203217344"></p><h2 id="Test-your-CI-set-up"><a href="#Test-your-CI-set-up" class="headerlink" title="Test your CI set up"></a>Test your CI set up</h2><p>To test your CI set up, just using <code>git push</code> for your project, then check the <strong>Actions</strong> button on your repo like:</p><p><img src="https://i.loli.net/2021/11/12/1CIkyW5HzrUbnQL.png" alt="image-20211111203506682"></p><p>Running a ReactJS or React Native job may take several minutes or more. That’s fine. Except when first testing your CI configuration, <em>you do not wait to see if your build and tests succeed on the CI server</em>. Just build and test locally, commit and push, and go on to your next task. Github will email you the results.</p><p>To see if the status of an action, click on <strong>Actions</strong> at the top of your repo’s main page. There you will see a list of jobs that have been run or are in process. From there, you can view the terminal output of the job. This is where you can see if a build and test passed or failed.</p>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 基础操作使用总结</title>
    <link href="/2021/11/08/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2021/11/08/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="git-基础操作使用总结"><a href="#git-基础操作使用总结" class="headerlink" title="git 基础操作使用总结"></a>git 基础操作使用总结</h1><h2 id="Git-创建-x2F-克隆仓库"><a href="#Git-创建-x2F-克隆仓库" class="headerlink" title="Git 创建&#x2F;克隆仓库"></a>Git 创建&#x2F;克隆仓库</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p><strong>git init</strong> 命令用于在目录中创建新的 Git 仓库。在目录中执行 <strong>git init</strong> 就可以创建一个 Git 仓库了</p><div class="code-wrapper"><pre><code class="hljs shell">mkdir testcd test/git init<span class="hljs-meta prompt_"># </span><span class="language-bash">可以在项目中看到生成的.git子目录，初始化完成</span></code></pre></div><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><strong>git clone</strong> 命令用于拷贝一个 Git 仓库到本地</p><div class="code-wrapper"><pre><code class="hljs shell">git clone [url]</code></pre></div><h2 id="Git-提交与修改"><a href="#Git-提交与修改" class="headerlink" title="Git 提交与修改"></a>Git 提交与修改</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><strong>git add</strong> 命令将文件提交到暂存区</p><ol><li>添加多个文件到暂存区：</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git add [file1] [file2]</code></pre></div><ol start="2"><li>添加一个目录到暂存区：</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git add [dir]</code></pre></div><ol start="3"><li>添加项目下的所有文件到暂存区：</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git add .</code></pre></div><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p><strong>git status</strong> 命令用于查看在你上次提交之后是否有对文件进行再次修改</p><div class="code-wrapper"><pre><code class="hljs shell">git statusgit status -s #通常我们使用 -s 参数来获得简短的输出结果</code></pre></div><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p><strong>git diff</strong> 用来比较文件的不同，即文件在暂存区和工作区之间的差异，根据不同的情况有不同的参数差异：</p><ol><li>尚未缓存的改动：<strong>git diff</strong></li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示暂存区和工作区的差异</span>git diff [file]</code></pre></div><ol start="2"><li>查看已缓存的改动：<strong>git diff –cached</strong></li></ol><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示暂存区和上一次提交(commit)的差异</span>git diff --cached [file]</code></pre></div><ol start="3"><li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li><li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li></ol><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><strong>git add</strong> 命令将内容写入暂存区，<strong>git commit</strong> 命令将暂存区内容添加到本地仓库中：</p><div class="code-wrapper"><pre><code class="hljs shell">git commit -m [message] # message可以是一些备注信息</code></pre></div><p>如果只涉及文件修改，不涉及添加&#x2F;删除文件，可以合并 <strong>git add</strong> 和 <strong>git commit</strong> 两部：</p><div class="code-wrapper"><pre><code class="hljs shell">git commit -am [message]</code></pre></div><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本，共有 3 种参数：</p><ol><li><strong>–mixed</strong> ：默认参数，用于重置暂存区的文件与 <em>上一次</em> 的提交(commit)保持一致，工作区文件内容保持不变</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git reset [HEAD]</code></pre></div><ol start="2"><li><strong>–soft</strong> ： 参数用于回退到某个版本</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git reset --soft [HEAD]</code></pre></div><ol start="3"><li><strong>–hard</strong> ： 撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并 <strong>删除</strong> 之前的所有信息提交</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git rest --hard [HEAD]</code></pre></div><p><strong>HEAD说明：</strong></p><ul><li>HEAD.      表示当前版本</li><li>HEAD^     上一个版本</li><li>HEAD^^   上上一个版本</li><li>HEAD^^^ 上上上一个版本</li><li>以此类推…</li></ul><p>可以使用 <strong>～数字</strong> 表示：</p><ul><li>HEAD~0   表示当前版本</li><li>HEAD~1   上一个版本</li><li>HEAD~2   上上一个版本</li><li>HEAD~3   上上上一个版本</li><li>以此类推…</li></ul><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p><strong>git rm</strong> 命令用于删除文件，可以选择从暂存区或者工作区中删除</p><ol><li>将文件从暂存区和工作区中删除</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git rm &lt;file&gt;</code></pre></div><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <strong>-f</strong></p><div class="code-wrapper"><pre><code class="hljs shell">git rm -f &lt;file&gt;</code></pre></div><p>如果需要删除一整个目录，可以使用 <strong>-r</strong></p><div class="code-wrapper"><pre><code class="hljs shell">git rm -r &lt;dir&gt;</code></pre></div><ol start="2"><li>保留工作区文件，仅删除暂存区中的内容</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git rm --cached &lt;file&gt;</code></pre></div><h2 id="Git-远程操作"><a href="#Git-远程操作" class="headerlink" title="Git 远程操作"></a>Git 远程操作</h2><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p><strong>git remote</strong> 命用于在远程仓库的操作</p><ol><li>显示所有远程仓库信息</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git remote - v</code></pre></div><ol start="2"><li>显示某个远程仓库信息</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git remote add [shortname] [url]<span class="hljs-meta prompt_"># </span><span class="language-bash">shortname 为本地的版本库，如origin</span></code></pre></div><ol start="3"><li>其他相关指令</li></ol><div class="code-wrapper"><pre><code class="hljs shell">git remote rm name  # 删除远程仓库git remote rename old_name new_name  # 修改仓库名</code></pre></div><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p><strong>git fetch</strong> 命令用于从远程获取代码库</p><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，首先执行</p><div class="code-wrapper"><pre><code class="hljs shell">git fetch [alias]/[branch]</code></pre></div><p>以上命令通过 Git 去获取它有你没有的数据，然后执行</p><div class="code-wrapper"><pre><code class="hljs shell">git merge [alias]/[branch]</code></pre></div><p>以上命令将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><hr><p><strong>git pull</strong> 命令用于从远程获取代码并合并本地的版本，<strong>git pull</strong> 其实就是 <strong>git fetch</strong> 和 <strong>git merge FETCH_HEAD</strong> 的简写</p><div class="code-wrapper"><pre><code class="hljs shell">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></pre></div><p>例如，将远程主机 origin 的 main 分支拉取过来，与本地的 zachary 分支合并</p><div class="code-wrapper"><pre><code class="hljs shell">git pull origin main:zachary</code></pre></div><p>如果远程分支是与当前分支合并，则 ：后可省略</p><div class="code-wrapper"><pre><code class="hljs shell">git pull origin main</code></pre></div><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><strong>git push</strong> 命用于从将本地的分支版本上传到远程并合并</p><div class="code-wrapper"><pre><code class="hljs shell">git push origin master</code></pre></div><p>如果本地版本与远程版本有差异，但又要强制推送可以使用 <strong>–force</strong> 参数</p><div class="code-wrapper"><pre><code class="hljs shell">git push --force origin master</code></pre></div><p>删除主机的分支可以使用 <strong>–delete</strong> 参数，以下命令表示删除 origin 主机的 master 分支</p><div class="code-wrapper"><pre><code class="hljs shell">git push origin --delete master</code></pre></div><h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p><strong>git branch</strong> 是管理分支命令</p><p>创建新分支</p><div class="code-wrapper"><pre><code class="hljs shell">git branch [branchname]</code></pre></div><p>删除已有分支使用 <strong>-d</strong> 参数</p><div class="code-wrapper"><pre><code class="hljs shell">git branch -d [branchname]</code></pre></div><p>如果想查看该远程仓库包含的分支，可以直接使用 <strong>git branch</strong> 命令</p><div class="code-wrapper"><pre><code class="hljs shell">git branch</code></pre></div><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p><strong>git checkout</strong> 命令用以切换分支</p><div class="code-wrapper"><pre><code class="hljs shell">git checkout [branchname]</code></pre></div><p>也可以使用 <strong>-b</strong> 参数来创建新分支并切换至该目录下</p><div class="code-wrapper"><pre><code class="hljs shell">git checkout -b [branchname]</code></pre></div><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p><strong>git merge</strong> 指令用以将某分支的独立内容合并到主分支中，首先需要切换到主分支中</p><div class="code-wrapper"><pre><code class="hljs shell">git checkout [mainBranch]git merge [subBranch]</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (Ⅴ) - Cypress Usage for Beginner</title>
    <link href="/2021/11/08/Software%20Prototyping%20(%E2%85%A4)%20-%20Cypress%20Usage%20for%20Beginner/"/>
    <url>/2021/11/08/Software%20Prototyping%20(%E2%85%A4)%20-%20Cypress%20Usage%20for%20Beginner/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-Ⅴ-Cypress-Usage-for-Beginner"><a href="#Software-Prototyping-Ⅴ-Cypress-Usage-for-Beginner" class="headerlink" title="Software Prototyping (Ⅴ) - Cypress Usage for Beginner"></a>Software Prototyping (Ⅴ) - Cypress Usage for Beginner</h1><h2 id="Requirement-and-Introduction"><a href="#Requirement-and-Introduction" class="headerlink" title="Requirement and Introduction"></a>Requirement and Introduction</h2><p>To follow along you need a working installation of <strong>Node.js</strong> on your system. Also, a basic understanding of a newer version of JavaScript is a plus.</p><p>Cypress is a popular <strong>end-to-end</strong> testing framework. It’s easier to set up than Selenium&#x2F;WebDriver, and typically runs faster. It has limitations. For example, it currently only supports testing with the Google Chrome browser. But it’s a simple way to get started on end-to-end testing.</p><blockquote><p><strong>End to End Testing</strong>, or UI testing is one the many approaches for testing a web application.</p><p>An end to end test checks whether a web application works as expected or not, by testing the so called <strong>user flow</strong>.</p></blockquote><h2 id="Install-Cypress"><a href="#Install-Cypress" class="headerlink" title="Install Cypress"></a>Install Cypress</h2><p><strong>cd</strong> into the project directory. Install Cypress as a developer dependency. That way Cypress is not included in the delivered application</p><div class="code-wrapper"><pre><code class="hljs shell">npm install cypress --save-dev</code></pre></div><blockquote><p>If you have an Apple Silicon system, <a href="https://www.cypress.io/blog/2021/01/20/running-cypress-on-the-apple-m1-silicon-arm-architecture-using-rosetta-2/">you may need to use Rosetta</a>. Or <a href="https://stackoverflow.com/a/69101287">you may just need to have Big Sur installed</a>.</p></blockquote><p>To make it easy to run Cypress, add the following line to the <strong>scripts</strong> section of the app’s <strong>package.json</strong>:</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;cypress:open&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cypress open&quot;</span><span class="hljs-punctuation">,</span>  ...<span class="hljs-punctuation">&#125;</span></code></pre></div><h2 id="Start-your-App-and-Cypress"><a href="#Start-your-App-and-Cypress" class="headerlink" title="Start your App and Cypress"></a>Start your App and Cypress</h2><p>Cypress talks to a running app, so start your app first like:</p><div class="code-wrapper"><pre><code class="hljs shell">npm start</code></pre></div><p>Then wait the app to appear on your browser. Now, run the Cypress script you added to <strong>package.json</strong>:</p><div class="code-wrapper"><pre><code class="hljs shell">npm run cypress:open</code></pre></div><p>The first time Cypress runs on an app, it creates several required folders. It also installs a number of example test files. Of course  you can safely remove the example folder.</p><p><img src="https://i.loli.net/2021/11/09/W6zVAythZ3IP5uj.png" alt="image-20211108120315808"></p><h2 id="Write-your-first-test"><a href="#Write-your-first-test" class="headerlink" title="Write your first test"></a>Write your first test</h2><p>Create a file called <strong>App.spec.js</strong> in the <strong>cypress&#x2F;integration</strong> folder that Cypress just created in the app directory.</p><blockquote><p>Cypress looks for files that end with <strong>.spec.js</strong>, just as Jest looks for files that end with <strong>.test.js</strong>.</p></blockquote><div class="code-wrapper"><pre><code class="hljs javascript">describe (<span class="hljs-string">&#x27;Test App&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;  it (<span class="hljs-string">&#x27;launches&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    cy.<span class="hljs-property">visit</span> (<span class="hljs-string">&#x27;/&#x27;</span>);  &#125;);&#125;);</code></pre></div><p><code>describe</code> is a Cypress method (borrowed from Mocha) for containing one or more <strong>related tests</strong>. Every time you start writing a new suite of tests for a functionality wrap it in a <code>describe</code> block.</p><p>As you can see it takes two arguments: a string for describing the test suite, and a <strong>callback function for wrapping the actual test</strong>.</p><p><strong>cy</strong> is the Cypress object. It has many methods for interacting with a web app. <strong>cy.visit()</strong> tells Cypress to open the given URL for interaction. It will fail if the page can’t be found. Most tests begin with a call to <strong>cy.visit()</strong>.</p><p>Edit the file <strong>cypress.json</strong>. Cypress created it in your app directory when Cypress first opened. Initially it’s just an empty object. Replace that object with:</p><div class="code-wrapper"><pre><code class="hljs js">&#123;  <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>&#125;</code></pre></div><p>Save this file. Switch to the Cypress user interface. The test <strong>App.spec.js</strong> should now be listed. Click on it.</p><p>After a little bit, the Chrome test results page should show the app interface on the right, and the test results on the left. </p><h2 id="Test-for-content"><a href="#Test-for-content" class="headerlink" title="Test for content"></a>Test for content</h2><p>Let’s modify the <strong>App.spec.js</strong> as follows:</p><div class="code-wrapper"><pre><code class="hljs js">describe (<span class="hljs-string">&#x27;Test App&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;  it (<span class="hljs-string">&#x27;launches&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    cy.<span class="hljs-property">visit</span> (<span class="hljs-string">&#x27;/&#x27;</span>);  &#125;);  it (<span class="hljs-string">&#x27;opens with Fall CS courses&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    cy.<span class="hljs-property">visit</span> (<span class="hljs-string">&#x27;/&#x27;</span>);    cy.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;[data-cy=course]&#x27;</span>).<span class="hljs-title function_">should</span>(<span class="hljs-string">&#x27;contain&#x27;</span>, <span class="hljs-string">&#x27;Fall CS&#x27;</span>);  &#125;);&#125;);</code></pre></div><p>Then add <strong>data-cy&#x3D;”course”</strong> to the object that contains <strong>“Fall CS”</strong>.</p><p>Tests are run independently of each other, so the first step in the new test is to visit the landing page. The test then calls <strong>cy.get()</strong> to get all items on the page marked with the attribute <strong>data-cy&#x3D;”course”</strong>. For each one, it checks for the text “Fall CS”. This test will fail if no such items are found, or if any of them do not contain “Fall CS”.</p><h2 id="Other-resources"><a href="#Other-resources" class="headerlink" title="Other resources"></a>Other resources</h2><p><a href="https://github.com/prescottprue/cypress-firebase">Testing React Firebase Apps with Cypress (Links to an external site.)</a> – describes and links to a library with utilities for Firebase login</p><p><a href="https://cucumber.io/blog/test-automation/happy-unhappy-paths-why-you-need-to-test-both/">Why you should test both happy paths and unhappy paths (Links to an external site.)</a> </p><p><a href="https://martinfowler.com/bliki/GivenWhenThen.html">Given When Then (Links to an external site.)</a> – a structure for describing behavioral tests</p>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cypress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (IV) - Set up Firebase</title>
    <link href="/2021/11/03/Software%20Prototyping%20(IV)%20-%20Set%20up%20Firebase/"/>
    <url>/2021/11/03/Software%20Prototyping%20(IV)%20-%20Set%20up%20Firebase/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-IV-Set-up-Firebase"><a href="#Software-Prototyping-IV-Set-up-Firebase" class="headerlink" title="Software Prototyping (IV) - Set up Firebase"></a>Software Prototyping (IV) - Set up Firebase</h1><p>In this tutorial, I will demonstrate how to set up firebase for creating &amp; reading database and adding authentitation.</p><h2 id="Read-from-a-database"><a href="#Read-from-a-database" class="headerlink" title="Read from a database"></a>Read from a database</h2><p>In this step, we add a backend cloud database to our app. Cloud databases make sense, especially when prototyping, because they are easy to use and free for modest amounts of data and network traffic.</p><h3 id="Add-a-database-to-your-backend-Firebase-project"><a href="#Add-a-database-to-your-backend-Firebase-project" class="headerlink" title="Add a database to your backend Firebase project"></a>Add a database to your backend Firebase project</h3><p>Go to <a href="https://console.firebase.google.com/">the Firebase web console</a>. Click on the card for your project. On the left side, click on <strong>Database</strong>. On the right side, where it offers several options, scroll until you see <strong>Realtime Database</strong>. Select that.</p><p>When Firebase asks about security, put the database in <strong>Test Mode</strong>. This lets anyone read <em>and write</em> to your data. Firebase only allows this mode for a relatively short period of time. To see your security rules, click on the <strong>Rules</strong> tab. You should see this.</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;.read&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;.write&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>You will change these rules later in <a href="https://courses.cs.northwestern.edu/394/guides/intro-react.php#add-authentication">the authentication task</a>.</p><p>The Realtime Database is simple – the database is just one big JSON object – and supports real-time notifications of changes to the data. Initially it is empty. You can use the console to import a file with some initial JSON data.</p><p>On the Firebase web console. click on <strong>Realtime Database</strong> on the left. Click on the <strong>Data</strong> tab. Click on the vertical three-dot menu and select <strong>Import JSON</strong>. Follow the instructions.</p><p>Verify that the data successfully imported and you can browse it on the web console.</p><h3 id="Add-the-Firebase-package"><a href="#Add-the-Firebase-package" class="headerlink" title="Add the Firebase package"></a>Add the Firebase package</h3><p>You have already installed the Firebase CLI, i.e., <strong>firebase-tools</strong>. To use the database functions in your code, you need to install the Firebase library. To make using Firebase easier in React, also install <strong>react-firebase-hooks</strong>.</p><div class="code-wrapper"><pre><code class="hljs shell">npm install firebase react-firebase-hooks</code></pre></div><blockquote><p>The API for Firebase version 9 is quite different than Firebase version 8. The same concepts and code are there, but the way you call the code is different. The reasons and differences ar summarized <a href="https://firebase.google.com/docs/web/learn-more#modular-version">here</a>. Until version 9 is in commonly use, we show code for both versions below.</p></blockquote><h3 id="Add-code-to-initialize-Firebase"><a href="#Add-code-to-initialize-Firebase" class="headerlink" title="Add code to initialize Firebase"></a>Add code to initialize Firebase</h3><p>To keep the code modular, Firebase initialization should go into a separate file, like <strong>src&#x2F;utilities&#x2F;firebase.js</strong>. The boilerplate for importing Firebase, including the database library, looks like this:</p><p><strong>firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> firebase <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/app&#x27;</span>;<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;firebase/database&#x27;</span>;<span class="hljs-keyword">const</span> firebaseConfig = &#123;  <span class="hljs-attr">apiKey</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">authDomain</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">databaseURL</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">projectId</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">storageBucket</span>: <span class="hljs-string">&quot;....&quot;</span>,  <span class="hljs-attr">messagingSenderId</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">appId</span>: <span class="hljs-string">&quot;...&quot;</span>&#125;;firebase.<span class="hljs-title function_">initializeApp</span>(firebaseConfig);<span class="hljs-keyword">const</span> database = firebase.<span class="hljs-title function_">database</span>();</code></pre></div><p><strong>firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; initializeApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/app&#x27;</span>;<span class="hljs-keyword">import</span> &#123; getDatabase, onValue, ref, set &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/database&#x27;</span>;<span class="hljs-keyword">const</span> firebaseConfig = &#123;  <span class="hljs-attr">apiKey</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">authDomain</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">databaseURL</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">projectId</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">storageBucket</span>: <span class="hljs-string">&quot;....&quot;</span>,  <span class="hljs-attr">messagingSenderId</span>: <span class="hljs-string">&quot;...&quot;</span>,  <span class="hljs-attr">appId</span>: <span class="hljs-string">&quot;...&quot;</span>&#125;;<span class="hljs-keyword">const</span> firebase = <span class="hljs-title function_">initializeApp</span>(firebaseConfig);<span class="hljs-keyword">const</span> database = <span class="hljs-title function_">getDatabase</span>(firebase);</code></pre></div><p>You have to get <strong>firebaseConfig</strong> from <a href="https://console.firebase.google.com/">the Firebase web console</a>.</p><ul><li><p>Click on your project.</p></li><li><p>Click on the “gear” icon in the upper left and select <strong>Project settings</strong>.</p></li><li><p>Click on the <strong>General</strong> tab.</p></li><li><p>Scroll down to the <strong>Your apps</strong> section, and click on the web app you registered for this project.</p><blockquote><p>If you haven’t registered a web app, do so now by clicking <strong>Add app</strong>.</p></blockquote></li><li><p>On the right, click the <strong>config</strong> radio button under <strong>SDK setup and configuration</strong>.</p></li><li><p>Copy the JavaScript code you see there into <strong>firebase.js</strong> as shown above.</p></li></ul><h3 id="Fetching-data-from-Firebase"><a href="#Fetching-data-from-Firebase" class="headerlink" title="Fetching data from Firebase"></a>Fetching data from Firebase</h3><p>Fetching data from Firebase can be done similarly to how <a href="https://courses.cs.northwestern.edu/394/guides/intro-react.php#use-effect-fetch">data was fetched using <strong>fetch</strong></a>, using <strong>useState</strong> and <strong>useEffect</strong>. There are several important differences.</p><ul><li>You access the data with a <em>database reference</em> not a URL.</li><li>You don’t get data directly. Instead, you <em>subscribe</em> to the database, by giving Firebase a function to call when the data changes. That function normally will update a state variable.</li></ul><p>A database reference is like a URL, but refers to some part of the JSON data stored in your realtime database. A reference (but no actual data) is created with</p><p><strong>firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js">database.<span class="hljs-title function_">ref</span>(path)</code></pre></div><p><strong>firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">ref</span>(database, path)</code></pre></div><p>where <strong>firebase</strong> is the variable holding your Firebase object, and <em>path</em> refers to some part of your JSON object. For example, in the following references</p><p><strong>firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js">database.<span class="hljs-title function_">ref</span>()database.<span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;/&#x27;</span>)database.<span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;/courses&#x27;</span>)</code></pre></div><p><strong>firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-title function_">ref</span>(database)<span class="hljs-title function_">ref</span>(database, <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-title function_">ref</span>(database, <span class="hljs-string">&#x27;/courses&#x27;</span>)</code></pre></div><p>the first two refer to the entire JSON, and the last refers to the data stored under the key <strong>courses</strong>.</p><p><a href="https://firebase.google.com/docs/reference/node/firebase.database.Reference">More about Firebase database references.</a></p><p>In Firebase, you normally <em>subscribe</em> to a database. That means you pass Firebase a function to be called every time the data at the end of some path changes. The function will be sent a <em>snapshot</em> object. The <strong>val()</strong> method of this object will contain the new data.</p><p>In React, the appropriate thing to do when Firebase sends new data is to store it in a React state variable. Then normal React processing will be triggered to update your page appropriately.</p><p>Getting data usually involves three state variables: <strong>data</strong>, <strong>loading</strong>, and <strong>error</strong>. (You can call them anything you want.) Your app code should be written to handle the following cases:</p><ul><li><strong>error</strong> is defined: Something went wrong and your app should signal a problem. Initially <strong>error</strong> is undefined.</li><li><strong>loading</strong> is true: No data is available yet. Your app should indicate that data is being loaded. Initially <strong>loading</strong> is true.</li><li>Neither of the above is true. Your app should display what’s in <strong>data</strong>.</li></ul><p>There’s a bit of boilerplate needed to get data and manage these failures. It makes sense to create a <a href="https://reactjs.org/docs/hooks-custom.html">a custom hook</a>. The version here is a more basic version of the <strong>useObjectVal</strong> hook defined in <a href="https://github.com/CSFrequency/react-firebase-hooks/tree/master/database#useobjectval">react-firebase-hooks</a>. It takes a function as an optional second parameter. If given, the function will be applied to the JSON fetched from Firebase. Whatever <em>function</em> returns will be returned in <strong>data</strong>. This is handy for calling <strong>addScheduleTimes</strong>.</p><h2 id="Add-authentitation"><a href="#Add-authentitation" class="headerlink" title="Add authentitation"></a>Add authentitation</h2><p>Authentication has been held off until now. It is a common mistake when developing a new app is to start with sign up or log in. That’s misplaced effort. Signing up is not an interesting thing to user test. Start with the part of your app that is new and different.</p><p>But now that user can change the course schedule, it makes sense to only let logged in users make changes. This is called <em>authentication</em>. After authentication comes <em>authorization</em> – can this user do this action – but we’ll only do authentication here. With hooks, Firebase, and a helper UI library, it is not too much code.</p><h3 id="Require-authentication-to-change-data"><a href="#Require-authentication-to-change-data" class="headerlink" title="Require authentication to change data"></a>Require authentication to change data</h3><p>A series of small steps is needed to require authentication for writing to the database.</p><ul><li>Go to <a href="https://console.firebase.google.com/project/">the Firebase console</a>.</li><li>Click on your project.</li><li>Click the <strong>Rules</strong> tab.</li><li>Click the button <strong>Edit rules</strong>.</li></ul><p>Your rules should currently look like this:</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;.read&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;.write&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>Select the <strong>true</strong> value to the right of <strong>“.write”</strong>. Replace it with the string <code>&quot;auth.uid != null&quot;</code>, so that your rules now look like this:</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;.read&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;.write&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auth.uid != null&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>Click <strong>Publish</strong> to save the rules.</p><p>The new rule is a JavaScript string that Firebase will evaluate when an attempt is made to write data to any part of the database. The variable <strong>auth</strong> will be set to a user object, and <strong>auth.uid</strong> will only have a value if the user has logged in.</p><p>Test! Reload your web app page. You should still see the courses. Now try to change a course’s meeting time. You should get a permission denied error. If so, you have now protected your database from guest users.</p><h3 id="Enable-authentication-support-on-Firebase"><a href="#Enable-authentication-support-on-Firebase" class="headerlink" title="Enable authentication support on Firebase"></a>Enable authentication support on Firebase</h3><p>Authentication means asking a user to identify themselves, usually with a name or email address and a password. Developers used to write code to do this for every app, but a popular alternative now is to let a third-party service, like Google or Facebook, do the work. Those services manage the database of user information, check passwords, provide “forgot password” emails, and so on. Developers like doing less work. Users like having one less password to remember.</p><p>Here’s how to enable authentication with Google, i.e., that users can click on a button and sign in with Google.</p><ul><li>Go to Firebase console.</li><li>Go to your project page.</li><li>Click <strong>Authentication</strong> on the left.</li><li>Click the <strong>Sign-in method</strong> tab along the top.</li><li>Click the <strong>Google</strong> line.</li><li>In the panel that opens up, click <strong>Enable</strong> and enter any required information.</li><li>Click <strong>Save</strong>.</li></ul><p>That last step is easy to miss on the Firebase web site!</p><p>There are many other options you can enable. Click on them to see what they do. To use a third-party like Facebook or Twitter, you will need to set up a developer account with that service and get an ID for your app.</p><h3 id="Add-authentication-code-to-the-app"><a href="#Add-authentication-code-to-the-app" class="headerlink" title="Add authentication code to the app"></a>Add authentication code to the app</h3><p>Now that Google authentication is enabled on the backend, we need to add code on the frontend to let users click a button and log in. The Firebase <strong>auth</strong> object provides a class <strong>GoogleAuthProvider</strong> to do this, as well as a <strong>signOut</strong> method to log out.</p><p>In <strong>src&#x2F;utilities&#x2F;firebase.js</strong> add this import</p><p><strong>Firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;firebase/auth&#x27;</span>;</code></pre></div><p><strong>Firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; getAuth, <span class="hljs-title class_">GoogleAuthProvider</span>, onIdTokenChanged, signInWithPopup, signOut &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;firebase/auth&#x27;</span>;</code></pre></div><p>Define and export this function:</p><p><strong>Firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signInWithGoogle</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">const</span> provider = <span class="hljs-keyword">new</span> firebase.<span class="hljs-property">auth</span>.<span class="hljs-title class_">GoogleAuthProvider</span>();  firebase.<span class="hljs-title function_">auth</span>().<span class="hljs-title function_">signInWithPopup</span>(provider);&#125;</code></pre></div><p><strong>Firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signInWithGoogle</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-title function_">signInWithPopup</span>(<span class="hljs-title function_">getAuth</span>(firebase), <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoogleAuthProvider</span>());&#125;;</code></pre></div><p>Calling <strong>signInWithGoogle</strong> pops up a dialog box to let the user sign in with Google.</p><p>Where should we put the buttons to call these functions? Users will look for this at the top. The term selector seems like a good place. The new button should go to the right, to avoid being accidentally clicked when changing terms.</p><p>Bootstrap has many options for laying out a row of buttons. It’s alway best to explore the examples in the documentation and adapt one that looks like what you want. The code below adapts an example from the section on <a href="https://getbootstrap.com/docs/5.0/components/button-group/#button-toolbar">button toolbars</a>, using a temporary dummy “sign in” button.</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">SignInButton</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">return</span> (    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn-toolbar justify-content-between&quot;</span>&gt;</span></span><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-secondary btn-sm&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> signInWithGoogle()&#125;&gt;</span><span class="language-xml">        Sign In</span><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  )&#125;</code></pre></div><p>Test! Believe it or not, you should now have working authentication. Try changing a course meeting time without signing in. Verify that you get the permission denied error. Now click <strong>Sign In</strong>. A dialog box should appear instructing you to sign in with Google. After signing in, trying change a course time again. Now it should work!</p><h3 id="Add-signing-out"><a href="#Add-signing-out" class="headerlink" title="Add signing out"></a>Add signing out</h3><p>It’s always good to include a sign out option, so that if someone is using your web app on a public terminal, they can log out.</p><p><strong>firebase.auth</strong> provides a simple function for signing out. Define and export this function in <strong>src&#x2F;utilities&#x2F;firebase.js</strong></p><p><strong>Firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signOut</span> = (<span class="hljs-params"></span>) =&gt; firebase.<span class="hljs-title function_">auth</span>().<span class="hljs-title function_">signOut</span>();</code></pre></div><p><strong>Firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">firebaseSignOut</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">signOut</span>(<span class="hljs-title function_">getAuth</span>(firebase));<span class="hljs-keyword">export</span> &#123; firebaseSignOut <span class="hljs-keyword">as</span> signOut &#125;;</code></pre></div><p>Calling <strong>signOut</strong> just logs the user out of Google. No dialog box appears.</p><p>Import <strong>signOut</strong> and define a <strong>SignOutButton</strong> to go with your <strong>SignInButton</strong>.</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">SignOuButton</span> = (<span class="hljs-params"></span>) =&gt; (  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-secondary btn-sm&quot;</span></span></span><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> signOut()&#125;&gt;</span><span class="language-xml">    Sign Out</span><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>);</code></pre></div><p>Signing out is something that can only happen after you have signed in. So it makes sense to show a sign in button only when there is no user signed in, and a sign out button only when there is a user signed in.</p><p>Authentication changes are asynchronous, like database changes. You have to listen for a change in user status. In <strong>src&#x2F;utilities&#x2F;firebase.js</strong> define and export a very simple hook to list for changes in user state.</p><p><strong>Firebase v8:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useUserState</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">const</span> [user, setUser] = <span class="hljs-title function_">useState</span>();  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;    firebase.<span class="hljs-property">auth</span>.<span class="hljs-title function_">onAuthStateChanged</span>(setUser);  &#125;, []);  <span class="hljs-keyword">return</span> [user];&#125;;</code></pre></div><p><strong>Firebase v9:</strong></p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useUserState</span> = (<span class="hljs-params"></span>) =&gt; &#123;  <span class="hljs-keyword">const</span> [user, setUser] = <span class="hljs-title function_">useState</span>();  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-title function_">onIdTokenChanged</span>(<span class="hljs-title function_">getAuth</span>(firebase), setUser);  &#125;, []);  <span class="hljs-keyword">return</span> [user];&#125;;</code></pre></div><p>Now we can show different depends on the user state:</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Display</span> = (<span class="hljs-params"></span>) =&gt; &#123;<span class="hljs-keyword">const</span> [user] = <span class="hljs-title function_">useUserState</span>();<span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;ButtonOnState&quot;</span>&gt;</span></span><span class="language-xml">&#123; user ? <span class="hljs-tag">&lt;<span class="hljs-name">SignOutButton</span> /&gt;</span> : <span class="hljs-tag">&lt;<span class="hljs-name">SignInButton</span> /&gt;</span> &#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firebase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (II) - React &amp; Firebase start code</title>
    <link href="/2021/11/01/Software%20Prototyping%20(II)%20-%20React%20&amp;%20Firebase%20start%20code/"/>
    <url>/2021/11/01/Software%20Prototyping%20(II)%20-%20React%20&amp;%20Firebase%20start%20code/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-II-React-amp-Firebase-start-code"><a href="#Software-Prototyping-II-React-amp-Firebase-start-code" class="headerlink" title="Software Prototyping (II) - React &amp; Firebase start code"></a>Software Prototyping (II) - React &amp; Firebase start code</h1><p>This article shows how to create an application using React, and make it public using Firebase.</p><blockquote><p>The following articles of Software Prototyping will be written in Eng.</p></blockquote><h2 id="Start-a-React-app-project"><a href="#Start-a-React-app-project" class="headerlink" title="Start a React app project"></a>Start a React app project</h2><p>To create the initial directory for your application, do the following terminal command in a directory you use for coding projects.</p><div class="code-wrapper"><pre><code class="hljs shell">npx create-react-app [your app name] --use-npm</code></pre></div><p>This command creates a new directory with the given app name. In that directory it puts an initial set of React files and scripts, and a <strong>.gitignore</strong> file that will keep <strong>git</strong> from storing literally thousands of Node libraries on github.</p><p>Then to make sure everything installed correctly, run:</p><div class="code-wrapper"><pre><code class="hljs shell">cd schedulernpm start</code></pre></div><p>This starts a local web server and launches your browser on an <strong>index.html</strong> page that <strong>create-react-app</strong> created. After 10 to 20 seconds, a web page should appear with the animated React logo. This verifies that your React installation is working. If everything work correctly, you will see a page in <strong><a href="http://localhost:3000/">http://localhost:3000/</a></strong> like:</p><p><img src="https://i.loli.net/2021/11/17/yhKdUW5znX8jRlI.png" alt="image-20211116130532636"></p><h2 id="Create-a-Github-repo"><a href="#Create-a-Github-repo" class="headerlink" title="Create a Github repo"></a>Create a Github repo</h2><p>Stop your app in the command shell with control-C.</p><p>Go to Github and create a repository for your app. Follow <a href="https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github/adding-an-existing-project-to-github-using-the-command-line#adding-a-project-to-github-without-github-cli">these instructions</a> for creating a remote repository <em>for existing code</em>. Do NOT create the default <strong>README</strong> or <strong>.gitignore</strong> files. They will be wrong. <strong>create-react-app</strong> has already created the correct files.</p><h2 id="Go-public"><a href="#Go-public" class="headerlink" title="Go public"></a>Go public</h2><p>You need to host your web page on a server for testing, showing to users, etc. It’s good to do this as early as possible. You don’t want to spend hours or days building something only to discover it doesn’t work when deployed.</p><p>Firebase is used for hosting this tutoria. It’s free, simple, and you’ll need Firebase for other services later. Other options include Github Pages, AWS, and Heroku.</p><p>Follow <a href="https://medium.com/swlh/how-to-deploy-a-react-app-with-firebase-hosting-98063c5bf425">these instructions</a> to create a project on Firebase to host your React web app. Some points to pay attention to:</p><ul><li>Use the global <strong>-g</strong> option to install <strong>firebase-tools</strong>.</li><li>Specify <strong>build</strong> when <strong>firebase init</strong> asks what the public directory is.</li><li>Say no when Firebase asks about adding Github Actions.</li><li>Don’t forget to do <code>npm run build</code> before deploying.</li></ul><p>Verify that you see your React app running at the URL that Firebase gives you.</p><p>After completing these settings, deploy your app using:</p><div class="code-wrapper"><pre><code class="hljs shell">firebase deploy</code></pre></div><p>Then you can see you application on the given link provided by firebase.</p>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firebase</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (I) - npm &amp; firebase</title>
    <link href="/2021/10/01/Software%20Prototyping%20(I)%20-%20npm%20&amp;%20firebase/"/>
    <url>/2021/10/01/Software%20Prototyping%20(I)%20-%20npm%20&amp;%20firebase/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-I-npm-amp-firebase"><a href="#Software-Prototyping-I-npm-amp-firebase" class="headerlink" title="Software Prototyping (I) - npm &amp; firebase"></a>Software Prototyping (I) - npm &amp; firebase</h1><p><strong>Introduction：</strong> 本系列博客写作灵感来源于 <code>Northwestern Universally ：COMP_SCI 397/497 Rapid Software Protyping</code> 这门课，也就是博主现在在上的课程。任课老师是<a href="https://users.cs.northwestern.edu/~riesbeck/">Chris Riesbeck</a>，教授在耶鲁做了15年研究过来的，人很好上课非常有趣而且收获很大，在这里先感谢 Chris Riesbeck！另外教授上的 <code>CS 394 Agile Software Development</code> 也是一个系列的课程，推荐校友可以选他的课，workload会比其他课大但真的收获很多！</p><hr><p>本博客主要记录利用React以及firebase快速上手Web&#x2F;Android App开发的过程，主要对学习的东西做一个总结方便日后回顾。</p><p>这里放一个第一周上课后做出的简单CS Class Scheduler选课APP链接：<a href="https://zachary-cs-scheduler.web.app/">CS Class Scheduler</a></p><p>github仓库链接：<a href="https://github.com/zacdeng/cs497-scheduler">cs497-scheduler</a></p><h2 id="npm简单介绍"><a href="#npm简单介绍" class="headerlink" title="npm简单介绍"></a>npm简单介绍</h2><p>在正式学习 React 技术栈之前，我们先来介绍一下之后经常要使用到的 <code>npm</code></p><p><code>npm</code> 最初它只是被称为 Node Package Manager，用来作为 Node.js 的包管理器。但是随着其它构建工具(webpack、browserify)的发展，npm已经变成了 “the package manager for JavaScript”，它用来安装、管理和分享JavaScript包，同时会自动处理多个包之间的依赖</p><p>现在的 <code>Node.js</code> 在安装的时候集成了 <code>npm</code> ，<code>npm</code> 的安装非常简单，不管你是用的是什么操作系统，我们只需要打开 Nodejs 官网，网站会自动匹配你的系统显示相应的安装包，点击最新版本的下载按钮，等待安装包下载完成。需要注意的是在安装内容当中，必须确保配置环境变量的选项是被勾选中的再进行下一步操作</p><p>我们可以打开控制台，输入 <code>npm</code> 或 <code>node</code> 检验是否安装成功。附加 version 参数可以查看我们安装的 <code>npm</code> 及 <code>node</code> 的版本</p><div class="code-wrapper"><pre><code class="hljs shell">node -vnpm -v</code></pre></div><h3 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h3><ul><li><strong>查看命令帮助</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm help &lt;某命令&gt;</code></pre></div><ul><li>列出各命令</li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm -l</code></pre></div><ul><li><strong>查看安装信息</strong></li></ul><p>安装信息和它们的依赖</p><div class="code-wrapper"><pre><code class="hljs shell">//全局安装信息npm ls -g//列出当前项目中的包npm ls</code></pre></div><ul><li><strong>卸载包</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm uninstall &lt;包名&gt;</code></pre></div><ul><li><strong>更新包</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">//更新当前项目中安装的某个包npm update &lt;包名&gt;//更新当前项目中安装的所有包npm update//更新全局安装的包npm update &lt;包名&gt; -g</code></pre></div><ul><li><strong>搜索包</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm search &lt;关键字&gt;</code></pre></div><ul><li><strong>列出npm的配置</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm config list -l</code></pre></div><ul><li><strong>列出bin目录</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">npm bin</code></pre></div><h3 id="使用-package-json"><a href="#使用-package-json" class="headerlink" title="使用 package.json"></a>使用 package.json</h3><p>当你的项目需要依赖多个包时，推荐使用 package.json。其优点为：</p><ul><li>它以文档的形式规定了项目所依赖的包</li><li>可以确定每个包所使用的版本</li><li>项目的构建可以重复，在多人协作时更加方便</li></ul><h3 id="创建package-json文件"><a href="#创建package-json文件" class="headerlink" title="创建package.json文件"></a>创建package.json文件</h3><ul><li>手动创建</li><li>或者 通过 <code>npm init</code> 命令生成遵守规范的 package.json文件</li></ul><p>文件中必须包含两个键值对： <code>name</code>  和 <code>version</code></p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scheduler&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><h3 id="npm脚本"><a href="#npm脚本" class="headerlink" title="npm脚本"></a>npm脚本</h3><p>简单来说 npm 脚本就是指 npm 允许在<code>package.json</code>文件里面，使用<code>scripts</code>字段定义脚本命令。例如：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// ...</span>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node build.js&quot;</span>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>上面代码是<code>package.json</code>文件的一个片段，里面的<code>scripts</code>字段是一个对象。它的每一个属性，对应一段脚本。比如，<code>build</code>命令对应的脚本是<code>node build.js</code>。</p><p>命令行下使用<code>npm run</code>命令，就可以执行这段脚本。</p><div class="code-wrapper"><pre><code class="hljs shell">npm run build<span class="hljs-meta prompt_"># </span><span class="language-bash">等同于执行下面内容</span>node build.js</code></pre></div><p><code>npm run lint</code>可以运行脚本中的 lint 命令。<code>npm run test</code>可以运行脚本中的 test 命令。</p><p><code>npm run</code>命令会自动在环境变量<code>$PATH</code>添加<code>node_modules/.bin</code>目录，所以<code>scripts</code>字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。</p><p><code>start</code>和<code>test</code>属于特殊命令，可以省略<code>run</code>：</p><div class="code-wrapper"><pre><code class="hljs shell">npm start npm test</code></pre></div><p>如果仅仅使用<code>npm run</code>会列出scripts属性下所有的命令：</p><div class="code-wrapper"><pre><code class="hljs shell">npm run</code></pre></div><p>具体内容可以参考大佬的帖子，总结的很详细：<a href="https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html">npm脚本使用指南</a></p><h2 id="Firebase简单介绍"><a href="#Firebase简单介绍" class="headerlink" title="Firebase简单介绍"></a>Firebase简单介绍</h2><p>简单来说，Firebase是构建Web，Android和IOS应用程序的后端平台。 它提供了实时数据库，不同的API，多种认证类型和托管平台。这个系列博客的web application就是通过firebase部署，这里对firebase这个平台做一个简单的介绍，具体操作和使用将在接下来详细介绍</p><p>根据官方Firebase文档 -</p><blockquote><p>Firebase可以为应用程序的后台提供支持，包括数据存储，用户身份验证，静态托管等。专注于创造非凡的用户体验。我们会照顾其余的。使用我们的Android，iOS和JavaScript SDK创建跨平台的原生手机和网络应用程序。您也可以使用我们的服务器端库或REST API将Firebase连接到现有的后端。</p></blockquote><h3 id="Firebase功能"><a href="#Firebase功能" class="headerlink" title="Firebase功能"></a>Firebase功能</h3><ul><li><strong>实时数据库</strong> - Firebase支持JSON数据，所有连接的用户在每次更改后都会收到实时更新。</li><li><strong>身份验证</strong> - 您可以使用匿名，密码或不同的社交认证。</li><li><strong>托管</strong> - 可以通过与Firebase服务器的安全连接部署应用程序。</li></ul><h3 id="Firebase的优点"><a href="#Firebase的优点" class="headerlink" title="Firebase的优点"></a>Firebase的优点</h3><ul><li>它是简单和用户友好。不需要复杂的配置。</li><li>数据是实时的，这意味着每次更改都会自动更新连接的客户端。</li><li>Firebase提供简单的控制仪表板。</li><li>有很多有用的服务可供选择。</li></ul><h3 id="Firebase限制"><a href="#Firebase限制" class="headerlink" title="Firebase限制"></a>Firebase限制</h3><ul><li>Firebase免费计划限于50个连接和100mb的存储。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>firebase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Software Prototyping (Ⅲ) - Get to know React</title>
    <link href="/2021/10/01/Software%20Prototyping%20(%E2%85%A2)%20-%20Get%20to%20know%20React/"/>
    <url>/2021/10/01/Software%20Prototyping%20(%E2%85%A2)%20-%20Get%20to%20know%20React/</url>
    
    <content type="html"><![CDATA[<h1 id="Software-Prototyping-Ⅲ-Get-to-know-React"><a href="#Software-Prototyping-Ⅲ-Get-to-know-React" class="headerlink" title="Software Prototyping (Ⅲ) - Get to know React"></a>Software Prototyping (Ⅲ) - Get to know React</h1>]]></content>
    
    
    <categories>
      
      <category>Software Prototyping</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github配置SSH免密登录</title>
    <link href="/2021/09/28/github%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/2021/09/28/github%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="github配置SSH免密登录"><a href="#github配置SSH免密登录" class="headerlink" title="github配置SSH免密登录"></a>github配置SSH免密登录</h1><p>github官方在2021年8月14日这一天，把终端push时的身份认证从password换成了token，就会遇到这个问题：<code>remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</code></p><p>为了之后方便操作，直接配置了SSH免密登录，这里整理一下具体的步骤，很简单：</p><ol><li>进入当前用户的home目录：</li></ol><div class="code-wrapper"><pre><code class="hljs shell">cd ~</code></pre></div><ol start="2"><li>删除已经存在的.ssh目录：</li></ol><div class="code-wrapper"><pre><code class="hljs shell">rm -r .ssh/</code></pre></div><ol start="3"><li>运行命令生成.ssh 密钥目录:</li></ol><div class="code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C xxxx@gmail.com  # your github email address</code></pre></div><p>一直enter确认就好了，完成后在ssh文件夹会生成一个公钥 <code>id_rsa.pub</code> 和一个私钥 <code>id_rsa</code>，我们只用公钥里的内容就行</p><ol start="4"><li>查看公钥文件内容并复制所有内容</li></ol><div class="code-wrapper"><pre><code class="hljs shell">cat id_rsa.pub</code></pre></div><ol start="5"><li>登录 GitHub，点击用户头像 -&gt;Settings -&gt; SSHandGPG keys</li></ol><p><img src="https://i.loli.net/2021/09/28/Mv9NJi1qHRFUswk.png" alt="image-20210928002852085"></p><p>点击 <code>New SSH key</code> 创建新的 Secure Shell Key：</p><p><img src="https://i.loli.net/2021/09/28/gqAFvUGRPsKoHcp.png" alt="image-20210928003052255"></p><ol start="6"><li>复制之前公钥里的所有内容到 <code>key</code> 里：</li></ol><p><img src="https://i.loli.net/2021/09/28/ZhO15BMTYds8vKN.png" alt="image-20210928003159832"></p><p><code>Title</code> 没要求的话随便起就行，最好是备注一下哪个设备设置了SSH key，之后 <code>Add SSH key</code> 输入密码确认即可</p><p>完成上述操作后，在终端再次进行push等操作时github会直接跳过登录身份验证，直接连接到github服务器进行操作</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 快捷键整理</title>
    <link href="/2021/07/14/IDEA%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/"/>
    <url>/2021/07/14/IDEA%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA-快捷键整理"><a href="#IDEA-快捷键整理" class="headerlink" title="IDEA 快捷键整理"></a>IDEA 快捷键整理</h1><h3 id="常用快捷键总结"><a href="#常用快捷键总结" class="headerlink" title="常用快捷键总结"></a>常用快捷键总结</h3><table><thead><tr><th align="center">快捷键</th><th align="center">功能介绍</th></tr></thead><tbody><tr><td align="center">Alt + Insert</td><td align="center">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等 （必备）</td></tr><tr><td align="center">Alt + Enter</td><td align="center">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td></tr><tr><td align="center">Alt + ←&#x2F;→</td><td align="center">按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 （必备）</td></tr><tr><td align="center">Alt + ↑&#x2F;↓</td><td align="center">当前光标跳转到当前文件的前&#x2F;后一个方法名位置 （必备）</td></tr><tr><td align="center">Ctrl + ←</td><td align="center">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置 （必备）</td></tr><tr><td align="center">Ctrl + →</td><td align="center">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置 （必备）</td></tr><tr><td align="center">Ctrl + ↑</td><td align="center">等效于鼠标滚轮向前效果 （必备）</td></tr><tr><td align="center">Ctrl + ↓</td><td align="center">等效于鼠标滚轮向后效果 （必备）</td></tr><tr><td align="center">Ctrl + F1</td><td align="center">在光标所在的错误代码处显示错误信息 （必备）</td></tr><tr><td align="center">Ctrl + &#x2F;</td><td align="center">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td></tr><tr><td align="center">Ctrl + B</td><td align="center">跳转至函数方法的申明（必备）</td></tr><tr><td align="center">Shift + Tab</td><td align="center">取消缩进 （必备）</td></tr><tr><td align="center">Shift + Enter</td><td align="center">开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）</td></tr><tr><td align="center">Shift + 滚轮前后滚动</td><td align="center">当前文件的横向滚动轴滚动 （必备）</td></tr><tr><td align="center">Ctrl + Alt + S</td><td align="center">打开 IntelliJ IDEA 系统设置 （必备）</td></tr><tr><td align="center">Ctrl + Shift + J</td><td align="center">自动将下一行合并到当前行末尾 （必备）</td></tr><tr><td align="center">Ctrl + Shift + &#x2F;</td><td align="center">代码块注释 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Enter</td><td align="center">自动结束代码，行末自动添加分号 （必备）</td></tr><tr><td align="center">Ctrl + Shift + F10</td><td align="center">对当前代码执行Run操作</td></tr><tr><td align="center">Alt + Shift + F10</td><td align="center">弹出 Run 的可选择菜单</td></tr><tr><td align="center">Alt + Shift + F9</td><td align="center">弹出 Debug 的可选择菜单</td></tr><tr><td align="center">F7</td><td align="center">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="center">F8</td><td align="center">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="center">F9</td><td align="center">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr></tbody></table><h3 id="所有快捷键总结"><a href="#所有快捷键总结" class="headerlink" title="所有快捷键总结"></a>所有快捷键总结</h3><h3 id="1-Ctrl"><a href="#1-Ctrl" class="headerlink" title="1.Ctrl"></a>1.Ctrl</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Ctrl + F</td><td>在当前文件进行文本查找 （必备）</td></tr><tr><td align="center">Ctrl + R</td><td>在当前文件进行文本替换 （必备）</td></tr><tr><td align="center">Ctrl + Z</td><td>撤销 （必备）</td></tr><tr><td align="center">Ctrl + Y</td><td>删除光标所在行 或 删除选中的行 （必备）</td></tr><tr><td align="center">Ctrl + X</td><td>剪切光标所在行 或 剪切选择内容</td></tr><tr><td align="center">Ctrl + C</td><td>复制光标所在行 或 复制选择内容</td></tr><tr><td align="center">Ctrl + D</td><td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</td></tr><tr><td align="center">Ctrl + W</td><td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）</td></tr><tr><td align="center">Ctrl + E</td><td>显示最近打开的文件记录列表 （必备）</td></tr><tr><td align="center">Ctrl + N</td><td>根据输入的 <strong>类名</strong> 查找类文件 （必备）</td></tr><tr><td align="center">Ctrl + G</td><td>在当前文件跳转到指定行处</td></tr><tr><td align="center">Ctrl + J</td><td>插入自定义动态代码模板 （必备）</td></tr><tr><td align="center">Ctrl + P</td><td>方法参数提示显示 （必备）</td></tr><tr><td align="center">Ctrl + Q</td><td>光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td align="center">Ctrl + U</td><td>前往当前光标所在的方法的父类的方法 &#x2F; 接口定义 （必备）</td></tr><tr><td align="center">Ctrl + B</td><td>进入光标所在的方法&#x2F;变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</td></tr><tr><td align="center">Ctrl + K</td><td>版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="center">Ctrl + T</td><td>版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td align="center">Ctrl + H</td><td>显示当前类的层次结构</td></tr><tr><td align="center">Ctrl + O</td><td>选择可重写的方法</td></tr><tr><td align="center">Ctrl + I</td><td>选择可继承的方法</td></tr><tr><td align="center">Ctrl + +</td><td>展开代码</td></tr><tr><td align="center">Ctrl + -</td><td>折叠代码</td></tr><tr><td align="center">Ctrl + &#x2F;</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</td></tr><tr><td align="center">Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td align="center">Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td align="center">Ctrl + F1</td><td>在光标所在的错误代码处显示错误信息 （必备）</td></tr><tr><td align="center">Ctrl + F3</td><td>调转到所选中的词的下一个引用位置 （必备）</td></tr><tr><td align="center">Ctrl + F4</td><td>关闭当前编辑文件</td></tr><tr><td align="center">Ctrl + F8</td><td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td align="center">Ctrl + F9</td><td>执行 Make Project 操作</td></tr><tr><td align="center">Ctrl + F11</td><td>选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签 （必备）</td></tr><tr><td align="center">Ctrl + F12</td><td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td align="center">Ctrl + Tab</td><td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td align="center">Ctrl + End</td><td>跳到文件尾</td></tr><tr><td align="center">Ctrl + Home</td><td>跳到文件头</td></tr><tr><td align="center">Ctrl + Space</td><td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 （必备）</td></tr><tr><td align="center">Ctrl + Delete</td><td>删除光标后面的单词或是中文句 （必备）</td></tr><tr><td align="center">Ctrl + BackSpace</td><td>删除光标前面的单词或是中文句 （必备）</td></tr><tr><td align="center">Ctrl + 1,2,3…9</td><td>定位到对应数值的书签位置 （必备）</td></tr><tr><td align="center">Ctrl + 左键单击</td><td>在打开的文件标题上，弹出该文件路径 （必备）</td></tr><tr><td align="center">Ctrl + 光标定位</td><td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td align="center">Ctrl + 左方向键</td><td>光标跳转到当前单词 &#x2F; 中文句的左侧开头位置 （必备）</td></tr><tr><td align="center">Ctrl + 右方向键</td><td>光标跳转到当前单词 &#x2F; 中文句的右侧开头位置 （必备）</td></tr><tr><td align="center">Ctrl + 前方向键</td><td>等效于鼠标滚轮向前效果 （必备）</td></tr><tr><td align="center">Ctrl + 后方向键</td><td>等效于鼠标滚轮向后效果 （必备）</td></tr></tbody></table><h3 id="2-Alt"><a href="#2-Alt" class="headerlink" title="2.Alt"></a>2.Alt</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Alt + &#96;|显示版本控制常用操作菜单弹出层 （必备）</td><td></td></tr><tr><td align="center">Alt + Q</td><td>弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td></tr><tr><td align="center">Alt + F1</td><td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）</td></tr><tr><td align="center">Alt + F2</td><td>对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td align="center">Alt + F3</td><td>选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td align="center">Alt + F7</td><td>查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td></tr><tr><td align="center">Alt + F8</td><td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td align="center">Alt + Home</td><td>定位 &#x2F; 显示到当前文件的 Navigation Bar</td></tr><tr><td align="center">Alt + Enter</td><td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</td></tr><tr><td align="center">Alt + Insert</td><td>代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等 （必备）</td></tr><tr><td align="center">Alt + 左方向键</td><td>切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 （必备）</td></tr><tr><td align="center">Alt + 右方向键</td><td>按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 （必备）</td></tr><tr><td align="center">Alt + 前方向键</td><td>当前光标跳转到当前文件的前一个方法名位置 （必备）</td></tr><tr><td align="center">Alt + 后方向键</td><td>当前光标跳转到当前文件的后一个方法名位置 （必备）</td></tr><tr><td align="center">Alt + 1,2,3…9</td><td>显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</td></tr></tbody></table><h3 id="3-Shift"><a href="#3-Shift" class="headerlink" title="3.Shift"></a>3.Shift</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Shift + F1</td><td>如果有外部文档可以连接外部文档</td></tr><tr><td align="center">Shift + F2</td><td>跳转到上一个高亮错误 或 警告位置</td></tr><tr><td align="center">Shift + F3</td><td>在查找模式下，查找匹配上一个</td></tr><tr><td align="center">Shift + F4</td><td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td align="center">Shift + F6</td><td>对文件 &#x2F; 文件夹 重命名</td></tr><tr><td align="center">Shift + F7</td><td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td align="center">Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td align="center">Shift + F9</td><td>等效于点击工具栏的 Debug 按钮</td></tr><tr><td align="center">Shift + F10</td><td>等效于点击工具栏的 Run 按钮</td></tr><tr><td align="center">Shift + F11</td><td>弹出书签显示层 （必备）</td></tr><tr><td align="center">Shift + Tab</td><td>取消缩进 （必备）</td></tr><tr><td align="center">Shift + ESC</td><td>隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td align="center">Shift + End</td><td>选中光标到当前行尾位置</td></tr><tr><td align="center">Shift + Home</td><td>选中光标到当前行头位置</td></tr><tr><td align="center">Shift + Enter</td><td>开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）</td></tr><tr><td align="center">Shift + 左键单击</td><td>在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）</td></tr><tr><td align="center">Shift + 滚轮前后滚动</td><td>当前文件的横向滚动轴滚动 （必备）</td></tr></tbody></table><h3 id="4-Ctrl-Alt"><a href="#4-Ctrl-Alt" class="headerlink" title="4.Ctrl + Alt"></a>4.Ctrl + Alt</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Ctrl + Alt + L</td><td>格式化代码，可以对当前文件和整个包目录使用 （必备）</td></tr><tr><td align="center">Ctrl + Alt + O</td><td>优化导入的类，可以对当前文件和整个包目录使用 （必备）</td></tr><tr><td align="center">Ctrl + Alt + I</td><td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td align="center">Ctrl + Alt + T</td><td>对选中的代码弹出环绕选项弹出层 （必备）</td></tr><tr><td align="center">Ctrl + Alt + J</td><td>弹出模板选择窗口，将选定的代码加入动态模板中</td></tr><tr><td align="center">Ctrl + Alt + H</td><td>调用层次</td></tr><tr><td align="center">Ctrl + Alt + B</td><td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td align="center">Ctrl + Alt + C</td><td>重构-快速提取常量</td></tr><tr><td align="center">Ctrl + Alt + F</td><td>重构-快速提取成员变量</td></tr><tr><td align="center">Ctrl + Alt + V</td><td>重构-快速提取变量</td></tr><tr><td align="center">Ctrl + Alt + Y</td><td>同步、刷新</td></tr><tr><td align="center">Ctrl + Alt + S</td><td>打开 IntelliJ IDEA 系统设置 （必备）</td></tr><tr><td align="center">Ctrl + Alt + F7</td><td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td align="center">Ctrl + Alt + F11</td><td>切换全屏模式</td></tr><tr><td align="center">Ctrl + Alt + Enter</td><td>光标所在行上空出一行，光标定位到新行 （必备）</td></tr><tr><td align="center">Ctrl + Alt + Home</td><td>弹出跟当前文件有关联的文件弹出层</td></tr><tr><td align="center">Ctrl + Alt + Space</td><td>类名自动完成</td></tr><tr><td align="center">Ctrl + Alt + 左方向键</td><td>退回到上一个操作的地方 （必备）</td></tr><tr><td align="center">Ctrl + Alt + 右方向键</td><td>前进到上一个操作的地方 （必备）</td></tr><tr><td align="center">Ctrl + Alt + 前方向键</td><td>在查找模式下，跳到上个查找的文件</td></tr><tr><td align="center">Ctrl + Alt + 后方向键</td><td>在查找模式下，跳到下个查找的文件</td></tr><tr><td align="center">Ctrl + Alt + 右括号（]）</td><td>在打开多个项目的情况下，切换下一个项目窗口</td></tr><tr><td align="center">Ctrl + Alt + 左括号（[）</td><td>在打开多个项目的情况下，切换上一个项目窗口</td></tr></tbody></table><h3 id="5-Ctrl-Shift"><a href="#5-Ctrl-Shift" class="headerlink" title="5.Ctrl + Shift"></a>5.Ctrl + Shift</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Ctrl + Shift + F</td><td>根据输入内容查找整个项目 或 指定目录内文件 （必备）</td></tr><tr><td align="center">Ctrl + Shift + R</td><td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</td></tr><tr><td align="center">Ctrl + Shift + J</td><td>自动将下一行合并到当前行末尾 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Z</td><td>取消撤销 （必备）</td></tr><tr><td align="center">Ctrl + Shift + W</td><td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</td></tr><tr><td align="center">Ctrl + Shift + N</td><td>通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</td></tr><tr><td align="center">Ctrl + Shift + U</td><td>对选中的代码进行大 &#x2F; 小写轮流转换 （必备）</td></tr><tr><td align="center">Ctrl + Shift + T</td><td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）</td></tr><tr><td align="center">Ctrl + Shift + C</td><td>复制当前文件磁盘路径到剪贴板 （必备）</td></tr><tr><td align="center">Ctrl + Shift + V</td><td>弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td align="center">Ctrl + Shift + E</td><td>显示最近修改的文件列表的弹出层</td></tr><tr><td align="center">Ctrl + Shift + H</td><td>显示方法层次结构</td></tr><tr><td align="center">Ctrl + Shift + B</td><td>跳转到类型声明处 （必备）</td></tr><tr><td align="center">Ctrl + Shift + I</td><td>快速查看光标所在的方法 或 类的定义</td></tr><tr><td align="center">Ctrl + Shift + A</td><td>查找动作 &#x2F; 设置</td></tr><tr><td align="center">Ctrl + Shift + &#x2F;</td><td>代码块注释 （必备）</td></tr><tr><td align="center">Ctrl + Shift + [</td><td>选中从光标所在位置到它的顶部中括号位置 （必备）</td></tr><tr><td align="center">Ctrl + Shift + ]</td><td>选中从光标所在位置到它的底部中括号位置 （必备）</td></tr><tr><td align="center">Ctrl + Shift + +</td><td>展开所有代码 （必备）</td></tr><tr><td align="center">Ctrl + Shift + -</td><td>折叠所有代码 （必备）</td></tr><tr><td align="center">Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按Esc高亮消失 （必备）</td></tr><tr><td align="center">Ctrl + Shift + F8</td><td>在 Debug 模式下，指定断点进入条件</td></tr><tr><td align="center">Ctrl + Shift + F9</td><td>编译选中的文件 &#x2F; 包 &#x2F; Module</td></tr><tr><td align="center">Ctrl + Shift + F12</td><td>编辑器最大化 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Space</td><td>智能代码提示</td></tr><tr><td align="center">Ctrl + Shift + Enter</td><td>自动结束代码，行末自动添加分号 （必备）</td></tr><tr><td align="center">Ctrl + Shift + Backspace</td><td>退回到上次修改的地方 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 1,2,3…9</td><td>快速添加指定数值的书签 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 左键单击</td><td>把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 左方向键</td><td>在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 右方向键</td><td>在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 前方向键</td><td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）</td></tr><tr><td align="center">Ctrl + Shift + 后方向键</td><td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</td></tr></tbody></table><h3 id="6-Alt-Shift"><a href="#6-Alt-Shift" class="headerlink" title="6.Alt + Shift"></a>6.Alt + Shift</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">Alt + Shift + N</td><td>选择 &#x2F; 添加 task （必备）</td></tr><tr><td align="center">Alt + Shift + F</td><td>显示添加到收藏夹弹出层 &#x2F; 添加到收藏夹</td></tr><tr><td align="center">Alt + Shift + C</td><td>查看最近操作项目的变化情况列表</td></tr><tr><td align="center">Alt + Shift + I</td><td>查看项目当前文件</td></tr><tr><td align="center">Alt + Shift + F7</td><td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td align="center">Alt + Shift + F9</td><td>弹出 Debug 的可选择菜单</td></tr><tr><td align="center">Alt + Shift + F10</td><td>弹出 Run 的可选择菜单</td></tr><tr><td align="center">Alt + Shift + 左键双击</td><td>选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句 （必备）</td></tr><tr><td align="center">Alt + Shift + 前方向键</td><td>移动光标所在行向上移动 （必备）</td></tr><tr><td align="center">Alt + Shift + 后方向键</td><td>移动光标所在行向下移动 （必备）</td></tr></tbody></table><h3 id="7-Ctrl-Shift-Alt"><a href="#7-Ctrl-Shift-Alt" class="headerlink" title="7.Ctrl + Shift + Alt"></a>7.Ctrl + Shift + Alt</h3><table><thead><tr><th><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>Ctrl + Shift + Alt + V</td><td>无格式黏贴 （必备）</td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>前往指定的变量 &#x2F; 方法</td></tr><tr><td>Ctrl + Shift + Alt + S</td><td>打开当前项目设置 （必备）</td></tr><tr><td>Ctrl + Shift + Alt + C</td><td>复制参考信息</td></tr></tbody></table><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h3><table><thead><tr><th align="center"><strong>快捷键</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td align="center">F2</td><td>跳转到下一个高亮错误 或 警告位置 （必备）</td></tr><tr><td align="center">F3</td><td>在查找模式下，定位到下一个匹配处</td></tr><tr><td align="center">F4</td><td>编辑源 （必备）</td></tr><tr><td align="center">F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="center">F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="center">F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td align="center">F11</td><td>添加书签 （必备）</td></tr><tr><td align="center">F12</td><td>回到前一个工具窗口 （必备）</td></tr><tr><td align="center">Tab</td><td>缩进 （必备）</td></tr><tr><td align="center">ESC</td><td>从工具窗口进入代码文件窗口 （必备）</td></tr><tr><td align="center">连按两次Shift</td><td>弹出 Search Everywhere 弹出层</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java, IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - 常用函数总结</title>
    <link href="/2021/07/11/MySQL%20-%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/11/MySQL%20-%20%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-常用函数总结"><a href="#MySQL-常用函数总结" class="headerlink" title="MySQL - 常用函数总结"></a>MySQL - 常用函数总结</h1><h2 id="MySQL-字符串函数"><a href="#MySQL-字符串函数" class="headerlink" title="MySQL 字符串函数"></a>MySQL 字符串函数</h2><table><thead><tr><th align="left">函数</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ASCII(s)</td><td align="left">返回字符串 s 的第一个字符的 ASCII 码。</td><td align="left">返回 CustomerName 字段第一个字母的 ASCII 码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstChar FROM Customers;</code></td></tr><tr><td align="left">CHAR_LENGTH(s)</td><td align="left">返回字符串 s 的字符数</td><td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHAR_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td></tr><tr><td align="left">CHARACTER_LENGTH(s)</td><td align="left">返回字符串 s 的字符数</td><td align="left">返回字符串 RUNOOB 的字符数<code>SELECT CHARACTER_LENGTH(&quot;RUNOOB&quot;) AS LengthOfString;</code></td></tr><tr><td align="left">CONCAT(s1,s2…sn)</td><td align="left">字符串 s1,s2 等多个字符串合并为一个字符串</td><td align="left">合并多个字符串<code>SELECT CONCAT(&quot;SQL &quot;, &quot;Runoob &quot;, &quot;Gooogle &quot;, &quot;Facebook&quot;) AS ConcatenatedString;</code></td></tr><tr><td align="left">CONCAT_WS(x, s1,s2…sn)</td><td align="left">同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td><td align="left">合并多个字符串，并添加分隔符：<code>SELECT CONCAT_WS(&quot;-&quot;, &quot;SQL&quot;, &quot;Tutorial&quot;, &quot;is&quot;, &quot;fun!&quot;)AS ConcatenatedString;</code></td></tr><tr><td align="left">FIELD(s,s1,s2…)</td><td align="left">返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</td><td align="left">返回字符串 c 在列表值中的位置：<code>SELECT FIELD(&quot;c&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);</code></td></tr><tr><td align="left">FIND_IN_SET(s1,s2)</td><td align="left">返回在字符串s2中与s1匹配的字符串的位置</td><td align="left">返回字符串 c 在指定字符串中的位置：<code>SELECT FIND_IN_SET(&quot;c&quot;, &quot;a,b,c,d,e&quot;);</code></td></tr><tr><td align="left">FORMAT(x,n)</td><td align="left">函数可以将数字 x 进行格式化 “#,###.##”, 将 x 保留到小数点后 n 位，最后一位四舍五入。</td><td align="left">格式化数字 “#,###.##” 形式：<code>SELECT FORMAT(250500.5634, 2);     -- 输出 250,500.56</code></td></tr><tr><td align="left">INSERT(s1,x,len,s2)</td><td align="left">字符串 s2 替换 s1 的 x 位置开始长度为 len 的字符串</td><td align="left">从字符串第一个位置开始的 6 个字符替换为 runoob：<code>SELECT INSERT(&quot;google.com&quot;, 1, 6, &quot;runoob&quot;);  -- 输出：runoob.com</code></td></tr><tr><td align="left">LOCATE(s1,s)</td><td align="left">从字符串 s 中获取 s1 的开始位置</td><td align="left">获取 b 在字符串 abc 中的位置：<code>SELECT LOCATE(&#39;st&#39;,&#39;myteststring&#39;);  -- 5</code>返回字符串 abc 中 b 的位置：<code>SELECT LOCATE(&#39;b&#39;, &#39;abc&#39;) -- 2</code></td></tr><tr><td align="left">LCASE(s)</td><td align="left">将字符串 s 的所有字母变成小写字母</td><td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LCASE(&#39;RUNOOB&#39;) -- runoob</code></td></tr><tr><td align="left">LEFT(s,n)</td><td align="left">返回字符串 s 的前 n 个字符</td><td align="left">返回字符串 runoob 中的前两个字符：<code>SELECT LEFT(&#39;runoob&#39;,2) -- ru</code></td></tr><tr><td align="left">LOWER(s)</td><td align="left">将字符串 s 的所有字母变成小写字母</td><td align="left">字符串 RUNOOB 转换为小写：<code>SELECT LOWER(&#39;RUNOOB&#39;) -- runoob</code></td></tr><tr><td align="left">LPAD(s1,len,s2)</td><td align="left">在字符串 s1 的开始处填充字符串 s2，使字符串长度达到 len</td><td align="left">将字符串 xx 填充到 abc 字符串的开始处：<code>SELECT LPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- xxabc</code></td></tr><tr><td align="left">LTRIM(s)</td><td align="left">去掉字符串 s 开始处的空格</td><td align="left">去掉字符串 RUNOOB开始处的空格：<code>SELECT LTRIM(&quot;    RUNOOB&quot;) AS LeftTrimmedString;-- RUNOOB</code></td></tr><tr><td align="left">MID(s,n,len)</td><td align="left">从字符串 s 的 n 位置截取长度为 len 的子字符串，同 SUBSTRING(s,n,len)</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT MID(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td align="left">POSITION(s1 IN s)</td><td align="left">从字符串 s 中获取 s1 的开始位置</td><td align="left">返回字符串 abc 中 b 的位置：<code>SELECT POSITION(&#39;b&#39; in &#39;abc&#39;) -- 2</code></td></tr><tr><td align="left">REPEAT(s,n)</td><td align="left">将字符串 s 重复 n 次</td><td align="left">将字符串 runoob 重复三次：<code>SELECT REPEAT(&#39;runoob&#39;,3) -- runoobrunoobrunoob</code></td></tr><tr><td align="left">REPLACE(s,s1,s2)</td><td align="left">将字符串 s2 替代字符串 s 中的字符串 s1</td><td align="left">将字符串 abc 中的字符 a 替换为字符 x：<code>SELECT REPLACE(&#39;abc&#39;,&#39;a&#39;,&#39;x&#39;) --xbc</code></td></tr><tr><td align="left">REVERSE(s)</td><td align="left">将字符串s的顺序反过来</td><td align="left">将字符串 abc 的顺序反过来：<code>SELECT REVERSE(&#39;abc&#39;) -- cba</code></td></tr><tr><td align="left">RIGHT(s,n)</td><td align="left">返回字符串 s 的后 n 个字符</td><td align="left">返回字符串 runoob 的后两个字符：<code>SELECT RIGHT(&#39;runoob&#39;,2) -- ob</code></td></tr><tr><td align="left">RPAD(s1,len,s2)</td><td align="left">在字符串 s1 的结尾处添加字符串 s2，使字符串的长度达到 len</td><td align="left">将字符串 xx 填充到 abc 字符串的结尾处：<code>SELECT RPAD(&#39;abc&#39;,5,&#39;xx&#39;) -- abcxx</code></td></tr><tr><td align="left">RTRIM(s)</td><td align="left">去掉字符串 s 结尾处的空格</td><td align="left">去掉字符串 RUNOOB 的末尾空格：<code>SELECT RTRIM(&quot;RUNOOB     &quot;) AS RightTrimmedString;   -- RUNOOB</code></td></tr><tr><td align="left">SPACE(n)</td><td align="left">返回 n 个空格</td><td align="left">返回 10 个空格：<code>SELECT SPACE(10);</code></td></tr><tr><td align="left">STRCMP(s1,s2)</td><td align="left">比较字符串 s1 和 s2，如果 s1 与 s2 相等返回 0 ，如果 s1&gt;s2 返回 1，如果 s1&lt;s2 返回 -1</td><td align="left">比较字符串：<code>SELECT STRCMP(&quot;runoob&quot;, &quot;runoob&quot;);  -- 0</code></td></tr><tr><td align="left">SUBSTR(s, start, length)</td><td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTR(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td align="left">SUBSTRING(s, start, length)</td><td align="left">从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td align="left">从字符串 RUNOOB 中的第 2 个位置截取 3个 字符：<code>SELECT SUBSTRING(&quot;RUNOOB&quot;, 2, 3) AS ExtractString; -- UNO</code></td></tr><tr><td align="left">SUBSTRING_INDEX(s, delimiter, number)</td><td align="left">返回从字符串 s 的第 number 个出现的分隔符 delimiter 之后的子串。 如果 number 是正数，返回第 number 个字符左边的字符串。 如果 number 是负数，返回第(number 的绝对值(从右边数))个字符右边的字符串。</td><td align="left"><code>SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,1) -- a SELECT SUBSTRING_INDEX(&#39;a*b&#39;,&#39;*&#39;,-1)  -- b SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(&#39;a*b*c*d*e&#39;,&#39;*&#39;,3),&#39;*&#39;,-1)  -- c</code></td></tr><tr><td align="left">TRIM(s)</td><td align="left">去掉字符串 s 开始和结尾处的空格</td><td align="left">去掉字符串 RUNOOB 的首尾空格：<code>SELECT TRIM(&#39;    RUNOOB    &#39;) AS TrimmedString;</code></td></tr><tr><td align="left">UCASE(s)</td><td align="left">将字符串转换为大写</td><td align="left">将字符串 runoob 转换为大写：<code>SELECT UCASE(&quot;runoob&quot;); -- RUNOOB</code></td></tr><tr><td align="left">UPPER(s)</td><td align="left">将字符串转换为大写</td><td align="left">将字符串 runoob 转换为大写：<code>SELECT UPPER(&quot;runoob&quot;); -- RUNOOB</code></td></tr></tbody></table><hr><h2 id="MySQL-数字函数"><a href="#MySQL-数字函数" class="headerlink" title="MySQL 数字函数"></a>MySQL 数字函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ABS(x)</td><td align="left">返回 x 的绝对值</td><td align="left">返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td></tr><tr><td align="left">ACOS(x)</td><td align="left">求 x 的反余弦值(参数是弧度)</td><td align="left"><code>SELECT ACOS(0.25);</code></td></tr><tr><td align="left">ASIN(x)</td><td align="left">求反正弦值(参数是弧度)</td><td align="left"><code>SELECT ASIN(0.25);</code></td></tr><tr><td align="left">ATAN(x)</td><td align="left">求反正切值(参数是弧度)</td><td align="left"><code>SELECT ATAN(2.5);</code></td></tr><tr><td align="left">ATAN2(n, m)</td><td align="left">求反正切值(参数是弧度)</td><td align="left"><code>SELECT ATAN2(-0.8, 2);</code></td></tr><tr><td align="left">AVG(expression)</td><td align="left">返回一个表达式的平均值，expression 是一个字段</td><td align="left">返回 Products 表中Price 字段的平均值：<code>SELECT AVG(Price) AS AveragePrice FROM Products;</code></td></tr><tr><td align="left">CEIL(x)</td><td align="left">返回大于或等于 x 的最小整数</td><td align="left"><code>SELECT CEIL(1.5) -- 返回2</code></td></tr><tr><td align="left">CEILING(x)</td><td align="left">返回大于或等于 x 的最小整数</td><td align="left"><code>SELECT CEILING(1.5); -- 返回2</code></td></tr><tr><td align="left">COS(x)</td><td align="left">求余弦值(参数是弧度)</td><td align="left"><code>SELECT COS(2);</code></td></tr><tr><td align="left">COT(x)</td><td align="left">求余切值(参数是弧度)</td><td align="left"><code>SELECT COT(6);</code></td></tr><tr><td align="left">COUNT(expression)</td><td align="left">返回查询的记录总数，expression 参数是一个字段或者 * 号</td><td align="left">返回 Products 表中 products 字段总共有多少条记录：<code>SELECT COUNT(ProductID) AS NumberOfProducts FROM Products;</code></td></tr><tr><td align="left">DEGREES(x)</td><td align="left">将弧度转换为角度</td><td align="left"><code>SELECT DEGREES(3.1415926535898) -- 180</code></td></tr><tr><td align="left">n DIV m</td><td align="left">整除，n 为被除数，m 为除数</td><td align="left">计算 10 除于 5：<code>SELECT 10 DIV 5;  -- 2</code></td></tr><tr><td align="left">EXP(x)</td><td align="left">返回 e 的 x 次方</td><td align="left">计算 e 的三次方：<code>SELECT EXP(3) -- 20.085536923188</code></td></tr><tr><td align="left">FLOOR(x)</td><td align="left">返回小于或等于 x 的最大整数</td><td align="left">小于或等于 1.5 的整数：<code>SELECT FLOOR(1.5) -- 返回1</code></td></tr><tr><td align="left">GREATEST(expr1, expr2, expr3, …)</td><td align="left">返回列表中的最大值</td><td align="left">返回以下数字列表中的最大值：<code>SELECT GREATEST(3, 12, 34, 8, 25); -- 34</code>返回以下字符串列表中的最大值：<code>SELECT GREATEST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Runoob</code></td></tr><tr><td align="left">LEAST(expr1, expr2, expr3, …)</td><td align="left">返回列表中的最小值</td><td align="left">返回以下数字列表中的最小值：<code>SELECT LEAST(3, 12, 34, 8, 25); -- 3</code>返回以下字符串列表中的最小值：<code>SELECT LEAST(&quot;Google&quot;, &quot;Runoob&quot;, &quot;Apple&quot;);   -- Apple</code></td></tr><tr><td align="left">LN</td><td align="left">返回数字的自然对数，以 e 为底。</td><td align="left">返回 2 的自然对数：<code>SELECT LN(2);  -- 0.6931471805599453</code></td></tr><tr><td align="left">LOG(x) 或 LOG(base, x)</td><td align="left">返回自然对数(以 e 为底的对数)，如果带有 base 参数，则 base 为指定带底数。</td><td align="left"><code>SELECT LOG(20.085536923188) -- 3 SELECT LOG(2, 4); -- 2</code></td></tr><tr><td align="left">LOG10(x)</td><td align="left">返回以 10 为底的对数</td><td align="left"><code>SELECT LOG10(100) -- 2</code></td></tr><tr><td align="left">LOG2(x)</td><td align="left">返回以 2 为底的对数</td><td align="left">返回以 2 为底 6 的对数：<code>SELECT LOG2(6);  -- 2.584962500721156</code></td></tr><tr><td align="left">MAX(expression)</td><td align="left">返回字段 expression 中的最大值</td><td align="left">返回数据表 Products 中字段 Price 的最大值：<code>SELECT MAX(Price) AS LargestPrice FROM Products;</code></td></tr><tr><td align="left">MIN(expression)</td><td align="left">返回字段 expression 中的最小值</td><td align="left">返回数据表 Products 中字段 Price 的最小值：<code>SELECT MIN(Price) AS MinPrice FROM Products;</code></td></tr><tr><td align="left">MOD(x,y)</td><td align="left">返回 x 除以 y 以后的余数</td><td align="left">5 除于 2 的余数：<code>SELECT MOD(5,2) -- 1</code></td></tr><tr><td align="left">PI()</td><td align="left">返回圆周率(3.141593）</td><td align="left"><code>SELECT PI() --3.141593</code></td></tr><tr><td align="left">POW(x,y)</td><td align="left">返回 x 的 y 次方</td><td align="left">2 的 3 次方：<code>SELECT POW(2,3) -- 8</code></td></tr><tr><td align="left">POWER(x,y)</td><td align="left">返回 x 的 y 次方</td><td align="left">2 的 3 次方：<code>SELECT POWER(2,3) -- 8</code></td></tr><tr><td align="left">RADIANS(x)</td><td align="left">将角度转换为弧度</td><td align="left">180 度转换为弧度：<code>SELECT RADIANS(180) -- 3.1415926535898</code></td></tr><tr><td align="left">RAND()</td><td align="left">返回 0 到 1 的随机数</td><td align="left"><code>SELECT RAND() --0.93099315644334</code></td></tr><tr><td align="left">ROUND(x)</td><td align="left">返回离 x 最近的整数</td><td align="left"><code>SELECT ROUND(1.23456) --1</code></td></tr><tr><td align="left">SIGN(x)</td><td align="left">返回 x 的符号，x 是负数、0、正数分别返回 -1、0 和 1</td><td align="left"><code>SELECT SIGN(-10) -- (-1)</code></td></tr><tr><td align="left">SIN(x)</td><td align="left">求正弦值(参数是弧度)</td><td align="left"><code>SELECT SIN(RADIANS(30)) -- 0.5</code></td></tr><tr><td align="left">SQRT(x)</td><td align="left">返回x的平方根</td><td align="left">25 的平方根：<code>SELECT SQRT(25) -- 5</code></td></tr><tr><td align="left">SUM(expression)</td><td align="left">返回指定字段的总和</td><td align="left">计算 OrderDetails 表中字段 Quantity 的总和：<code>SELECT SUM(Quantity) AS TotalItemsOrdered FROM OrderDetails;</code></td></tr><tr><td align="left">TAN(x)</td><td align="left">求正切值(参数是弧度)</td><td align="left"><code>SELECT TAN(1.75);  -- -5.52037992250933</code></td></tr><tr><td align="left">TRUNCATE(x,y)</td><td align="left">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别是不会进行四舍五入）</td><td align="left"><code>SELECT TRUNCATE(1.23456,3) -- 1.234</code></td></tr></tbody></table><hr><h2 id="MySQL-日期函数"><a href="#MySQL-日期函数" class="headerlink" title="MySQL 日期函数"></a>MySQL 日期函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">ADDDATE(d,n)</td><td align="left">计算起始日期 d 加上 n 天的日期</td><td align="left"><code>SELECT ADDDATE(&quot;2017-06-15&quot;, INTERVAL 10 DAY); -&gt;2017-06-25</code></td></tr><tr><td align="left">ADDTIME(t,n)</td><td align="left">n 是一个时间表达式，时间 t 加上时间表达式 n</td><td align="left">加 5 秒：<code>SELECT ADDTIME(&#39;2011-11-11 11:11:11&#39;, 5); -&gt;2011-11-11 11:11:16 (秒)</code>添加 2 小时, 10 分钟, 5 秒:<code>SELECT ADDTIME(&quot;2020-06-15 09:34:21&quot;, &quot;2:10:5&quot;);  -&gt; 2020-06-15 11:44:26</code></td></tr><tr><td align="left">CURDATE()</td><td align="left">返回当前日期</td><td align="left"><code>SELECT CURDATE(); -&gt; 2018-09-19</code></td></tr><tr><td align="left">CURRENT_DATE()</td><td align="left">返回当前日期</td><td align="left"><code>SELECT CURRENT_DATE(); -&gt; 2018-09-19</code></td></tr><tr><td align="left">CURRENT_TIME</td><td align="left">返回当前时间</td><td align="left"><code>SELECT CURRENT_TIME(); -&gt; 19:59:02</code></td></tr><tr><td align="left">CURRENT_TIMESTAMP()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT CURRENT_TIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td align="left">CURTIME()</td><td align="left">返回当前时间</td><td align="left"><code>SELECT CURTIME(); -&gt; 19:59:02</code></td></tr><tr><td align="left">DATE()</td><td align="left">从日期或日期时间表达式中提取日期值</td><td align="left"><code>SELECT DATE(&quot;2017-06-15&quot;);     -&gt; 2017-06-15</code></td></tr><tr><td align="left">DATEDIFF(d1,d2)</td><td align="left">计算日期 d1-&gt;d2 之间相隔的天数</td><td align="left"><code>SELECT DATEDIFF(&#39;2001-01-01&#39;,&#39;2001-02-02&#39;) -&gt; -32</code></td></tr><tr><td align="left">DATE_ADD(d，INTERVAL expr type)</td><td align="left">计算起始日期 d 加上一个时间段后的日期，type 值可以是：MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td align="left"><code>SELECT DATE_ADD(&quot;2017-06-15&quot;, INTERVAL 10 DAY);     -&gt; 2017-06-25 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL 15 MINUTE); -&gt; 2017-06-15 09:49:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-06-15 06:34:21 SELECT DATE_ADD(&quot;2017-06-15 09:34:21&quot;, INTERVAL -3 HOUR); -&gt;2017-04-15</code></td></tr><tr><td align="left">DATE_FORMAT(d,f)</td><td align="left">按表达式 f的要求显示日期 d</td><td align="left"><code>SELECT DATE_FORMAT(&#39;2011-11-11 11:11:11&#39;,&#39;%Y-%m-%d %r&#39;) -&gt; 2011-11-11 11:11:11 AM</code></td></tr><tr><td align="left">DATE_SUB(date,INTERVAL expr type)</td><td align="left">函数从日期减去指定的时间间隔。</td><td align="left">Orders 表中 OrderDate 字段减去 2 天：<code>SELECT OrderId,DATE_SUB(OrderDate,INTERVAL 2 DAY) AS OrderPayDate FROM Orders</code></td></tr><tr><td align="left">DAY(d)</td><td align="left">返回日期值 d 的日期部分</td><td align="left"><code>SELECT DAY(&quot;2017-06-15&quot;);   -&gt; 15</code></td></tr><tr><td align="left">DAYNAME(d)</td><td align="left">返回日期 d 是星期几，如 Monday,Tuesday</td><td align="left"><code>SELECT DAYNAME(&#39;2011-11-11 11:11:11&#39;) -&gt;Friday</code></td></tr><tr><td align="left">DAYOFMONTH(d)</td><td align="left">计算日期 d 是本月的第几天</td><td align="left"><code>SELECT DAYOFMONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11</code></td></tr><tr><td align="left">DAYOFWEEK(d)</td><td align="left">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td><td align="left"><code>SELECT DAYOFWEEK(&#39;2011-11-11 11:11:11&#39;) -&gt;6</code></td></tr><tr><td align="left">DAYOFYEAR(d)</td><td align="left">计算日期 d 是本年的第几天</td><td align="left"><code>SELECT DAYOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt;315</code></td></tr><tr><td align="left">EXTRACT(type FROM d)</td><td align="left">从日期 d 中获取指定的值，type 指定返回的值。 type可取值为： MICROSECONDSECONDMINUTEHOURDAYWEEKMONTHQUARTERYEARSECOND_MICROSECONDMINUTE_MICROSECONDMINUTE_SECONDHOUR_MICROSECONDHOUR_SECONDHOUR_MINUTEDAY_MICROSECONDDAY_SECONDDAY_MINUTEDAY_HOURYEAR_MONTH</td><td align="left"><code>SELECT EXTRACT(MINUTE FROM &#39;2011-11-11 11:11:11&#39;)  -&gt; 11</code></td></tr><tr><td align="left">FROM_DAYS(n)</td><td align="left">计算从 0000 年 1 月 1 日开始 n 天后的日期</td><td align="left"><code>SELECT FROM_DAYS(1111) -&gt; 0003-01-16</code></td></tr><tr><td align="left">HOUR(t)</td><td align="left">返回 t 中的小时值</td><td align="left"><code>SELECT HOUR(&#39;1:2:3&#39;) -&gt; 1</code></td></tr><tr><td align="left">LAST_DAY(d)</td><td align="left">返回给给定日期的那一月份的最后一天</td><td align="left"><code>SELECT LAST_DAY(&quot;2017-06-20&quot;); -&gt; 2017-06-30</code></td></tr><tr><td align="left">LOCALTIME()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT LOCALTIME() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td align="left">LOCALTIMESTAMP()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT LOCALTIMESTAMP() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td align="left">MAKEDATE(year, day-of-year)</td><td align="left">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td><td align="left"><code>SELECT MAKEDATE(2017, 3); -&gt; 2017-01-03</code></td></tr><tr><td align="left">MAKETIME(hour, minute, second)</td><td align="left">组合时间，参数分别为小时、分钟、秒</td><td align="left"><code>SELECT MAKETIME(11, 35, 4); -&gt; 11:35:04</code></td></tr><tr><td align="left">MICROSECOND(date)</td><td align="left">返回日期参数所对应的微秒数</td><td align="left"><code>SELECT MICROSECOND(&quot;2017-06-20 09:34:00.000023&quot;); -&gt; 23</code></td></tr><tr><td align="left">MINUTE(t)</td><td align="left">返回 t 中的分钟值</td><td align="left"><code>SELECT MINUTE(&#39;1:2:3&#39;) -&gt; 2</code></td></tr><tr><td align="left">MONTHNAME(d)</td><td align="left">返回日期当中的月份名称，如 November</td><td align="left"><code>SELECT MONTHNAME(&#39;2011-11-11 11:11:11&#39;) -&gt; November</code></td></tr><tr><td align="left">MONTH(d)</td><td align="left">返回日期d中的月份值，1 到 12</td><td align="left"><code>SELECT MONTH(&#39;2011-11-11 11:11:11&#39;) -&gt;11</code></td></tr><tr><td align="left">NOW()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT NOW() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td align="left">PERIOD_ADD(period, number)</td><td align="left">为 年-月 组合日期添加一个时段</td><td align="left"><code>SELECT PERIOD_ADD(201703, 5);    -&gt; 201708</code></td></tr><tr><td align="left">PERIOD_DIFF(period1, period2)</td><td align="left">返回两个时段之间的月份差值</td><td align="left"><code>SELECT PERIOD_DIFF(201710, 201703); -&gt; 7</code></td></tr><tr><td align="left">QUARTER(d)</td><td align="left">返回日期d是第几季节，返回 1 到 4</td><td align="left"><code>SELECT QUARTER(&#39;2011-11-11 11:11:11&#39;) -&gt; 4</code></td></tr><tr><td align="left">SECOND(t)</td><td align="left">返回 t 中的秒钟值</td><td align="left"><code>SELECT SECOND(&#39;1:2:3&#39;) -&gt; 3</code></td></tr><tr><td align="left">SEC_TO_TIME(s)</td><td align="left">将以秒为单位的时间 s 转换为时分秒的格式</td><td align="left"><code>SELECT SEC_TO_TIME(4320) -&gt; 01:12:00</code></td></tr><tr><td align="left">STR_TO_DATE(string, format_mask)</td><td align="left">将字符串转变为日期</td><td align="left"><code>SELECT STR_TO_DATE(&quot;August 10 2017&quot;, &quot;%M %d %Y&quot;); -&gt; 2017-08-10</code></td></tr><tr><td align="left">SUBDATE(d,n)</td><td align="left">日期 d 减去 n 天后的日期</td><td align="left"><code>SELECT SUBDATE(&#39;2011-11-11 11:11:11&#39;, 1) -&gt;2011-11-10 11:11:11 (默认是天)</code></td></tr><tr><td align="left">SUBTIME(t,n)</td><td align="left">时间 t 减去 n 秒的时间</td><td align="left"><code>SELECT SUBTIME(&#39;2011-11-11 11:11:11&#39;, 5) -&gt;2011-11-11 11:11:06 (秒)</code></td></tr><tr><td align="left">SYSDATE()</td><td align="left">返回当前日期和时间</td><td align="left"><code>SELECT SYSDATE() -&gt; 2018-09-19 20:57:43</code></td></tr><tr><td align="left">TIME(expression)</td><td align="left">提取传入表达式的时间部分</td><td align="left"><code>SELECT TIME(&quot;19:30:10&quot;); -&gt; 19:30:10</code></td></tr><tr><td align="left">TIME_FORMAT(t,f)</td><td align="left">按表达式 f 的要求显示时间 t</td><td align="left"><code>SELECT TIME_FORMAT(&#39;11:11:11&#39;,&#39;%r&#39;) 11:11:11 AM</code></td></tr><tr><td align="left">TIME_TO_SEC(t)</td><td align="left">将时间 t 转换为秒</td><td align="left"><code>SELECT TIME_TO_SEC(&#39;1:12:00&#39;) -&gt; 4320</code></td></tr><tr><td align="left">TIMEDIFF(time1, time2)</td><td align="left">计算时间差值</td><td align="left"><code>SELECT TIMEDIFF(&quot;13:10:11&quot;, &quot;13:10:10&quot;); -&gt; 00:00:01</code></td></tr><tr><td align="left">TIMESTAMP(expression, interval)</td><td align="left">单个参数时，函数返回日期或日期时间表达式；有2个参数时，将参数加和</td><td align="left"><code>SELECT TIMESTAMP(&quot;2017-07-23&quot;,  &quot;13:10:11&quot;); -&gt; 2017-07-23 13:10:11</code></td></tr><tr><td align="left">TO_DAYS(d)</td><td align="left">计算日期 d 距离 0000 年 1 月 1 日的天数</td><td align="left"><code>SELECT TO_DAYS(&#39;0001-01-01 01:01:01&#39;) -&gt; 366</code></td></tr><tr><td align="left">WEEK(d)</td><td align="left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td align="left"><code>SELECT WEEK(&#39;2011-11-11 11:11:11&#39;) -&gt; 45</code></td></tr><tr><td align="left">WEEKDAY(d)</td><td align="left">日期 d 是星期几，0 表示星期一，1 表示星期二</td><td align="left"><code>SELECT WEEKDAY(&quot;2017-06-15&quot;); -&gt; 3</code></td></tr><tr><td align="left">WEEKOFYEAR(d)</td><td align="left">计算日期 d 是本年的第几个星期，范围是 0 到 53</td><td align="left"><code>SELECT WEEKOFYEAR(&#39;2011-11-11 11:11:11&#39;) -&gt; 45</code></td></tr><tr><td align="left">YEAR(d)</td><td align="left">返回年份</td><td align="left"><code>SELECT YEAR(&quot;2017-06-15&quot;); -&gt; 2017</code></td></tr><tr><td align="left">YEARWEEK(date, mode)</td><td align="left">返回年份及第几周（0到53），mode 中 0 表示周天，1表示周一，以此类推</td><td align="left"><code>SELECT YEARWEEK(&quot;2017-06-15&quot;); -&gt; 201724</code></td></tr></tbody></table><hr><h2 id="MySQL-高级函数"><a href="#MySQL-高级函数" class="headerlink" title="MySQL 高级函数"></a>MySQL 高级函数</h2><table><thead><tr><th align="left">函数名</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">BIN(x)</td><td align="left">返回 x 的二进制编码</td><td align="left">15 的 2 进制编码:<code>SELECT BIN(15); -- 1111</code></td></tr><tr><td align="left">BINARY(s)</td><td align="left">将字符串 s 转换为二进制字符串</td><td align="left"><code>SELECT BINARY &quot;RUNOOB&quot;; -&gt; RUNOOB</code></td></tr><tr><td align="left"><code>CASE expression    WHEN condition1 THEN result1    WHEN condition2 THEN result2   ...    WHEN conditionN THEN resultN    ELSE result END</code></td><td align="left">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1, 如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了。</td><td align="left"><code>SELECT CASE  　WHEN 1 &gt; 0 　THEN &#39;1 &gt; 0&#39; 　WHEN 2 &gt; 0 　THEN &#39;2 &gt; 0&#39; 　ELSE &#39;3 &gt; 0&#39; 　END -&gt;1 &gt; 0</code></td></tr><tr><td align="left">CAST(x AS type)</td><td align="left">转换数据类型</td><td align="left">字符串日期转换为日期：<code>SELECT CAST(&quot;2017-08-29&quot; AS DATE); -&gt; 2017-08-29</code></td></tr><tr><td align="left">COALESCE(expr1, expr2, …., expr_n)</td><td align="left">返回参数中的第一个非空表达式（从左向右）</td><td align="left"><code>SELECT COALESCE(NULL, NULL, NULL, &#39;runoob.com&#39;, NULL, &#39;google.com&#39;); -&gt; runoob.com</code></td></tr><tr><td align="left">CONNECTION_ID()</td><td align="left">返回唯一的连接 ID</td><td align="left"><code>SELECT CONNECTION_ID(); -&gt; 4292835</code></td></tr><tr><td align="left">CONV(x,f1,f2)</td><td align="left">返回 f1 进制数变成 f2 进制数</td><td align="left"><code>SELECT CONV(15, 10, 2); -&gt; 1111</code></td></tr><tr><td align="left">CONVERT(s USING cs)</td><td align="left">函数将字符串 s 的字符集变成 cs</td><td align="left"><code>SELECT CHARSET(&#39;ABC&#39;) -&gt;utf-8     SELECT CHARSET(CONVERT(&#39;ABC&#39; USING gbk)) -&gt;gbk</code></td></tr><tr><td align="left">CURRENT_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT CURRENT_USER(); -&gt; guest@%</code></td></tr><tr><td align="left">DATABASE()</td><td align="left">返回当前数据库名</td><td align="left"><code>SELECT DATABASE();    -&gt; runoob</code></td></tr><tr><td align="left">IF(expr,v1,v2)</td><td align="left">如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。</td><td align="left"><code>SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)     -&gt;正确</code></td></tr><tr><td align="left"><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">IFNULL(v1,v2)</a></td><td align="left">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td align="left"><code>SELECT IFNULL(null,&#39;Hello Word&#39;) -&gt;Hello Word</code></td></tr><tr><td align="left">ISNULL(expression)</td><td align="left">判断表达式是否为 NULL</td><td align="left"><code>SELECT ISNULL(NULL); -&gt;1</code></td></tr><tr><td align="left">LAST_INSERT_ID()</td><td align="left">返回最近生成的 AUTO_INCREMENT 值</td><td align="left"><code>SELECT LAST_INSERT_ID(); -&gt;6</code></td></tr><tr><td align="left">NULLIF(expr1, expr2)</td><td align="left">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td><td align="left"><code>SELECT NULLIF(25, 25); -&gt;</code></td></tr><tr><td align="left">SESSION_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT SESSION_USER(); -&gt; guest@%</code></td></tr><tr><td align="left">SYSTEM_USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT SYSTEM_USER(); -&gt; guest@%</code></td></tr><tr><td align="left">USER()</td><td align="left">返回当前用户</td><td align="left"><code>SELECT USER(); -&gt; guest@%</code></td></tr><tr><td align="left">VERSION()</td><td align="left">返回数据库的版本号</td><td align="left"><code>SELECT VERSION() -&gt; 5.6.34</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - 基础用法总结</title>
    <link href="/2021/07/10/MySQL%20-%20%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/10/MySQL%20-%20%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-基础用法总结"><a href="#MySQL-基础用法总结" class="headerlink" title="MySQL - 基础用法总结"></a>MySQL - 基础用法总结</h1><p>申明：本文章内容均为作者学习完菜鸟教程的MySQL系列教程后的总结，任何内容请以菜鸟教程文章内容为准！</p><h2 id="MySQL管理"><a href="#MySQL管理" class="headerlink" title="MySQL管理"></a>MySQL管理</h2><h3 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h3><ul><li>启动MySQL服务器</li></ul><div class="code-wrapper"><pre><code class="hljs shell">cd c:/mysql/binmysqld --console</code></pre></div><ul><li>关闭MySQL服务器</li></ul><div class="code-wrapper"><pre><code class="hljs shell">cd c:/mysql/binmysqladmin -uroot shutdown</code></pre></div><p>或者直接打开任务管理器-服务-MySQL，右键选择启动或关闭</p><h3 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h3><p>首先，我们需要通过以下命令来检查MySQL服务器是否启动（查进程）：</p><div class="code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> mysqld</code></pre></div><p>如果MySql已经启动，以上命令将输出mysql进程列表， 如果mysql未启动，你可以使用以下命令来启动mysql服务器:</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">root@host# </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/bin</span>./mysqld_safe &amp;</code></pre></div><p>如果你想关闭目前运行的 MySQL 服务器, 你可以执行以下命令:</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">root@host# </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/bin</span>./mysqladmin -u root -p shutdownEnter password: ******</code></pre></div><h3 id="管理MySQL的命令"><a href="#管理MySQL的命令" class="headerlink" title="管理MySQL的命令"></a>管理MySQL的命令</h3><ul><li><em>USE 数据库名</em></li></ul><p>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;Database changed</code></pre></div><ul><li><em>SHOW DATABASES</em></li></ul><p>列出 MySQL 数据库管理系统的数据库列表。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW DATABASES;+--------------------+| Database           |+--------------------+| information_schema || RUNOOB             || cdcol              || mysql              || onethink           || performance_schema || phpmyadmin         || test               || wecenter           || wordpress          |+--------------------+10 rows in set (0.02 sec)</code></pre></div><ul><li><em>SHOW TABLES</em></li></ul><p>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;Database changedmysql&gt; SHOW TABLES;+------------------+| Tables_in_runoob |+------------------+| employee_tbl     || runoob_tbl       || tcount_tbl       |+------------------+3 rows in set (0.00 sec)</code></pre></div><ul><li><em>SHOW COLUMNS FROM 数据表 &#x2F; DESC 数据库</em></li></ul><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW COLUMNS FROM runoob_tbl;+-----------------+--------------+------+-----+---------+-------+| Field           | Type         | Null | Key | Default | Extra |+-----------------+--------------+------+-----+---------+-------+| runoob_id       | int(11)      | NO   | PRI | NULL    |       || runoob_title    | varchar(255) | YES  |     | NULL    |       || runoob_author   | varchar(255) | YES  |     | NULL    |       || submission_date | date         | YES  |     | NULL    |       |+-----------------+--------------+------+-----+---------+-------+4 rows in set (0.01 sec)</code></pre></div><ul><li><em>SHOW INDEX FROM 数据表</em></li></ul><p>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW INDEX FROM runoob_tbl;+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table      | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| runoob_tbl |          0 | PRIMARY  |            1 | runoob_id   | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+1 row in set (0.00 sec)</code></pre></div><h2 id="MySQL-连接服务器"><a href="#MySQL-连接服务器" class="headerlink" title="MySQL 连接服务器"></a>MySQL 连接服务器</h2><ul><li>从命令行直接连接mysql服务器：</li></ul><div class="code-wrapper"><pre><code class="hljs mysql">[root@host]# mysql -u root -pEnter password:******</code></pre></div><div class="code-wrapper"><pre><code class="hljs mysql">[root@host]# mysql -uroot -p******</code></pre></div><ul><li>退出服务器：</li></ul><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; exitBye</code></pre></div><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; quitBye</code></pre></div><h2 id="MySQL-数据库操作"><a href="#MySQL-数据库操作" class="headerlink" title="MySQL 数据库操作"></a>MySQL 数据库操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>方式一：登录后创建</li></ul><p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下:</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE DATABASE &lt;数据库名&gt;;</code></pre></div><ul><li>方式二：<strong>mysqladmin</strong> 命令直接创建</li></ul><div class="code-wrapper"><pre><code class="hljs shell">mysqladmin -uroot -p****** create &lt;数据库名&gt;</code></pre></div><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul><li>方式一：<strong>drop</strong> 命令删除</li></ul><div class="code-wrapper"><pre><code class="hljs mysql">drop database &lt;数据库名&gt;;</code></pre></div><ul><li>方式二：<strong>mysqladmin</strong> 命令删除</li></ul><div class="code-wrapper"><pre><code class="hljs shell">mysqladmin -uroot -p****** drop &lt;数据库名&gt;</code></pre></div><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><div class="code-wrapper"><pre><code class="hljs mysql">use &lt;数据库名&gt;；</code></pre></div><p><strong>注意:</strong> 与mysql命令不同，所有的数据库名，表名，表字段都是区分大小写的。所以你在使用SQL命令时需要输入正确的名称。</p><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">范围（有符号）</th><th align="center">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1 byte</td><td align="center">(-128，127)</td><td align="center">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="center">SMALLINT</td><td align="center">2 bytes</td><td align="center">(-32 768，32 767)</td><td align="center">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3 bytes</td><td align="center">(-8 388 608，8 388 607)</td><td align="center">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="center">INT或INTEGER</td><td align="center">4 bytes</td><td align="center">(-2 147 483 648，2 147 483 647)</td><td align="center">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="center">BIGINT</td><td align="center">8 bytes</td><td align="center">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="center">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="center">FLOAT</td><td align="center">4 bytes</td><td align="center">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="center">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="center">DOUBLE</td><td align="center">8 bytes</td><td align="center">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="center">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="center">DECIMAL</td><td align="center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="center">依赖于M和D的值</td><td align="center">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小 ( bytes)</th><th align="center">范围</th><th align="center">格式</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">DATE</td><td align="center">3</td><td align="center">1000-01-01&#x2F;9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">TIME</td><td align="center">3</td><td align="center">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="center">HH:MM:SS</td><td align="center">时间值或持续时间</td></tr><tr><td align="center">YEAR</td><td align="center">1</td><td align="center">1901&#x2F;2155</td><td align="center">YYYY</td><td align="center">年份值</td></tr><tr><td align="center">DATETIME</td><td align="center">8</td><td align="center">1000-01-01 00:00:00&#x2F;9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4</td><td align="center">1970-01-01 00:00:00&#x2F;2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="center">YYYYMMDD HHMMSS</td><td align="center">混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">CHAR</td><td align="center">0-255 bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">VARCHAR</td><td align="center">0-65535 bytes</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYBLOB</td><td align="center">0-255 bytes</td><td align="center">不超过 255 个字符的二进制字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">0-255 bytes</td><td align="center">短文本字符串</td></tr><tr><td align="center">BLOB</td><td align="center">0-65 535 bytes</td><td align="center">二进制形式的长文本数据</td></tr><tr><td align="center">TEXT</td><td align="center">0-65 535 bytes</td><td align="center">长文本数据</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">0-16 777 215 bytes</td><td align="center">二进制形式的中等长度文本数据</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">0-16 777 215 bytes</td><td align="center">中等长度文本数据</td></tr><tr><td align="center">LONGBLOB</td><td align="center">0-4 294 967 295 bytes</td><td align="center">二进制形式的极大文本数据</td></tr><tr><td align="center">LONGTEXT</td><td align="center">0-4 294 967 295 bytes</td><td align="center">极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><h2 id="MySQL-数据表操作"><a href="#MySQL-数据表操作" class="headerlink" title="MySQL 数据表操作"></a>MySQL 数据表操作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>通用语法</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE table_name (column_name column_type);</code></pre></div><p>以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS `runoob_tbl`(   `runoob_id` INT UNSIGNED AUTO_INCREMENT,   `runoob_title` VARCHAR(100) NOT NULL,   `runoob_author` VARCHAR(40) NOT NULL,   `submission_date` DATE,   PRIMARY KEY ( `runoob_id` ))ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre></div><p>通过 <strong>mysql&gt;</strong>  命令窗口创建MySQL数据表实例</p><div class="code-wrapper"><pre><code class="hljs mysql">root@host# mysql -u root -pEnter password:*******mysql&gt; use RUNOOB;Database changedmysql&gt; CREATE TABLE runoob_tbl(   -&gt; runoob_id INT NOT NULL AUTO_INCREMENT,   -&gt; runoob_title VARCHAR(100) NOT NULL,   -&gt; runoob_author VARCHAR(40) NOT NULL,   -&gt; submission_date DATE,   -&gt; PRIMARY KEY ( runoob_id )   -&gt; )ENGINE=InnoDB DEFAULT CHARSET=utf8;Query OK, 0 rows affected (0.16 sec)mysql&gt;</code></pre></div><p><strong>注意：</strong>MySQL命令终止符为分号 <strong>;</strong> </p><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p>以下为删除MySQL数据表的通用语法</p><div class="code-wrapper"><pre><code class="hljs mysql">DROP TABLE table_name ;</code></pre></div><h3 id="向数据表中插入数据"><a href="#向数据表中插入数据" class="headerlink" title="向数据表中插入数据"></a>向数据表中插入数据</h3><p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL语句来插入数据</p><div class="code-wrapper"><pre><code class="hljs mysql">INSERT INTO table_name ( field1, field2,...fieldN )                       VALUES                       ( value1, value2,...valueN );</code></pre></div><p><strong>注意：</strong>如果数据是字符型，必须使用单引号或者双引号，如：”value”</p><ul><li>操作实例，向 <strong>RUNOOB</strong> 数据库的 <strong>runoob_tb1</strong> 表中插入三条数据</li></ul><div class="code-wrapper"><pre><code class="hljs mysql">root@host# mysql -u root -p password;Enter password:*******mysql&gt; use RUNOOB;Database changedmysql&gt; INSERT INTO runoob_tbl     -&gt; (runoob_title, runoob_author, submission_date)    -&gt; VALUES    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());Query OK, 1 rows affected, 1 warnings (0.01 sec)mysql&gt; INSERT INTO runoob_tbl    -&gt; (runoob_title, runoob_author, submission_date)    -&gt; VALUES    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());Query OK, 1 rows affected, 1 warnings (0.01 sec)mysql&gt; INSERT INTO runoob_tbl    -&gt; (runoob_title, runoob_author, submission_date)    -&gt; VALUES    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);Query OK, 1 rows affected (0.00 sec)mysql&gt;</code></pre></div><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>MySQL 数据库使用SQL <strong>SELECT</strong> 语句来查询数据</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT column_name,column_nameFROM table_name[WHERE Clause][LIMIT N][ OFFSET M]</code></pre></div><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 WHERE 语句来包含任何条件。</li><li>你可以使用 LIMIT 属性来设定返回的记录数。</li><li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><p>用 <strong>select</strong> 语句返回数据表所有信息实例：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select * from runoob_tbl;+-----------+--------------+---------------+-----------------+| runoob_id | runoob_title | runoob_author | submission_date |+-----------+--------------+---------------+-----------------+|         1 | 学习 PHP     | 菜鸟教程      | 2017-04-12      ||         2 | 学习 MySQL   | 菜鸟教程      | 2017-04-12      ||         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      ||         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      ||         5 | 学习 C       | FK            | 2017-04-05      |+-----------+--------------+---------------+-----------------+5 rows in set (0.01 sec)</code></pre></div><h2 id="MySQL-WHERE子句"><a href="#MySQL-WHERE子句" class="headerlink" title="MySQL WHERE子句"></a>MySQL WHERE子句</h2><p><strong>WHERE</strong> 子句可以类比为编程语言中的限制条件来理解</p><p>以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...[WHERE condition1 [AND [OR]] condition2.....</code></pre></div><ul><li><p>你可以使用 AND 或者 OR 指定一个或多个条件。</p></li><li><p>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</p></li><li><p>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</p></li><li><p>使用 <strong>主键</strong> 来作为 WHERE 子句的条件查询是非常快速的。</p></li><li><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p></li></ul><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select * from runoob_tbl where runoob_title=&quot;学习 java&quot;;+-----------+--------------+---------------+-----------------+| runoob_id | runoob_title | runoob_author | submission_date |+-----------+--------------+---------------+-----------------+|         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      |+-----------+--------------+---------------+-----------------+1 row in set (0.00 sec)</code></pre></div><p><strong>注意：</strong>MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 <strong>BINARY</strong> 关键字来设定 WHERE 子句的字符串比较是区分大小写的。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select * from runoob_tbl where binary runoob_title=&quot;学习 java&quot;;Empty set (0.00 sec)</code></pre></div><h2 id="MySQL-UPDATE更新"><a href="#MySQL-UPDATE更新" class="headerlink" title="MySQL UPDATE更新"></a>MySQL UPDATE更新</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL <strong>UPDATE</strong> 命令来操作</p><p>以下是 <strong>UPDATE</strong> 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><div class="code-wrapper"><pre><code class="hljs mysql">UPDATE table_name SET field1=new-value1, field2=new-value2[WHERE Clause]</code></pre></div><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p>实例分析：将 runoob_tb1 中的 学习C 改为 学习C++</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; update runoob_tbl set runoob_title=&quot;学习 C++&quot; where runoob_id=5;Query OK, 1 row affected (0.01 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; select * from runoob_tbl;+-----------+--------------+---------------+-----------------+| runoob_id | runoob_title | runoob_author | submission_date |+-----------+--------------+---------------+-----------------+|         1 | 学习 PHP     | 菜鸟教程      | 2017-04-12      ||         2 | 学习 MySQL   | 菜鸟教程      | 2017-04-12      ||         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      ||         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      ||         5 | 学习 C++     | FK            | 2017-04-05      |+-----------+--------------+---------------+-----------------+5 rows in set (0.00 sec)</code></pre></div><h2 id="MySQL-DELETE语句"><a href="#MySQL-DELETE语句" class="headerlink" title="MySQL DELETE语句"></a>MySQL DELETE语句</h2><p>你可以使用 SQL 的 <strong>DELETE FROM</strong> 命令来删除 MySQL 数据表中的记录</p><div class="code-wrapper"><pre><code class="hljs mysql">DELETE FROM table_name [WHERE Clause]</code></pre></div><h2 id="MySQL-LIKE子句"><a href="#MySQL-LIKE子句" class="headerlink" title="MySQL LIKE子句"></a>MySQL LIKE子句</h2><p>SQL LIKE 子句中使用百分号 **%**字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****</p><p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>&#x3D;</strong> 的效果是一样的</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_nameWHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27;</code></pre></div><ul><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在 WHERE 子句中使用LIKE子句。</li><li>你可以使用LIKE子句代替等号 **&#x3D;**。</li><li>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li></ul><p>实例分析：从 <strong>runoob_tb1</strong> 数据表中获取 <strong>runoob_author</strong> 字段中以 <strong>COM</strong> 为结尾的所有记录：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select * from runoob_tbl where runoob_author like &quot;%COM&quot;;+-----------+--------------+---------------+-----------------+| runoob_id | runoob_title | runoob_author | submission_date |+-----------+--------------+---------------+-----------------+|         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      ||         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      |+-----------+--------------+---------------+-----------------+2 rows in set (0.00 sec)</code></pre></div><h2 id="MySQL-UNION操作符"><a href="#MySQL-UNION操作符" class="headerlink" title="MySQL UNION操作符"></a>MySQL UNION操作符</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions]UNION [ALL | DISTINCT]SELECT expression1, expression2, ... expression_nFROM tables[WHERE conditions];</code></pre></div><ul><li><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。</li></ul><p>实例分析：从 <strong>websites</strong> 和 <strong>apps</strong> 两个数据表中选择country数据</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select country from websites    -&gt; union    -&gt; select country from apps    -&gt; order by country;+---------+| country |+---------+| CN      || IND     || US      |+---------+3 rows in set (0.04 sec)</code></pre></div><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; select country from websites    -&gt; union all    -&gt; select country from apps    -&gt; order by country;+---------+| country |+---------+| CN      || CN      || CN      || CN      || CN      || IND     || US      || US      || US      |+---------+9 rows in set (0.00 sec)</code></pre></div><h2 id="MySQL-ORDER-BY-语句"><a href="#MySQL-ORDER-BY-语句" class="headerlink" title="MySQL ORDER BY 语句"></a>MySQL ORDER BY 语句</h2><p>以下是 SQL SELECT 语句使用 ORDER BY 子句将查询数据排序后再返回数据</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</code></pre></div><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li></ul><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;Database changedmysql&gt; SELECT * from runoob_tbl ORDER BY submission_date ASC;+-----------+---------------+---------------+-----------------+| runoob_id | runoob_title  | runoob_author | submission_date |+-----------+---------------+---------------+-----------------+| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      || 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      || 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      || 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |+-----------+---------------+---------------+-----------------+4 rows in set (0.01 sec) mysql&gt; SELECT * from runoob_tbl ORDER BY submission_date DESC;+-----------+---------------+---------------+-----------------+| runoob_id | runoob_title  | runoob_author | submission_date |+-----------+---------------+---------------+-----------------+| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      || 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      || 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      || 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |+-----------+---------------+---------------+-----------------+4 rows in set (0.01 sec)</code></pre></div><h2 id="MySQL-GROUP-BY-语句"><a href="#MySQL-GROUP-BY-语句" class="headerlink" title="MySQL GROUP BY 语句"></a>MySQL GROUP BY 语句</h2><p>GROUP BY 语句根据一个或多个列对结果集进行分组</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数</p><div class="code-wrapper"><pre><code class="hljs mysql">SELECT column_name, function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name;</code></pre></div><p>实例分析：使用 GROUP BY 语句将数据表按名字进行分组，并记录每个人有多少条记录</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM employee_tbl;+----+--------+---------------------+--------+| id | name   | date                | singin |+----+--------+---------------------+--------+|  1 | 小明 | 2016-04-22 15:25:33 |      1 ||  2 | 小王 | 2016-04-20 15:25:47 |      3 ||  3 | 小丽 | 2016-04-19 15:26:02 |      2 ||  4 | 小王 | 2016-04-07 15:26:14 |      4 ||  5 | 小明 | 2016-04-11 15:26:40 |      4 ||  6 | 小明 | 2016-04-04 15:26:54 |      2 |+----+--------+---------------------+--------+6 rows in set (0.00 sec)mysql&gt; SELECT name, COUNT(*) FROM employee_tbl GROUP BY name;+--------+----------+| name   | COUNT(*) |+--------+----------+| 小丽 |        1 || 小明 |        3 || 小王 |        2 |+--------+----------+3 rows in set (0.01 sec)</code></pre></div><h3 id="WITH-ROLLUP-语句"><a href="#WITH-ROLLUP-语句" class="headerlink" title="WITH ROLLUP 语句"></a>WITH ROLLUP 语句</h3><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）</p><p>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;+--------+--------------+| name   | singin_count |+--------+--------------+| 小丽 |            2 || 小明 |            7 || 小王 |            7 || NULL   |           16 |+--------+--------------+4 rows in set (0.00 sec)</code></pre></div><p>其中记录 NULL 表示所有人的登录次数。</p><p>我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，<strong>coalesce</strong> 语法：</p><div class="code-wrapper"><pre><code class="hljs mysql">select coalesce(a,b,c);</code></pre></div><p>参数说明：如果a&#x3D;&#x3D;null,则选择b；如果b&#x3D;&#x3D;null,则选择c；如果a!&#x3D;null,则选择a；如果a b c 都为null ，则返回为null（没意义）</p><p>以下实例中如果名字为空我们使用总数代替：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT coalesce(name, &#x27;总数&#x27;), SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;+--------------------------+--------------+| coalesce(name, &#x27;总数&#x27;) | singin_count |+--------------------------+--------------+| 小丽                   |            2 || 小明                   |            7 || 小王                   |            7 || 总数                   |           16 |+--------------------------+--------------+4 rows in set (0.01 sec)</code></pre></div><h2 id="MySQL-JOIN-语句"><a href="#MySQL-JOIN-语句" class="headerlink" title="MySQL JOIN 语句"></a>MySQL JOIN 语句</h2><p>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询</p><p>JOIN 按照功能大致分为如下三类：</p><ul><li><strong>INNER JOIN（内连接,或等值连接）</strong>：获取两个表中字段匹配关系的记录</li><li><strong>LEFT JOIN（左连接）：</strong>获取左表所有记录，即使右表没有对应匹配的记录</li><li><strong>RIGHT JOIN（右连接）：</strong> 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录</li></ul><p>测试数据</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;Database changedmysql&gt; SELECT * FROM tcount_tbl;+---------------+--------------+| runoob_author | runoob_count |+---------------+--------------+| 菜鸟教程  | 10           || RUNOOB.COM    | 20           || Google        | 22           |+---------------+--------------+3 rows in set (0.01 sec) mysql&gt; SELECT * from runoob_tbl;+-----------+---------------+---------------+-----------------+| runoob_id | runoob_title  | runoob_author | submission_date |+-----------+---------------+---------------+-----------------+| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      || 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      || 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      || 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      || 5         | 学习 C      | FK            | 2017-04-05      |+-----------+---------------+---------------+-----------------+5 rows in set (0.01 sec)</code></pre></div><h3 id="INNER-JOIN-语句"><a href="#INNER-JOIN-语句" class="headerlink" title="INNER JOIN 语句"></a>INNER JOIN 语句</h3><p>接下来我们就使用MySQL的**INNER JOIN(也可以省略 INNER 使用 JOIN，效果一样)**来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a INNER JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+-------------+-----------------+----------------+| a.runoob_id | a.runoob_author | b.runoob_count |+-------------+-----------------+----------------+| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             |+-------------+-----------------+----------------+4 rows in set (0.00 sec)</code></pre></div><p>以上 SQL 语句等价于：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a, tcount_tbl b WHERE a.runoob_author = b.runoob_author;+-------------+-----------------+----------------+| a.runoob_id | a.runoob_author | b.runoob_count |+-------------+-----------------+----------------+| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             |+-------------+-----------------+----------------+4 rows in set (0.01 sec)</code></pre></div><h3 id="LEFT-JOIN-语句"><a href="#LEFT-JOIN-语句" class="headerlink" title="LEFT JOIN 语句"></a>LEFT JOIN 语句</h3><p>MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据尝试以下实例，以 <strong>runoob_tbl</strong> 为左表，<strong>tcount_tbl</strong> 为右表，理解 MySQL LEFT JOIN 的应用：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a LEFT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+-------------+-----------------+----------------+| a.runoob_id | a.runoob_author | b.runoob_count |+-------------+-----------------+----------------+| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             || 5           | FK              | NULL           |+-------------+-----------------+----------------+5 rows in set (0.01 sec)</code></pre></div><h3 id="RIGHT-JOIN-语句"><a href="#RIGHT-JOIN-语句" class="headerlink" title="RIGHT JOIN 语句"></a>RIGHT JOIN 语句</h3><p>MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count FROM runoob_tbl a RIGHT JOIN tcount_tbl b ON a.runoob_author = b.runoob_author;+-------------+-----------------+----------------+| a.runoob_id | a.runoob_author | b.runoob_count |+-------------+-----------------+----------------+| 1           | 菜鸟教程    | 10             || 2           | 菜鸟教程    | 10             || 3           | RUNOOB.COM      | 20             || 4           | RUNOOB.COM      | 20             || NULL        | NULL            | 22             |+-------------+-----------------+----------------+5 rows in set (0.01 sec)</code></pre></div><h2 id="MySQL-ALTER命令"><a href="#MySQL-ALTER命令" class="headerlink" title="MySQL ALTER命令"></a>MySQL ALTER命令</h2><p>先创建一个测试数据表 <strong>testalter_tbl</strong> ：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; create table testalter_tbl    -&gt; (    -&gt; i INT,    -&gt; c CHAR(1)    -&gt; );Query OK, 0 rows affected (0.05 sec)mysql&gt; SHOW COLUMNS FROM testalter_tbl;+-------+---------+------+-----+---------+-------+| Field | Type    | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| i     | int(11) | YES  |     | NULL    |       || c     | char(1) | YES  |     | NULL    |       |+-------+---------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre></div><h3 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h3><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl DROP i;</code></pre></div><h3 id="添加表字段"><a href="#添加表字段" class="headerlink" title="添加表字段"></a>添加表字段</h3><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</code></pre></div><p>执行以上命令后，i 字段会自动添加到数据表字段的末尾。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW COLUMNS FROM testalter_tbl;+-------+---------+------+-----+---------+-------+| Field | Type    | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| c     | char(1) | YES  |     | NULL    |       || i     | int(11) | YES  |     | NULL    |       |+-------+---------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre></div><p>如果你需要指定新增字段的位置，可以使用MySQL提供的关键字 <strong>FIRST</strong> (设定位第一列)， <strong>AFTER</strong> 字段名（设定位于某个字段之后）</p><div class="code-wrapper"><pre><code class="hljs mysql">ALTER TABLE testalter_tbl DROP i;ALTER TABLE testalter_tbl ADD i INT FIRST;ALTER TABLE testalter_tbl DROP i;ALTER TABLE testalter_tbl ADD i INT AFTER c;</code></pre></div><h3 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h3><p>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 <strong>MODIFY</strong> 或 <strong>CHANGE</strong> 子句 。</p><p>例如，把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10);</code></pre></div><p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;</code></pre></div><h3 id="ALTER-TABLE-对-Null-值和默认值的影响"><a href="#ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 Null 值和默认值的影响"></a>ALTER TABLE 对 Null 值和默认值的影响</h3><p>当你修改字段时，你可以指定是否包含值或者是否设置默认值</p><p>以下实例，指定字段 j 为 NOT NULL 且默认值为100 </p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl     -&gt; MODIFY j BIGINT NOT NULL DEFAULT 100;</code></pre></div><p>如果你不设置默认值，MySQL会自动设置该字段默认为 NULL</p><h3 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h3><p>你可以使用 ALTER 来修改字段的默认值，尝试以下实例：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;mysql&gt; SHOW COLUMNS FROM testalter_tbl;+-------+---------+------+-----+---------+-------+| Field | Type    | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| c     | char(1) | YES  |     | NULL    |       || i     | int(11) | YES  |     | 1000    |       |+-------+---------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre></div><p>你也可以使用 ALTER 命令及 DROP子句来删除字段的默认值</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;mysql&gt; SHOW COLUMNS FROM testalter_tbl;+-------+---------+------+-----+---------+-------+| Field | Type    | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| c     | char(1) | YES  |     | NULL    |       || i     | int(11) | YES  |     | NULL    |       |+-------+---------+------+-----+---------+-------+2 rows in set (0.00 sec)</code></pre></div><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p>如果需要修改数据表的名称，可以在 ALTER TABLE 语句中使用 <strong>RENAME TO</strong> 子句来实现</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;</code></pre></div><h2 id="MySQL-临时表"><a href="#MySQL-临时表" class="headerlink" title="MySQL 临时表"></a>MySQL 临时表</h2><h3 id="创建MySQL临时表"><a href="#创建MySQL临时表" class="headerlink" title="创建MySQL临时表"></a>创建MySQL临时表</h3><p>在之前提到的创建数据表语句中，在create后加上 <strong>temporary</strong> 字样：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (    -&gt; product_name VARCHAR(50) NOT NULL    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0);Query OK, 0 rows affected (0.00 sec)</code></pre></div><p>如果你退出当前MySQL会话，再使用 <strong>SELECT</strong>命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了</p><h3 id="删除MySQL临时表"><a href="#删除MySQL临时表" class="headerlink" title="删除MySQL临时表"></a>删除MySQL临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 <strong>DROP TABLE</strong> 命令来手动删除临时表</p><h2 id="MySQL-复制表"><a href="#MySQL-复制表" class="headerlink" title="MySQL 复制表"></a>MySQL 复制表</h2><ul><li>使用 <strong>SHOW CREATE TABLE</strong> 命令获取创建数据表(<strong>CREATE TABLE</strong>) 语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 <strong>INSERT INTO … SELECT</strong> 语句来实现。</li></ul><p><strong>步骤一：</strong></p><p>获取数据表的完整结构。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SHOW CREATE TABLE runoob_tbl \G;*************************** 1. row ***************************       Table: runoob_tblCreate Table: CREATE TABLE `runoob_tbl` (  `runoob_id` int(11) NOT NULL auto_increment,  `runoob_title` varchar(100) NOT NULL default &#x27;&#x27;,  `runoob_author` varchar(40) NOT NULL default &#x27;&#x27;,  `submission_date` date default NULL,  PRIMARY KEY  (`runoob_id`),  UNIQUE KEY `AUTHOR_INDEX` (`runoob_author`)) ENGINE=InnoDB 1 row in set (0.00 sec)ERROR:No query specified</code></pre></div><p><strong>步骤二：</strong></p><p>修改SQL语句的数据表名，并执行SQL语句。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE `clone_tbl` (  -&gt; `runoob_id` int(11) NOT NULL auto_increment,  -&gt; `runoob_title` varchar(100) NOT NULL default &#x27;&#x27;,  -&gt; `runoob_author` varchar(40) NOT NULL default &#x27;&#x27;,  -&gt; `submission_date` date default NULL,  -&gt; PRIMARY KEY  (`runoob_id`),  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`runoob_author`)-&gt; ) ENGINE=InnoDB;Query OK, 0 rows affected (1.80 sec)</code></pre></div><p><strong>步骤三：</strong></p><p>执行完第二步骤后，你将在数据库中创建新的克隆表 clone_tbl。 如果你想拷贝数据表的数据你可以使用 <strong>INSERT INTO… SELECT</strong> 语句来实现。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; INSERT INTO clone_tbl (runoob_id,    -&gt;                        runoob_title,    -&gt;                        runoob_author,    -&gt;                        submission_date)    -&gt; SELECT runoob_id,runoob_title,    -&gt;        runoob_author,submission_date    -&gt; FROM runoob_tbl;Query OK, 3 rows affected (0.07 sec)Records: 3  Duplicates: 0  Warnings: 0</code></pre></div><h2 id="MySQL-序列使用"><a href="#MySQL-序列使用" class="headerlink" title="MySQL 序列使用"></a>MySQL 序列使用</h2><p>MySQL 序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现</p><p>MySQL 中最简单使用序列的方法就是使用 MySQL <strong>AUTO_INCREMENT</strong> 来定义序列：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE insect    -&gt; (    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,    -&gt; PRIMARY KEY (id),    -&gt; name VARCHAR(30) NOT NULL, # type of insect    -&gt; date DATE NOT NULL, # date collected    -&gt; origin VARCHAR(30) NOT NULL # where collected)auto_increment=1;Query OK, 0 rows affected (0.02 sec)mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES    -&gt; (NULL,&#x27;housefly&#x27;,&#x27;2001-09-10&#x27;,&#x27;kitchen&#x27;),    -&gt; (NULL,&#x27;millipede&#x27;,&#x27;2001-09-10&#x27;,&#x27;driveway&#x27;),    -&gt; (NULL,&#x27;grasshopper&#x27;,&#x27;2001-09-10&#x27;,&#x27;front yard&#x27;);Query OK, 3 rows affected (0.02 sec)Records: 3  Duplicates: 0  Warnings: 0mysql&gt; SELECT * FROM insect ORDER BY id;+----+-------------+------------+------------+| id | name        | date       | origin     |+----+-------------+------------+------------+|  1 | housefly    | 2001-09-10 | kitchen    ||  2 | millipede   | 2001-09-10 | driveway   ||  3 | grasshopper | 2001-09-10 | front yard |+----+-------------+------------+------------+3 rows in set (0.00 sec)</code></pre></div><p><strong>注意：</strong> 一般情况下序列的开始值为1，但如果你需要指定一个开始值100，那我们可以通过在 <strong>CREATE TABLE</strong> 末端设置 <strong>auto_increment&#x3D;100</strong> 来实现</p><h2 id="MySQL-元数据"><a href="#MySQL-元数据" class="headerlink" title="MySQL 元数据"></a>MySQL 元数据</h2><p>总之，只要不是我们存储到数据库里的数据，大多都可以理解为元数据。描述数据库的任何数据—作为数据库内容的对立面—是元数据。因此，列名、数据库名、用户名、版本名以及从SHOW语句得到的结果中的大部分字符串是元数据。</p><p>MySQL提供了以下三种方法用于获取数据库对象的元数据：</p><p>1）show语句</p><p>MySQL用show语句获取元数据是最常用的方法，下面提供了几种典型用法：</p><div class="code-wrapper"><pre><code class="hljs mysql">show databases;  --列出所有数据库show create database db_name;  --查看数据库的DDLshow tables; --列出默认数据库的所有表show tables from db_name;  --列出指定数据库的所有表show table status;  --查看表的描述性信息show table status from db_name;show create table tbl_name;  --查看表的DDL (可在末尾加入&#x27;\G&#x27;缩略显示)show columns from tbl_name;  --查看列信息 (等价于 desc tbl_name;)show index from tbl_name;  --查看索引信息</code></pre></div><p>2）从INFORMATION_SCHEMA数据库里查询相关表</p><p>INFORMATION_SCHEMA是MySQL自带的一个系统数据库，它里面存储了所有的元数据，通过select里面的相关表就可以获取你想要的元数据。和show语句相比，它比较麻烦，但它的好处是标准的SQL语句，更具有可移植性，且更灵活，可以通过各种表达式获取你真正需要的信息。</p><p>3）命令行程序，如mysqlshow, mysqldump</p><p>前面两种方法都必须得在MySQL命令行里执行，而mysqlshow和mysqldump提供了从OS命令行获取元数据库的方法，如：</p><div class="code-wrapper"><pre><code class="hljs shell">mysqlshow  --列出所有数据库mysqlshow db_name  --列出给定数据库的所有表mysqlshow db_name tbl_name  --列出给定数据库表的所有列mysqlshow --keys db_name tbl_name  --列出索引信息mysqlshow --status db_name  --列出数据库的描述性信息</code></pre></div><p>mysqldump可以让你看到create table语句（就想show create table语句一样），如：</p><div class="code-wrapper"><pre><code class="hljs shell">mysqldump --no-data db_name [tbl_name] ...</code></pre></div><p>注意：在用mysqldump查看表结构时，一定要加上–no-data，否则你看到的将是数据库表里的数据</p><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><ol><li><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p></li><li><p>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p></li><li><p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p></li><li><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p></li></ol><h3 id="普通索引-INDEX"><a href="#普通索引-INDEX" class="headerlink" title="普通索引 (INDEX)"></a>普通索引 (INDEX)</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE INDEX indexName ON table_name (column_name)</code></pre></div><h4 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h4><div class="code-wrapper"><pre><code class="hljs mysql">ALTER table tableName ADD INDEX indexName(columnName)</code></pre></div><h4 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   INDEX [indexName] (username(length))   );</code></pre></div><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><h4 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h4><div class="code-wrapper"><pre><code class="hljs mysql">DROP INDEX [indexName] ON mytable;</code></pre></div><h3 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引 (UNIQUE)"></a>唯一索引 (UNIQUE)</h3><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><h4 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h4><div class="code-wrapper"><pre><code class="hljs mysql">CREATE UNIQUE INDEX indexName ON mytable(username(length))</code></pre></div><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><div class="code-wrapper"><pre><code class="hljs mysql">ALTER table mytable ADD UNIQUE [indexName] (username(length))</code></pre></div><h4 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h4><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE mytable(   ID INT NOT NULL,    username VARCHAR(16) NOT NULL,   UNIQUE [indexName] (username(length))   );</code></pre></div><h2 id="MySQL-处理重复数据"><a href="#MySQL-处理重复数据" class="headerlink" title="MySQL 处理重复数据"></a>MySQL 处理重复数据</h2><h3 id="避免重复数据"><a href="#避免重复数据" class="headerlink" title="避免重复数据"></a>避免重复数据</h3><p>你可以在 MySQL 数据表中设置指定的字段为 <strong>PRIMARY KEY（主键）</strong> 或者 <strong>UNIQUE（唯一）</strong> 索引来保证数据的唯一性。比如，如果你想设置表中字段 first_name，last_name 数据不能重复，你可以设置双主键模式来设置数据的唯一性， 如果你设置了双主键，那么那个键的默认值不能为 NULL，可设置为 NOT NULL。如下所示：</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE person_tbl(   first_name CHAR(20) NOT NULL,   last_name CHAR(20) NOT NULL,   sex CHAR(10),   PRIMARY KEY (last_name, first_name));</code></pre></div><p>如果我们设置了唯一索引，那么在插入重复数据时，SQL 语句将无法执行成功,并抛出错。</p><p>另一种设置数据的唯一性方法是添加一个 UNIQUE 索引，如下所示：</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE TABLE person_tbl(   first_name CHAR(20) NOT NULL,   last_name CHAR(20) NOT NULL,   sex CHAR(10),   UNIQUE (last_name, first_name));</code></pre></div><h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name    -&gt; FROM person_tbl    -&gt; GROUP BY last_name, first_name    -&gt; HAVING repetitions &gt; 1;</code></pre></div><p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p><ul><li>确定哪一列包含的值可能会重复。</li><li>在列选择列表使用COUNT(*)列出的那些列。</li><li>在GROUP BY子句中列出的列。</li><li>HAVING子句设置重复数大于1。</li></ul><h3 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h3><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT DISTINCT last_name, first_name    -&gt; FROM person_tbl;</code></pre></div><p>你也可以使用 GROUP BY 来读取数据表中不重复的数据：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT last_name, first_name    -&gt; FROM person_tbl    -&gt; GROUP BY (last_name, first_name);</code></pre></div><h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; CREATE TABLE tmp SELECT last_name, first_name, sex FROM person_tbl  GROUP BY (last_name, first_name, sex);mysql&gt; DROP TABLE person_tbl;mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;</code></pre></div><p>当然你也可以在数据表中添加 INDEX（索引） 和 PRIMAY KEY（主键）这种简单的方法来删除表中的重复记录。方法如下：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; ALTER IGNORE TABLE person_tbl    -&gt; ADD PRIMARY KEY (last_name, first_name);</code></pre></div><h2 id="MySQL-数据的导入及导出"><a href="#MySQL-数据的导入及导出" class="headerlink" title="MySQL 数据的导入及导出"></a>MySQL 数据的导入及导出</h2><h3 id="MySQL导出数据"><a href="#MySQL导出数据" class="headerlink" title="MySQL导出数据"></a>MySQL导出数据</h3><h4 id="使用-SELECT-…-INTO-OUTFILE-语句导出数据"><a href="#使用-SELECT-…-INTO-OUTFILE-语句导出数据" class="headerlink" title="使用 SELECT … INTO OUTFILE 语句导出数据"></a>使用 SELECT … INTO OUTFILE 语句导出数据</h4><p>示例：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM runoob_tbl     -&gt; INTO OUTFILE &#x27;/tmp/runoob.txt&#x27;;</code></pre></div><ul><li><strong>LOAD DATA INFILE</strong> 是 <strong>SELECT … INTO OUTFILE</strong> 的逆操作，SELECT句法。为了将一个数据库的数据写入一个文件，使用SELECT … INTO OUTFILE，为了将文件读回数据库，使用LOAD DATA INFILE。</li><li>SELECT…INTO OUTFILE ‘file_name’形式的SELECT可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此您必须拥有FILE权限，才能使用此语法。</li><li>输出不能是一个已存在的文件。防止文件数据被篡改。</li><li>你需要有一个登陆服务器的账号来检索文件。否则 SELECT … INTO OUTFILE 不会起任何作用。</li><li>在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除。</li></ul><h4 id="导出表作为原始数据"><a href="#导出表作为原始数据" class="headerlink" title="导出表作为原始数据"></a>导出表作为原始数据</h4><p><strong>mysqldump</strong> 是 mysql 用于转存储数据库的实用程序。它主要产生一个 SQL 脚本，其中包含从头重新创建数据库所必需的命令 <strong>CREATE TABLE INSERT</strong> 等。</p><p>使用 <strong>mysqldump</strong> 导出数据需要使用 <strong>–tab</strong> 选项来指定导出文件指定的目录，该目标必须是可写的。</p><p>以下实例将数据表 runoob_tbl 导出到 &#x2F;tmp 目录中：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p --no-create-info \</span><span class="language-bash">            --tab=/tmp RUNOOB runoob_tbl</span>password ******</code></pre></div><h4 id="导出SQL格式的数据"><a href="#导出SQL格式的数据" class="headerlink" title="导出SQL格式的数据"></a>导出SQL格式的数据</h4><p>导出 SQL 格式的数据到指定文件，如下所示：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p RUNOOB runoob_tbl &gt; dump.txt</span>password ******</code></pre></div><p>以上创建的文件内容如下：</p><div class="code-wrapper"><pre><code class="hljs mysql">-- MySQL dump 8.23---- Host: localhost    Database: RUNOOB----------------------------------------------------------- Server version       3.23.58---- Table structure for table `runoob_tbl`--CREATE TABLE runoob_tbl (  runoob_id int(11) NOT NULL auto_increment,  runoob_title varchar(100) NOT NULL default &#x27;&#x27;,  runoob_author varchar(40) NOT NULL default &#x27;&#x27;,  submission_date date default NULL,  PRIMARY KEY  (runoob_id),  UNIQUE KEY AUTHOR_INDEX (runoob_author)) TYPE=MyISAM;---- Dumping data for table `runoob_tbl`--INSERT INTO runoob_tbl        VALUES (1,&#x27;Learn PHP&#x27;,&#x27;John Poul&#x27;,&#x27;2007-05-24&#x27;);INSERT INTO runoob_tbl        VALUES (2,&#x27;Learn MySQL&#x27;,&#x27;Abdul S&#x27;,&#x27;2007-05-24&#x27;);INSERT INTO runoob_tbl        VALUES (3,&#x27;JAVA Tutorial&#x27;,&#x27;Sanjay&#x27;,&#x27;2007-05-06&#x27;);</code></pre></div><p>如果你需要导出整个数据库的数据，可以使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p RUNOOB &gt; database_dump.txt</span>password ******</code></pre></div><p>如果需要备份所有数据库，可以使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqldump -u root -p --all-databases &gt; database_dump.txt</span>password ******</code></pre></div><h3 id="MySQL导入数据"><a href="#MySQL导入数据" class="headerlink" title="MySQL导入数据"></a>MySQL导入数据</h3><h4 id="mysql命令导入"><a href="#mysql命令导入" class="headerlink" title="mysql命令导入"></a>mysql命令导入</h4><p>使用 mysql 命令导入语法格式为：</p><div class="code-wrapper"><pre><code class="hljs shell">mysql -u用户名 -p密码 &lt; 要导入的数据库数据(如runoob.sql)</code></pre></div><p><strong>实例：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">mysql -uroot -p123456 &lt; runoob.sql</code></pre></div><p>以上命令将将备份的整个数据库 runoob.sql 导入。</p><h4 id="source命令导入"><a href="#source命令导入" class="headerlink" title="source命令导入"></a>source命令导入</h4><p>source 命令导入数据库需要先登录到数库终端：</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; create database abc;      # 创建数据库mysql&gt; use abc;                  # 使用已创建的数据库 mysql&gt; set names utf8;           # 设置编码mysql&gt; source /home/abc/abc.sql  # 导入备份数据库</code></pre></div><h4 id="使用-LOAD-DATA-导入数据"><a href="#使用-LOAD-DATA-导入数据" class="headerlink" title="使用 LOAD DATA 导入数据"></a>使用 LOAD DATA 导入数据</h4><p>MySQL 中提供了LOAD DATA INFILE语句来插入数据。 以下实例中将从当前目录中读取文件 dump.txt ，将该文件中的数据插入到当前数据库的 mytbl 表中。</p><div class="code-wrapper"><pre><code class="hljs mysql">mysql&gt; LOAD DATA LOCAL INFILE &#x27;dump.txt&#x27; INTO TABLE mytbl;</code></pre></div><p>如果指定LOCAL关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><h4 id="使用-mysqlimport导入数据"><a href="#使用-mysqlimport导入数据" class="headerlink" title="使用 mysqlimport导入数据"></a>使用 mysqlimport导入数据</h4><p>mysqlimport 客户端提供了 LOAD DATA INFILEQL 语句的一个命令行接口。mysqlimport 的大多数选项直接对应 LOAD DATA INFILE 子句。</p><p>从文件 dump.txt 中将数据导入到 mytbl 数据表中, 可以使用以下命令：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqlimport -u root -p --<span class="hljs-built_in">local</span> mytbl dump.txt</span>password *****</code></pre></div><p>mysqlimport 语句中使用 –columns 选项来设置列的顺序：</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mysqlimport -u root -p --<span class="hljs-built_in">local</span> --columns=b,c,a \</span><span class="language-bash">    mytbl dump.txt</span>password *****</code></pre></div><h4 id="mysqlimport的常用选项介绍"><a href="#mysqlimport的常用选项介绍" class="headerlink" title="mysqlimport的常用选项介绍"></a>mysqlimport的常用选项介绍</h4><table><thead><tr><th align="center">选项</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">-d or –delete</td><td align="left">新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td align="center">-f or –force</td><td align="left">不管是否遇到错误，mysqlimport将强制继续插入数据</td></tr><tr><td align="center">-i or –ignore</td><td align="left">mysqlimport跳过或者忽略那些有相同唯一 关键字的行， 导入文件中的数据将被忽略。</td></tr><tr><td align="center">-l or -lock-tables</td><td align="left">数据被插入之前锁住表，这样就防止了， 你在更新数据库时，用户的查询和更新受到影响。</td></tr><tr><td align="center">-r or -replace</td><td align="left">这个选项与－i选项的作用相反；此选项将替代 表中有相同唯一关键字的记录。</td></tr><tr><td align="center">–fields-enclosed- by&#x3D; char</td><td align="left">指定文本文件中数据的记录时以什么括起的， 很多情况下 数据以双引号括起。 默认的情况下数据是没有被字符括起的。</td></tr><tr><td align="center">–fields-terminated- by&#x3D;char</td><td align="left">指定各个数据的值之间的分隔符，在句号分隔的文件中， 分隔符是句号。您可以用此选项指定数据之间的分隔符。 默认的分隔符是跳格符（Tab）</td></tr><tr><td align="center">–lines-terminated- by&#x3D;str</td><td align="left">此选项指定文本文件中行与行之间数据的分隔字符串 或者字符。 默认的情况下mysqlimport以newline为行分隔符。 您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table><p>mysqlimport 命令常用的选项还有 -v 显示版本（version）， -p 提示输入密码（password）等。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初试强化学习 - Gym框架搭建倒立摆实验</title>
    <link href="/2021/05/30/%E5%88%9D%E8%AF%95%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%20-%20Gym%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%80%92%E7%AB%8B%E6%91%86%E5%AE%9E%E9%AA%8C/"/>
    <url>/2021/05/30/%E5%88%9D%E8%AF%95%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%20-%20Gym%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%80%92%E7%AB%8B%E6%91%86%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="初试强化学习-Gym框架搭建倒立摆实验"><a href="#初试强化学习-Gym框架搭建倒立摆实验" class="headerlink" title="初试强化学习 - Gym框架搭建倒立摆实验"></a>初试强化学习 - Gym框架搭建倒立摆实验</h1><p><img src="https://i.loli.net/2021/05/30/ALI9mtPFM7EDsTo.gif" alt="img"></p><p><strong>摘要：</strong></p><p>​    OpenAI Gym是一款用于研发和比较强化学习算法的工具包，本文主要介绍Gym仿真环境的搭建、功能和工具包的使用方法，并详细介绍其中的经典控制问题中的倒立摆（CartPole）问题。最后针对强化学习方法解决倒立摆问题给出自己的理解，并给出了相应的完整python代码示例和解释。</p><p><strong>一些资源：</strong></p><ul><li>OpenAI Gym官方docs：<a href="https://gym.openai.com/docs/">Documentation</a></li><li>OpenAI Gym官方提供的仿真环境：<a href="https://gym.openai.com/envs/#classic_control">Environments</a></li><li>DQN解决倒立摆问题：<a href="https://github.com/zacdeng/Reinforcement-learning">博主自己的github仓库</a></li></ul><h2 id="Gym框架安装及简单demo示例"><a href="#Gym框架安装及简单demo示例" class="headerlink" title="Gym框架安装及简单demo示例"></a>Gym框架安装及简单demo示例</h2><h3 id="Anaconda环境"><a href="#Anaconda环境" class="headerlink" title="Anaconda环境"></a>Anaconda环境</h3><p>为了方便环境的管理，养成良好的习惯，强烈建议学习和使用Anaconda环境！</p><p>Anaconda的安装请参考这篇文章：<a href="https://zhuanlan.zhihu.com/p/75717350">Anaconda3安装及配置</a></p><h3 id="利用Anaconda新建虚拟环境"><a href="#利用Anaconda新建虚拟环境" class="headerlink" title="利用Anaconda新建虚拟环境"></a>利用Anaconda新建虚拟环境</h3><p>首先创建一个python3.6的Anaconda虚拟环境：</p><div class="code-wrapper"><pre><code class="hljs shell">conda create --name gymTest python=3.6</code></pre></div><p>Anaconda创建虚拟环境的格式为：<code>conda create –-name</code> 你要创建的名字 <code>python=version</code>。比如我创建的虚拟环境名字为gymTest(你可以用自己的环境名）, 用jpython版本号为3.6</p><p>随后激活这个环境：</p><ul><li><strong>Linux，OS X：</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">source activate gymTest</code></pre></div><ul><li><strong>Windows:</strong></li></ul><div class="code-wrapper"><pre><code class="hljs shell">activate gymTest</code></pre></div><p>激活环境后，你在该终端的任何操作仅会影响到该虚拟环境，对本地环境不造成影响。随后强化学习代码中可能需要用到<code>gym</code>、<code>tensorflow</code>等工具包，都只需要在该虚拟环境下安装即可。</p><p>需要进一步了解Anaconda使用方法的可以参考这篇文章：<a href="https://blog.csdn.net/fyuanfena/article/details/52080270">Anaconda常用命令大全</a></p><h3 id="安装Gym"><a href="#安装Gym" class="headerlink" title="安装Gym"></a>安装Gym</h3><p>上一步已经安装并激活了一个虚拟环境<code>gymTest</code>, 在这一步要应用，首先终端<code>cd</code>到想要安装<code>gym</code>包的目录下（根据自己电脑环境选取），<code>gym</code>框架的安装非常简单：</p><p><strong>step 1：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">git clone https://github.com/openai/gym.git</code></pre></div><p><strong>step 2：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">cd gym</code></pre></div><p><strong>step 3：</strong></p><div class="code-wrapper"><pre><code class="hljs shell">pip install -e .[all]</code></pre></div><p><strong>or just：</strong></p><div class="code-wrapper"><pre><code class="hljs powershell">pip install gym</code></pre></div><h3 id="激活一个小车倒立摆系统"><a href="#激活一个小车倒立摆系统" class="headerlink" title="激活一个小车倒立摆系统"></a>激活一个小车倒立摆系统</h3><p>为方便代码的调试和内容注释等，推荐使用<code>jupyter lab</code>或<code>jupyter notebook</code>编写代码，<code>jupyter Notebook</code>是基于网页的用于交互计算的应用程序,其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。当然，直接在终端使用python也可以，下面我们在终端使用python显示一个倒立摆模型：</p><div class="code-wrapper"><pre><code class="hljs python">python <span class="hljs-comment">#在虚拟环境的终端键入python</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#激活python后按以下顺序分别键入代码</span><span class="hljs-keyword">import</span> gymenv = gym.make(‘CartPole-v0’)env.reset()env.render()</code></pre></div><p>通过上面的步骤，我们可以看到一个小车倒立摆系统，如下图所示：</p><p><img src="https://i.loli.net/2021/05/30/7UztO3WAmRLI6SK.png" alt="image-20210530111403907"></p><p><strong>注：</strong></p><p>本文后面的内容将使用<code>jupyter notebook</code>进行代码编写和调试，当然你可以在<code>python IDE</code>中自己配置，或者跟本文一样使用<code>jupyter notebook</code>，其安装步骤如下：</p><div class="code-wrapper"><pre><code class="hljs shell">activate gymTest</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">pip3 install jupyter</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">jupyter notebook #启用jupyter notebook, 默认端口是http://localhost:8888, 直接网页登陆即可</code></pre></div><p>其实在哪个环境下安装<code>jupyter</code>都无所谓，在网页端可以直接切换虚拟环境。</p><p>具体的<code>jupyter notebook</code>安装和使用可以参考这篇文章：<a href="https://www.jianshu.com/p/91365f343585">Jupyter Notebook介绍、安装及使用教程</a></p><h2 id="OpenAI-Gym仿真环境介绍"><a href="#OpenAI-Gym仿真环境介绍" class="headerlink" title="OpenAI Gym仿真环境介绍"></a>OpenAI Gym仿真环境介绍</h2><p>简单来说<code>OpenAI Gym</code>提供了许多问题和环境（或游戏）的接口，而用户无需过多了解游戏的内部实现，通过简单地调用就可以用来测试和仿真。接下来以经典控制问题<code>CartPole-v0</code>为例，简单了解一下<code>Gym</code>的特点，以下代码来自<a href="http://gym.openai.com/docs/"><em>OpenAI Gym</em>官方文档</a></p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gymenv = gym.make(<span class="hljs-string">&#x27;CartPole-v0&#x27;</span>)env.reset()<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):    env.render()    env.step(env.action_space.sample()) <span class="hljs-comment"># take a random action</span>env.close()</code></pre></div><p><img src="https://i.loli.net/2021/05/30/1lKnwVBa78thMuH.gif" alt="图片展示"></p><p> 以上代码中可以看出，<em>gym</em>的核心接口是<em>Env</em>。作为统一的环境接口，<em>Env</em>包含下面几个核心方法：</p><ul><li>reset(self)：重置环境的状态，返回观察。</li><li>step(self, action)：推进一个时间步长，返回observation, reward, done, info。</li><li>render(self, mode&#x3D;‘human’, close&#x3D;False)：重绘环境的一帧。默认模式一般比较友好，如弹出一个窗口。</li><li>close(self)：关闭环境，并清除内存。</li></ul><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>在上面代码中使用了env.step()函数来对每一步进行仿真，在Gym中，env.step()会返回 4 个参数：</p><ul><li>观测 Observation (Object)：当前step执行后，环境的观测(类型为对象)。例如，从相机获取的像素点，机器人各个关节的角度或棋盘游戏当前的状态等；</li><li>奖励 Reward (Float): 执行上一步动作(action)后，智能体( agent)获得的奖励(浮点类型)，不同的环境中奖励值变化范围也不相同，但是强化学习的目标就是使得总奖励值最大；</li><li>完成 Done (Boolen): 表示是否需要将环境重置 env.reset。大多数情况下，当 Done 为True 时，就表明当前回合(episode)或者试验(tial)结束。例如当机器人摔倒或者掉出台面，就应当终止当前回合进行重置(reset);</li><li>信息 Info (Dict): 针对调试过程的诊断信息。在标准的智体仿真评估当中不会使用到这个info，具体用到的时候再说。</li></ul><p>总结来说，这就是一个强化学习的基本流程，即”<em>agent-environment loop</em>“，在每个时间点上，智能体（可以认为是你写的算法）选择一个动作（<em>action</em>），环境返回上一次<em>action</em>的观测（State）和奖励（<em>Reward</em>），用图可以表示为：</p><p><img src="https://i.loli.net/2021/05/30/dmx9VCpBUE5XZQe.png" alt="image-20210530124249897"></p><h3 id="Spaces"><a href="#Spaces" class="headerlink" title="Spaces"></a>Spaces</h3><p>在前面的例子中每次执行的动作(action)都是从环境动作空间中随机进行选取的<code>env.action_space.sample()</code>，在 Gym 的仿真环境中，有运动空间 <code>action_space</code> 和观测空间 <code>observation_space</code> 两个指标，程序中被定义为 Space类型，用于描述有效的运动和观测的格式和范围。下面是一个代码示例：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gymenv = gym.make(<span class="hljs-string">&#x27;CartPole-v0&#x27;</span>)<span class="hljs-built_in">print</span>(env.action_space)<span class="hljs-comment">#&gt; Discrete(2)</span><span class="hljs-built_in">print</span>(env.observation_space)<span class="hljs-comment">#&gt; Box(4,)</span></code></pre></div><p>从程序运行结果可以看出：</p><ul><li><code>action_space </code>是一个离散<code>Discrete</code>类型，从discrete.py源码可知，范围是一个{0,1,…,n-1} 长度为 n 的非负整数集合，在<code>CartPole-v0</code>例子中，动作空间表示为{0,1}。</li><li><code>observation_space</code> 是一个<code>Box</code>类型，从box.py源码可知，表示一个 n 维的盒子，所以在上一节打印出来的observation是一个长度为 4 的数组。数组中的每个元素都具有上下界。</li></ul><h3 id="“CartPole-v0”模型仿真过程"><a href="#“CartPole-v0”模型仿真过程" class="headerlink" title="“CartPole-v0”模型仿真过程"></a>“CartPole-v0”模型仿真过程</h3><p>在 <em>Gym</em> 仿真中，每一次回合开始，需要先执行 <code>reset()</code> 函数，返回初始观测信息，然后根据标志位 <code>done</code> 的状态，来决定是否进行下一次回合。所以更恰当的方法是遵守 <code>done</code> 的标志，同样我们可以参考<a href="http://gym.openai.com/docs/"><em>OpenAI Gym</em>官方文档</a>中的代码如下</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gymenv = gym.make(<span class="hljs-string">&#x27;CartPole-v0&#x27;</span>)<span class="hljs-keyword">for</span> i_episode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):    observation = env.reset()    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):        env.render()        <span class="hljs-built_in">print</span>(observation)        action = env.action_space.sample()        observation, reward, done, info = env.step(action)        <span class="hljs-keyword">if</span> done:            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Episode finished after &#123;&#125; timesteps&quot;</span>.<span class="hljs-built_in">format</span>(t+<span class="hljs-number">1</span>))            <span class="hljs-keyword">break</span>env.close()</code></pre></div><p>在 <code>CartPole-v0</code> 模型中，当 <code>done</code> 为真时，表示倒立摆控制失败，此阶段 <em>episode</em> 结束。可以计算每 <em>episode</em> 的回报就是其坚持的 <em>t+1</em> 时间，坚持的越久回报越大，在上面算法中，<em>agent</em> 的行为选择是随机的，平均回报为20左右。</p><h2 id="DQN算法解决倒立摆问题"><a href="#DQN算法解决倒立摆问题" class="headerlink" title="DQN算法解决倒立摆问题"></a>DQN算法解决倒立摆问题</h2><h3 id="DQN算法基础原理"><a href="#DQN算法基础原理" class="headerlink" title="DQN算法基础原理"></a>DQN算法基础原理</h3><p>DQN是强化学习的经典算法，有能力的同学可以直接从这个算法开始入手接触强化学习，DQN原理这部分内容建议看以下这系列博客，博主已经介绍得非常详细了：</p><p><a href="https://zhuanlan.zhihu.com/p/21262246">DQN（一）DQN与增强学习</a><br><a href="https://zhuanlan.zhihu.com/p/21292697">DQN（二）增强学习和MDP</a><br><a href="https://zhuanlan.zhihu.com/p/21340755">DQN（三）价值函数和Bellman方程</a><br><a href="https://zhuanlan.zhihu.com/p/21378532">DQN（四）动态规划和Q-learning</a><br><a href="https://zhuanlan.zhihu.com/p/21421729">DQN（五）深度解读DQN算法</a><br><a href="https://zhuanlan.zhihu.com/p/21547911">DQN（六）DQN的各种改进</a><br><a href="https://zhuanlan.zhihu.com/p/21609472">DQN（七）连续控制DQN算法-NAF</a><br><a href="https://zhuanlan.zhihu.com/p/21477488">DQN（实践）150行代码实现DQN算法玩CartPole</a></p><h3 id="DQN算法在倒立摆模型上的应用"><a href="#DQN算法在倒立摆模型上的应用" class="headerlink" title="DQN算法在倒立摆模型上的应用"></a>DQN算法在倒立摆模型上的应用</h3><p>博主利用 <code>jupyter notebook</code> 加上 <code>Anaconda</code> 搭建的虚拟环境，其中需要用到<code>tensorflow</code>中简单的网络进行训练，需要自行安装<code>tensorflow</code>，方法也很简单：</p><div class="code-wrapper"><pre><code class="hljs shell">activate / source activate gymTest #根据平台激活虚拟环境</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">conda install tensorflow==1.14 #如果要安装指定版本的tensorflow，在后面加上==版本，如装1.14版本的</code></pre></div><p>具体代码如下：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">@ Author: Zachary Deng</span><span class="hljs-string">@ Date: 2021/1/5</span><span class="hljs-string">@ Brief: 使用 DQN 算法训练CartPole-v0</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> gym<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> models, layersenv = gym.make(<span class="hljs-string">&#x27;CartPole-v0&#x27;</span>) <span class="hljs-comment"># 创建倒立摆模型</span>STATE_DIM, ACTION_DIM = <span class="hljs-number">4</span>, <span class="hljs-number">2</span> <span class="hljs-comment"># State 维度 4, Action 维度 2</span>model = models.Sequential([    layers.Dense(<span class="hljs-number">64</span>, input_dim=STATE_DIM, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),    layers.Dense(<span class="hljs-number">20</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),    layers.Dense(ACTION_DIM, activation=<span class="hljs-string">&#x27;linear&#x27;</span>)]) <span class="hljs-comment"># 简单的MLP</span>model.summary()</code></pre></div><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_data_one_episode</span>():    <span class="hljs-string">&#x27;&#x27;&#x27;生成单次游戏的训练数据&#x27;&#x27;&#x27;</span>    x, y, score = [], [], <span class="hljs-number">0</span>    obs = env.reset()    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        action = env.action_space.sample()        x.append(obs)        y.append([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> action == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])        obs, reward, done, info = env.step(action)        score += reward        <span class="hljs-keyword">if</span> done:            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">return</span> x, y, score<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_training_data</span>(<span class="hljs-params">expected_score=<span class="hljs-number">100</span></span>):    <span class="hljs-string">&#x27;&#x27;&#x27;生成N次游戏的训练数据，并进行筛选，选择 &gt; 100 的数据作为训练集&#x27;&#x27;&#x27;</span>    data_X, data_Y, scores = [], [], []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):        x, y, score = generate_data_one_episode()        <span class="hljs-keyword">if</span> score &gt; expected_score:            data_X += x            data_Y += y            scores.append(score)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dataset size: &#123;&#125;, max score: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(data_X), <span class="hljs-built_in">max</span>(scores)))    <span class="hljs-keyword">return</span> np.array(data_X), np.array(data_Y)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">data_X, data_Y = generate_training_data()model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;mse&#x27;</span>, optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>)model.fit(data_X, data_Y, epochs=<span class="hljs-number">5</span>)model.save(<span class="hljs-string">&#x27;CartPole-v0-nn.h5&#x27;</span>)</code></pre></div><div class="code-wrapper"><pre><code class="hljs python">saved_model = models.load_model(<span class="hljs-string">&#x27;CartPole-v0-nn.h5&#x27;</span>)  <span class="hljs-comment"># 加载模型</span>env = gym.make(<span class="hljs-string">&quot;CartPole-v0&quot;</span>)  <span class="hljs-comment"># 加载游戏环境</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):    obs = env.reset()    score = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        time.sleep(<span class="hljs-number">0.01</span>)        env.render()   <span class="hljs-comment"># 显示画面</span>        action = np.argmax(saved_model.predict(np.array([obs]))[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 预测动作</span>        obs, reward, done, info = env.step(action)  <span class="hljs-comment"># 执行这个动作</span>        score += reward     <span class="hljs-comment"># 每回合的得分</span>        <span class="hljs-keyword">if</span> done:       <span class="hljs-comment"># 游戏结束</span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;using nn, score: &#x27;</span>, score)  <span class="hljs-comment"># 打印分数</span>            <span class="hljs-keyword">break</span>env.close()</code></pre></div><p>最终的训练效果展示：</p><p><img src="https://i.loli.net/2021/05/30/olLXbsYJDf7kvAU.gif" alt="倒立摆_after training"></p><p>其实不只是DQN算法，PPO、A2C、A3C等算法在倒立摆这种简单得仿真环境下效果都很不错，可以利用倒立摆模型进行算法的学习，当然也可以选择动作和状态空间更为复杂的环境进行测试，这里给一些demo，可以参考<a href="https://github.com/zacdeng/Reinforcement-learning">博主的github仓库</a></p><p><img src="https://i.loli.net/2021/05/30/l59o8kbvXwauOiB.gif" alt="202105301"></p><p>当然也有相对复杂一点的仿真环境，比如机械臂和机械手：</p><p><img src="https://i.loli.net/2021/05/30/p2ogPUjTzEDyMn6.gif" alt="202105302"></p>]]></content>
    
    
    <categories>
      
      <category>Reinforcement Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reinforcement Learning</tag>
      
      <tag>Gym</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora使用说明</title>
    <link href="/2021/04/28/Typora%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/04/28/Typora%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Typora使用说明"><a href="#Typora使用说明" class="headerlink" title="Typora使用说明"></a>Typora使用说明</h1><p><img src="https://i.loli.net/2021/04/27/2MAV5XWyazorfTj.png" alt="image-20210427192259735"></p><ul><li><p>Typora官网链接：<a href="https://typora.io/">Typora</a></p></li><li><p>使用说明：<a href="https://sspai.com/post/54912">Typora完全使用详解</a></p></li></ul><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，且是<strong>完全免费</strong>的</p><h3 id="Typora快捷键使用"><a href="#Typora快捷键使用" class="headerlink" title="Typora快捷键使用"></a>Typora快捷键使用</h3><h5 id="（一）菜单栏"><a href="#（一）菜单栏" class="headerlink" title="（一）菜单栏"></a>（一）菜单栏</h5><ul><li><p>文件：alt+F</p></li><li><p>编辑：alt+E</p></li><li><p>段落：alt+P</p></li><li><p>格式：alt+O</p></li><li><p>视图：alt+V</p></li><li><p>主题：alt+T</p></li><li><p>帮助：alt+H</p></li></ul><h5 id="（二）文件"><a href="#（二）文件" class="headerlink" title="（二）文件"></a>（二）文件</h5><ul><li><p>新建：Ctrl+N</p></li><li><p>新建窗口：Ctrl+Shift+N</p></li><li><p>打开：Ctrl+O</p></li><li><p>快速打开：Ctrl+P</p></li><li><p>保存：Ctrl+S</p></li><li><p>另存为：Ctrl+Shift+S</p></li><li><p>偏好：Ctrl+,</p></li><li><p>关闭：Ctrl+W</p></li></ul><h5 id="（三）编辑"><a href="#（三）编辑" class="headerlink" title="（三）编辑"></a>（三）编辑</h5><ul><li><p>撤销：Ctrl+Z</p></li><li><p>重做：Ctrl+Y</p></li><li><p>剪切：Ctrl+X</p></li><li><p>复制：Ctrl+C</p></li><li><p>粘贴：Ctrl+V</p></li><li><p>复制为MarkDown：Ctrl+Shift+C</p></li><li><p>粘贴为纯文本：Ctrl+Shift+V</p></li><li><p>全选：Ctrl+A</p></li><li><p>选中当前行&#x2F;句：Ctrl+L</p></li><li><p>选中当前格式文本：Ctrl+E</p></li><li><p>选中当前词：Ctrl+D</p></li><li><p>跳转到文首：Ctrl+Home</p></li><li><p>跳转到所选内容：Ctrl+J</p></li><li><p>跳转到文末：Ctrl+End</p></li><li><p>查找：Ctrl+F</p></li><li><p>查找下一个：F3</p></li><li><p>查找上一个：Shift+F3</p></li><li><p>替换：Ctrl+H</p></li></ul><h5 id="（四）段落"><a href="#（四）段落" class="headerlink" title="（四）段落"></a>（四）段落</h5><ul><li><p>标题：Ctrl+1&#x2F;2&#x2F;3&#x2F;4&#x2F;5</p></li><li><p>段落：Ctrl+0</p></li><li><p>增大标题级别：Ctrl+&#x3D;</p></li><li><p>减少标题级别：Ctrl+-</p></li><li><p>表格：Ctrl+T</p></li><li><p>代码块：Ctrl+Shift+K</p></li><li><p>公式块：Ctrl+Shift+M</p></li><li><p>引用：Ctrl+Shift+Q</p></li><li><p>有序列表：Ctrl+Shift+[</p></li><li><p>无序列表：Ctrl+Shift+]</p></li><li><p>增加缩进：Ctrl+]</p></li><li><p>减少缩进：Ctrl+[</p></li></ul><h5 id="（五）格式"><a href="#（五）格式" class="headerlink" title="（五）格式"></a>（五）格式</h5><ul><li><p>加粗：Ctrl+B</p></li><li><p>斜体：Ctrl+I</p></li><li><p>下划线：Ctrl+U</p></li><li><p>代码：Ctrl+Shift+&#96;</p></li><li><p>删除线：Alt+Shift+5</p></li><li><p>超链接：Ctrl+K</p></li><li><p>图像：Ctrl+Shift+I</p></li><li><p>清除样式：Ctrl+</p></li></ul><h5 id="（六）视图"><a href="#（六）视图" class="headerlink" title="（六）视图"></a>（六）视图</h5><ul><li><p>显示隐藏侧边栏：Ctrl+Shift+L</p></li><li><p>大纲视图：Ctrl+Shift+1</p></li><li><p>文档列表视图：Ctrl+Shift+2</p></li><li><p>文件树视图：Ctrl+Shift+3</p></li><li><p>源代码模式：Ctrl+&#x2F;</p></li><li><p>专注模式：F8</p></li><li><p>打字机模式：F9</p></li><li><p>切换全屏：F11</p></li><li><p>实际大小：Ctrl+Shift+0</p></li><li><p>放大：Ctrl+Shift+&#x3D;</p></li><li><p>缩小：Ctrl+Shift+-</p></li><li><p>应用内窗口切换：Ctrl+Tab</p></li><li><p>打开DevTools：Shift+F12</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS中的OpenCV摄像头标定（二）</title>
    <link href="/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS中的OpenCV摄像头标定（二）"><a href="#ROS中的OpenCV摄像头标定（二）" class="headerlink" title="ROS中的OpenCV摄像头标定（二）"></a>ROS中的OpenCV摄像头标定（二）</h1><p>上一篇博客介绍了ROS中利用OpenCV例程进行摄像头标定的方法：<a href="https://zacdeng.github.io/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%B8%80%EF%BC%89/">ROS中的OpenCV摄像头标定（一）</a>, 这篇博客将介绍如何使用 <code>Camera Calibration</code> 功能包进行摄像头标定</p><p>ros wiki上的参考教程：</p><p><a href="http://wiki.ros.org/camera_calibration/Tutorials/MonocularCalibration">单目摄像机标定例程</a></p><p><a href="http://wiki.ros.org/camera_calibration/Tutorials/StereoCalibration">双目摄像机标定例程</a></p><h3 id="（一）图像读取"><a href="#（一）图像读取" class="headerlink" title="（一）图像读取"></a>（一）图像读取</h3><p>使用<code>usb_cam</code>读取图像，launch文件如下：</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">launch</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;device&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;/dev/video0&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usb_cam_node&quot;</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;usb_cam&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;usb_cam_node&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;screen&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;video_device&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$(arg device)&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image_width&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;640&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image_height&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;480&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;framerate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;brightness&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;128&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;contrast&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;128&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;saturation &quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;70&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">launch</span>&gt;</span></code></pre></div><p><code>usb_cam</code> pkg安装方法如下：</p><ol><li><p>直接用apt-get install命令</p><div class="code-wrapper"><pre><code class="hljs shell">sudo apt-get install ros-melodic-usb-cam</code></pre></div></li><li><p>下载github源码后编译</p><div class="code-wrapper"><pre><code class="hljs shell">git clone https://github.com/ros-drivers/usb_cam.git</code></pre></div></li></ol><p>安装后通过<code>ls /dev/video*</code>查看一下是否有驱动</p><h3 id="（二）检查usb-cam-package发布的消息"><a href="#（二）检查usb-cam-package发布的消息" class="headerlink" title="（二）检查usb_cam package发布的消息"></a>（二）检查usb_cam package发布的消息</h3><div class="code-wrapper"><pre><code class="hljs shell">rostopic list</code></pre></div><p>查看是否有如下消息，并记住他们的名称：</p><blockquote><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usb_cam_node/</span>camera_info<span class="hljs-regexp">/usb_cam_node/im</span>age_raw</code></pre></div></blockquote><h3 id="（三）运行标定程序"><a href="#（三）运行标定程序" class="headerlink" title="（三）运行标定程序"></a>（三）运行标定程序</h3><div class="code-wrapper"><pre><code class="hljs shell">rosrun camera_calibration cameracalibrator.py --size 11x8 --square 0.03 image:=/usb_cam_node/image_raw camera:=/usb_cam_node</code></pre></div><p>其中参数<code>size 11x8 </code>注意是棋盘<strong>内部角点</strong>个数，如下图所示。square为棋盘正方形边长，注意刚刚开始标定的时候，CALIBRATE按钮是灰色的。</p><p><img src="https://i.loli.net/2021/04/27/qmrBTegh9dt5REy.png" alt="image-20210427190108017"></p><h3 id="（四）标定程序使用方法"><a href="#（四）标定程序使用方法" class="headerlink" title="（四）标定程序使用方法"></a>（四）标定程序使用方法</h3><p>为了得到一个好的标定结果，应该使得标定板尽量出现在摄像头视野的各个位置里：如标定板出现在视野中的左边，右边，上边和下边，标定板既有倾斜的，也有水平的</p><ul><li>x：表示标定板在视野中的左右位置</li><li>y：表示标定板在视野中的上下位置</li><li>size：标定板在占视野的尺寸大小，也可以理解为标定板离摄像头的远近</li><li>skew：标定板在视野中的倾斜位置</li></ul><p><img src="https://i.loli.net/2021/04/27/tU34B5HXsQi72jd.png" alt="image-20210427190324982"></p><p>并<strong>还要有棋盘占住大部分视野的图片</strong>，如下图所示：</p><p><img src="https://i.loli.net/2021/04/27/GPpmgT9HfusoNAJ.png" alt="image-20210427190350831"></p><p>按着上述方式不断移动标定板，直到<strong>CALIBRATE</strong>按钮变亮，点击该按钮就会进行标定。标定过程将持续一两分钟，并且标定界面会变成灰色，无法进行操作，耐心等待即可。</p><p>标定完成以后，你将看到如下图所示的窗口，窗口中的图像为<strong>标定后的结果，纠正了畸变</strong>。</p><p><img src="https://i.loli.net/2021/04/27/p6tL3xIlVXkDbBO.png" alt="image-20210427190421560"></p><p>并且，摄像机的各个参数会出现在标定程序的终端窗口中，如下:</p><p><img src="https://i.loli.net/2021/04/27/r8CYGKj5w6zPxcS.png" alt="image-20210427190448127"></p><p>如果对标定结果满意，点击<strong>COMMIT</strong>按钮将结果保存到默认文件夹，在usb_cam窗口中可以看到如下信息，说明标定结果已经保存在相应文件夹下下次启动usb_cam节点时，会自动调用。</p><p><img src="https://i.loli.net/2021/04/27/Eynj1pNVWYlghPb.png" alt="image-20210427190508838"></p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS中的OpenCV摄像头标定（一）</title>
    <link href="/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS中的OpenCV摄像头标定（一）"><a href="#ROS中的OpenCV摄像头标定（一）" class="headerlink" title="ROS中的OpenCV摄像头标定（一）"></a>ROS中的OpenCV摄像头标定（一）</h1><p>摄像头是一种非常精密的光学仪器，它对外界环境的感知是非常敏感的。由于摄像头内部和外部的一些原因，生成的物体图像常常会发生一定的畸变，例如在鱼眼摄像头，畸变是非常大的，如果直接将采集到的图像拿来进行图像处理的话，会产生很大的问题，为了避免数据源造成的误差，需要针对摄像头的参数进行标定。</p><p>对于OpenCV摄像头标定的内容提供两个不同的方法，分别是利用OpenCV例程进行标定和利用<code>Camera Calibration</code>功能包进行标定，这篇内容讲述利用OpenCV例程进行标定，利用<code>Camera Calibration</code>进行标定的内容参考<a href="https://zacdeng.github.io/2021/04/27/ROS%E4%B8%AD%E7%9A%84OpenCV%E6%91%84%E5%83%8F%E5%A4%B4%E6%A0%87%E5%AE%9A%EF%BC%88%E4%BA%8C%EF%BC%89/">ROS中的OpenCV摄像头标定（二）</a></p><h2 id="利用OpenCV例程进行标定"><a href="#利用OpenCV例程进行标定" class="headerlink" title="利用OpenCV例程进行标定"></a>利用OpenCV例程进行标定</h2><p>参考博客：<a href="https://www.jianshu.com/p/9a4d9f9dfedc">OpenCV摄像头标定</a></p><p>本文介绍使用OpenCV自带的标定例程对单目摄像头标定的过程</p><h3 id="设备说明"><a href="#设备说明" class="headerlink" title="设备说明"></a>设备说明</h3><p><strong>操作系统：</strong>Ubuntu 18.04</p><p><strong>OpenCV版本：</strong> 3.2.0</p><p><strong>摄像头：</strong> 640×480像素，90度广角镜头</p><h3 id="（一）标定步骤"><a href="#（一）标定步骤" class="headerlink" title="（一）标定步骤"></a>（一）标定步骤</h3><h4 id="1、标定例程"><a href="#1、标定例程" class="headerlink" title="1、标定例程"></a>1、标定例程</h4><p>进入你的OpenCV安装目录，找到<code>samples/cpp/tutorial_code/calib3d/camera_calibration</code>目录，把它拷贝到一个合适的位置。（因为可能需要修改一些代码，因此不建议直接在原目录下使用。）</p><h4 id="2、修改标定配置参数"><a href="#2、修改标定配置参数" class="headerlink" title="2、修改标定配置参数"></a>2、修改标定配置参数</h4><p>找到<code>camera_calibration/in_VID5.xml</code>文件，这是标定程序使用的配置文件，需要设置里面的几个参数。</p><ol><li><p>棋盘格的宽度和高度。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Number of inner corners per a item row and column. (square, circle) --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BoardSize_Width</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">BoardSize_Width</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BoardSize_Height</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">BoardSize_Height</span>&gt;</span></code></pre></div><p>需要特别注意的是，这里的宽度和高度是指内部交叉点的个数，而不是方形格的个数。如下图所示的棋盘格，内部交叉点的宽度是9，高度是6。请务必填写正确，否则无法标定。</p><p><img src="https://i.loli.net/2021/04/27/bnWJLOfU2MRwmKY.png" alt="image-20210427162038800"></p></li><li><p>每格的宽度</p><p>每格的宽度应设置为实际的毫米数，该参数的实际用途尚待考证。目前看来，即使设置的不准确也无大碍。</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- The size of a square in some user defined metric system (pixel, millimeter)--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Square_Size</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">Square_Size</span>&gt;</span></code></pre></div></li><li><p>选择输入方式</p><p>例程提供了三种输入方式。不过，如果待标定的摄像头已经接入电脑，建议使用input camera方式。该方式只需要设置视频输入设备号，对于笔记本电脑来说，通常0表示笔记本自带摄像头，1表示外接摄像头。</p><div class="code-wrapper"><pre><code class="hljs html">  <span class="hljs-comment">&lt;!-- The input to use for calibration. </span><span class="hljs-comment">        To use an input camera -&gt; give the ID of the camera, like &quot;1&quot;</span><span class="hljs-comment">        To use an input video  -&gt; give the path of the input video, like &quot;/tmp/x.avi&quot;</span><span class="hljs-comment">        To use an image list   -&gt; give the path to the XML or YAML file containing the list of the images, like &quot;/tmp/circles_list.xml&quot;</span><span class="hljs-comment">        --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Input</span>&gt;</span>&quot;1&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">Input</span>&gt;</span></code></pre></div><p>如果不知道自己的设备号，可以通过下面指令查询</p><div class="code-wrapper"><pre><code class="hljs shell">ls /dev</code></pre></div></li></ol><h4 id="3、编译"><a href="#3、编译" class="headerlink" title="3、编译"></a>3、编译</h4><p>新建<code>camera_calibration/CMakeLists.txt</code>文件，写入如下内容。</p><div class="code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">project</span>(Camera_Calibration)<span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">11</span>)<span class="hljs-keyword">find_package</span>(OpenCV <span class="hljs-number">3.0</span> QUIET)<span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> OpenCV_FOUND)    <span class="hljs-keyword">find_package</span>(OpenCV <span class="hljs-number">2.4</span>.<span class="hljs-number">3</span> QUIET)    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> OpenCV_FOUND)        <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)    <span class="hljs-keyword">endif</span>()<span class="hljs-keyword">endif</span>()<span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;OpenCV_INCLUDE_DIR&#125;</span>)<span class="hljs-keyword">add_executable</span>(Camera_Calibration camera_calibration.cpp)<span class="hljs-keyword">target_link_libraries</span>(Camera_Calibration <span class="hljs-variable">$&#123;OpenCV_LIBS&#125;</span>)</code></pre></div><p>编译</p><div class="code-wrapper"><pre><code class="hljs shell">zacdeng@zacdeng-PC:camera_calibration/build$ cmake ..zacdeng@zacdeng-PC:camera_calibration/build$ make</code></pre></div><h4 id="4、运行"><a href="#4、运行" class="headerlink" title="4、运行"></a>4、运行</h4><p>运行时需要传入配置文件：</p><div class="code-wrapper"><pre><code class="hljs shell">zacdeng@zacdeng-PC:camera_calibration/build$ ./Camera_Calibration ../in_VID5.xml</code></pre></div><p>程序启动后会出现当前摄像头拍摄到的画面，右下角有操作提示。按下键盘’q’键开始标定。请务必使摄像头从不同方向拍摄棋盘格，以保证程序准确计算图像畸变。共拍摄25张照片后自动结束标定，标定结果写入<code>camera_calibration/out_camera_data.xml</code>。此时，为了查看标定效果，可以按下键盘’u’键，画面将切换到去畸变后的图像，如果畸变完全消除，则标定成功，否则应该重新标定。</p><p>这里有一些注意事项：</p><ul><li>可以直接在另一台电脑屏幕上显示棋盘格，而不必打印出来。屏幕上显示的棋盘格更平整，不会引入额外的误差。</li><li>要在上下左右各个角度拍摄棋盘格，以减少各个图片间的相关性，有利于求解相机参数和畸变系数。</li></ul><p>现在，就可以使用标定好的相机内参和畸变系数啦！</p><h3 id="（二）相机去畸变"><a href="#（二）相机去畸变" class="headerlink" title="（二）相机去畸变"></a>（二）相机去畸变</h3><p>有了标定好的参数，如何把输入图片的畸变去除呢？其实很简单，只需要调用OpenCV提供的一个函数就可以了：</p><div class="code-wrapper"><pre><code class="hljs python">cv2.undistort(frame,mK,mDistCoef,<span class="hljs-literal">None</span>,mK)</code></pre></div><p>其中frame为原图片，mK为相机内参数矩阵，mDistCoef为畸变矩阵。后两个矩阵都可以在<code>camera_calibration/out_camera_data.xml</code>中找到。</p><p>下面给出一个我自己使用的例程：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># @Author  : Zachary Deng</span><span class="hljs-comment"># @Email   : zacdeng0720@gmail.com</span><span class="hljs-comment"># @Time    : 2021/4/20 12:00</span><span class="hljs-comment"># @Function: OpenCV标定应用及二维码识别</span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> cv2<span class="hljs-keyword">import</span> pyzbar.pyzbar <span class="hljs-keyword">as</span> pyzbarmDistCoef = np.array([ -<span class="hljs-number">4.1802327018241026e-001</span>, <span class="hljs-number">5.0715243805833121e-001</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>,       -<span class="hljs-number">5.7843596847939704e-001</span> ])mK = np.array([ [<span class="hljs-number">6.5746697810243404e+002</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">3.1950000000000000e+002</span>],[ <span class="hljs-number">0.</span>,       <span class="hljs-number">6.5746697810243404e+002</span>, <span class="hljs-number">2.3950000000000000e+002</span>], [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span> ]]) <span class="hljs-keyword">def</span> <span class="hljs-title function_">decodeDisplay</span>(<span class="hljs-params">image</span>):    barcodes = pyzbar.decode(image)    <span class="hljs-keyword">for</span> barcode <span class="hljs-keyword">in</span> barcodes:        <span class="hljs-comment"># 提取二维码的边界框的位置</span>        <span class="hljs-comment"># 画出图像中条形码的边界框</span>        (x, y, w, h) = barcode.rect        cv2.rectangle(image, (x, y), (x + w, y + h), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)         <span class="hljs-comment"># 提取二维码数据为字节对象，所以如果我们想在输出图像上</span>        <span class="hljs-comment"># 画出来，就需要先将它转换成字符串</span>        barcodeData = barcode.data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)        barcodeType = barcode.<span class="hljs-built_in">type</span>         <span class="hljs-comment"># 绘出图像上条形码的数据和条形码类型</span>        text = <span class="hljs-string">&quot;&#123;&#125; (&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(barcodeData, barcodeType)        cv2.putText(image, text, (x, y - <span class="hljs-number">10</span>), cv2.FONT_HERSHEY_SIMPLEX,                    <span class="hljs-number">.5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">125</span>), <span class="hljs-number">2</span>)         <span class="hljs-comment"># 向终端打印条形码数据和条形码类型</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[INFO] Found &#123;&#125; barcode: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(barcodeType, barcodeData))    <span class="hljs-keyword">return</span> image  <span class="hljs-keyword">def</span> <span class="hljs-title function_">detect</span>():    camera = cv2.VideoCapture(<span class="hljs-number">0</span>)     <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        <span class="hljs-comment"># 读取当前帧</span>        ret, frame = camera.read()        <span class="hljs-comment">#frame = cv2.imread(&quot;/home/ucar/Documents/temp/1.png&quot;)</span>        <span class="hljs-comment"># 转为灰度图像</span>        dst=cv2.undistort(frame,mK,mDistCoef,<span class="hljs-literal">None</span>,mK)        gray = cv2.cvtColor(dst, cv2.COLOR_BGR2GRAY)        im = decodeDisplay(gray)         cv2.waitKey(<span class="hljs-number">5</span>)        cv2.imshow(<span class="hljs-string">&quot;camera&quot;</span>, im)     camera.release()    cv2.destroyAllWindows()  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    detect()</code></pre></div><h3 id="（三）效果展示"><a href="#（三）效果展示" class="headerlink" title="（三）效果展示"></a>（三）效果展示</h3><p>标定前：</p><p><img src="https://i.loli.net/2021/04/27/rAhCDQY5wnJo82X.png" alt="image-20210427163419209"></p><p>标定后：</p><p><img src="https://i.loli.net/2021/04/27/f4pTMkWjFzSYm8G.png" alt="image-20210427163441436"></p><h3 id="（四）理论知识——相机模型"><a href="#（四）理论知识——相机模型" class="headerlink" title="（四）理论知识——相机模型"></a>（四）理论知识——相机模型</h3><p>光会用还不够，我们应该至少了解为什么需要标定，标定有什么用。</p><p>简单来说，标定是为了能够从空间点的像素坐标映射到世界坐标，这是3D立体视觉必须经过的过程。这一过程需要三步，第一步从畸变的像素坐标映射到去畸变的像素坐标，需要用到畸变矩阵mDistCoef；第二步从去畸变的像素坐标映射到相机坐标，需要用到相机内参数矩阵mK；第三步从相机坐标映射到世界坐标，需要用到相机外参数矩阵，也就是相机位姿变换矩阵。下图展示了第二步和第三步的过程。</p><p><img src="https://i.loli.net/2021/04/27/g6b8ytukIp1eOG9.png" alt="image-20210427163537718"></p><p>更详细的内容请参考：<a href="https://www.zhihu.com/question/29448299">机器视觉的相机标定到底是什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS语音交互 —— sound_play</title>
    <link href="/2021/04/25/ROS%E8%AF%AD%E9%9F%B3%E4%BA%A4%E4%BA%92%E6%95%99%E7%A8%8B-sound_play/"/>
    <url>/2021/04/25/ROS%E8%AF%AD%E9%9F%B3%E4%BA%A4%E4%BA%92%E6%95%99%E7%A8%8B-sound_play/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS语音交互-sound-play"><a href="#ROS语音交互-sound-play" class="headerlink" title="ROS语音交互 - sound_play"></a>ROS语音交互 - sound_play</h1><h2 id="Introduction-of-sound-play-package"><a href="#Introduction-of-sound-play-package" class="headerlink" title="Introduction of sound_play package"></a>Introduction of sound_play package</h2><p><code>audio_common</code>是一个第三方音频开发包，它实现了音频驱动以及相关的 ROS 消息机制。它包含如下几个库：<br>1）audio_capture: 从麦克风采集声音<br>2）audio_play: 从 audio_capture 收集声音并通过声卡播放<br>3）audio_common_msgs: 声音传输的消息定义<br>4）sound_play: 播放声音和语音合成</p><p>我们这里主要使用的是最后这个<code>sound_play</code>，它的主要的功能包括：<br>1）声卡驱动；<br>2）播放声音（wav、ogg）；<br>3）语音合成（仅限英文）<br>同时它支持 C++ 以及 python 接口，使得开发者可以不用关心底层的驱动和算法。</p><p><code>sound_play</code>提供一个node，可以把topic中的commands转化为语音， 该node支持内建语音，播放OGG&#x2F;WAV文件，以及通过festival做语音合成功能。</p><p>参考链接：</p><ul><li><p><a href="http://wiki.ros.org/sound_play">sound_play - ROS wiki</a></p></li><li><p><a href="https://blog.csdn.net/x_r_su/article/details/53025375">ROS语音合成 - sound_play应用</a></p></li><li><p><a href="http://www.liuxiao.org/2015/11/ros-%E5%AE%89%E8%A3%85-sound_play-%E9%A9%B1%E5%8A%A8%E5%8F%8A%E6%92%AD%E6%94%BE%E3%80%81%E5%90%88%E6%88%90%E5%A3%B0%E9%9F%B3/">ros安装sound_play及播放合成声音</a></p></li><li><p><a href="https://github.com/ros-drivers/audio_common">source - github</a></p></li></ul><hr><h2 id="Install-sound-play"><a href="#Install-sound-play" class="headerlink" title="Install sound_play"></a>Install sound_play</h2><h3 id="下载-sound-play-功能包并编译"><a href="#下载-sound-play-功能包并编译" class="headerlink" title="下载 sound_play 功能包并编译"></a>下载 sound_play 功能包并编译</h3><p>1）新建一个<code>~/ros_workspace/src/</code>目录后从github直接clone</p><div class="code-wrapper"><pre><code class="hljs shell">git clone https://github.com/ros-drivers/audio_common.git</code></pre></div><p>2）返回<code>~/ros_workspace/</code>目录下使用rosdep安装依赖</p><div class="code-wrapper"><pre><code class="hljs shell">rosdep install sound_play</code></pre></div><p>如果所有依赖库都已安装会显示，没有的话会自行安装：</p><blockquote><p>#All required rosdeps installed successfully</p></blockquote><p>3）最后在同一目录下编译即可：</p><div class="code-wrapper"><pre><code class="hljs shell">catkin_make</code></pre></div><h3 id="Usages"><a href="#Usages" class="headerlink" title="Usages"></a>Usages</h3><h4 id="Test-for-sound-play"><a href="#Test-for-sound-play" class="headerlink" title="Test for sound_play"></a>Test for sound_play</h4><p>1）运行roscore：</p><div class="code-wrapper"><pre><code class="hljs shell">roscore</code></pre></div><p>2）新开一个terminal窗口并cd到之前创建的<code>~/ros_workspace/</code>目录下source：</p><div class="code-wrapper"><pre><code class="hljs shell">source devel/setup.bash</code></pre></div><p>3）启动节点：</p><div class="code-wrapper"><pre><code class="hljs shell">rosrun sound_play soundplay_node.py</code></pre></div><p>如果显示类似以下信息则表示节点打开成功：</p><blockquote><p>[INFO] [WallTime: 1448443557.340794] sound_play node is ready to play sound</p></blockquote><h4 id="Play-sound"><a href="#Play-sound" class="headerlink" title="Play sound"></a>Play sound</h4><p>1）测试播放内置声音：</p><p>我们使用系统内置的声音进行播放，运行如下命令：</p><div class="code-wrapper"><pre><code class="hljs shell">rosrun sound_play playbuiltin.py 2</code></pre></div><p>如果听到两声锣声则表示运行成功。</p><p>2）测试播放 WAV 或 MP3 等声音：</p><p>使用 play.py 这个例子即可，后面的是我的 wav 文件路径，使用时修改成自己的：</p><div class="code-wrapper"><pre><code class="hljs shell">rosrun sound_play play.py /home/zacdeng/Music/a2002011001-e02-ulaw.wav</code></pre></div><p>**注意：文件路径必须是绝对路径，不要使用<code>~/</code> **</p><p>或者播放 MP3 文件：</p><div class="code-wrapper"><pre><code class="hljs shell">rosrun sound_play play.py /home/zacdeng/Music/a2002011001-e02-128k.mp3</code></pre></div><p>正常情况下它会显示：</p><blockquote><p>Playing “&#x2F;home&#x2F;zacdeng&#x2F;Music&#x2F;a2002011001-e02-128k.mp3”.</p></blockquote><p>3）测试语音合成：</p><p>这是比较吸引人的一个功能，它使用了 <code>text2wave</code> 库将一段文本转成语音再进行播放。调用的例子如下：</p><div class="code-wrapper"><pre><code class="hljs shell">rosrun sound_play say.py &#x27;Hello world&#x27;</code></pre></div><p>正常情况下它会显示：</p><blockquote><p>Saying: Hello World<br>Voice: voice_kal_diphone<br>Volume: 1.0</p></blockquote><p><strong>注意：输入文本必须是英文，暂时不能播放中文</strong></p><p>如果你听到一段蹩脚的英文朗读 Hello World 那么这个例子你也运行成功了。由于音频库大小问题，这个合成效果可能不太自然，有兴趣的同学可以根据 <a href="http://ubuntuforums.org/showthread.php?t=751169">参考</a> 研究下 <code>text2wave</code> 库怎么替换下别的声音。</p><p>大概整个使用流程就是这么多了，如果有遇到其他问题可以参考上面提到的博客！Good Luck！</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
      <tag>sound_play</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git首次配置远程仓库</title>
    <link href="/2021/04/24/git%E9%A6%96%E6%AC%A1%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2021/04/24/git%E9%A6%96%E6%AC%A1%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="git首次配置远程仓库"><a href="#git首次配置远程仓库" class="headerlink" title="git首次配置远程仓库"></a>git首次配置远程仓库</h1><p>这篇内容面向首次使用git的初学者，将解释如何正常的使用github仓库</p><h2 id="配置全局用户名和邮箱"><a href="#配置全局用户名和邮箱" class="headerlink" title="配置全局用户名和邮箱"></a>配置全局用户名和邮箱</h2><p>其中user.name为你的github账户名，email为你的github邮箱</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global user.name &quot;zacdeng&quot;git config --global user.email &quot;xxx@gmail.com&quot;</code></pre></div><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><div class="code-wrapper"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;zacdeng0720@gmail.com&quot;cat ~/.ssh/id_rsa.pub</code></pre></div><p><img src="https://i.loli.net/2021/04/24/zvdrM3A2iSZP4L7.png" alt="image-20210424141420517"></p><p>随后将得到的密钥配置到远程仓库的SSH Keys中</p><p><img src="https://i.loli.net/2021/04/24/TPV8Rvgih6kOdFM.png" alt="image-20210424141521813"></p><p><img src="https://i.loli.net/2021/04/24/bukc7BAsq1nUevp.png"></p><p>其中Title最好设置为你的设备名，做好相应标识方便以后修改时认得出</p><h2 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><div class="code-wrapper"><pre><code class="hljs shell">git init</code></pre></div><h3 id="放入暂存区"><a href="#放入暂存区" class="headerlink" title="放入暂存区"></a>放入暂存区</h3><div class="code-wrapper"><pre><code class="hljs shell">git add . (表示暂存所有文件)git add 某个文件名称</code></pre></div><p>如果出现：<code>warning: LF will be replaced by CRLF in &#39;xxx&#39; </code>错误时，原因是因为Windows和Linux提交时的换行符不一样，解决方法：</p><div class="code-wrapper"><pre><code class="hljs shell">git config --global core.autocwenrlf false</code></pre></div><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p>git commit 主要是将暂存区里的改动给提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里.</p><div class="code-wrapper"><pre><code class="hljs shell">git commit -m &#x27;输入备注内容&#x27;</code></pre></div><div class="code-wrapper"><pre><code class="hljs shell">git push (-u) origin master</code></pre></div><p>第一次配置时会要求输入github账户名和密码，正常输入即可</p><h3 id="git配置记住用户名和密码"><a href="#git配置记住用户名和密码" class="headerlink" title="git配置记住用户名和密码"></a>git配置记住用户名和密码</h3><div class="code-wrapper"><pre><code class="hljs shell">git config --global credential.helper store</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（七）- Pure pursuit纯追踪算法</title>
    <link href="/2020/08/06/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%83%EF%BC%89-%20Pure%20pursuit%E7%BA%AF%E8%BF%BD%E8%B8%AA%E7%AE%97%E6%B3%95/"/>
    <url>/2020/08/06/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%83%EF%BC%89-%20Pure%20pursuit%E7%BA%AF%E8%BF%BD%E8%B8%AA%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（七）-Pure-pursuit纯追踪算法"><a href="#racecar仿真竞赛经验总结（七）-Pure-pursuit纯追踪算法" class="headerlink" title="racecar仿真竞赛经验总结（七）- Pure pursuit纯追踪算法"></a>racecar仿真竞赛经验总结（七）- Pure pursuit纯追踪算法</h1><p>前文链接：</p><p><a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><p><a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a></p><p><a href="https://zacdeng.github.io/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/">racecar仿真竞赛经验总结（三）- 激光SLAM建图</a></p><p><a href="https://zacdeng.github.io/2020/08/03/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89-%20AMCL%E4%B8%8E%E5%B0%8F%E8%BD%A6%E5%AE%9A%E4%BD%8D/">racecar仿真竞赛经验总结（四）- AMCL与小车定位</a></p><p><a href="https://zacdeng.github.io/2020/08/04/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89-%20TF%E6%A0%91/">racecar仿真竞赛经验总结（五）- TF树</a></p><p><a href="https://zacdeng.github.io/2020/08/05/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%85%AD%EF%BC%89-%20Navigation%E5%AF%BC%E8%88%AA%E5%8C%85/">racecar仿真竞赛经验总结（六）- Navigation导航包</a></p><h2 id="博文推荐"><a href="#博文推荐" class="headerlink" title="博文推荐"></a>博文推荐</h2><h4 id="原理部分推荐博文："><a href="#原理部分推荐博文：" class="headerlink" title="原理部分推荐博文："></a>原理部分推荐博文：</h4><p>知乎：<a href="https://zhuanlan.zhihu.com/p/48117381">https://zhuanlan.zhihu.com/p/48117381</a></p><p>CSDN：<a href="https://blog.csdn.net/gophae/article/details/100012763">https://blog.csdn.net/gophae/article/details/100012763</a></p><h4 id="Github源码参考链接："><a href="#Github源码参考链接：" class="headerlink" title="Github源码参考链接："></a>Github源码参考链接：</h4><p><a href="https://github.com/jmaye/pure-pursuit-controller-ros">https://github.com/jmaye/pure-pursuit-controller-ros</a></p><p><a href="https://github.com/Hypha-ROS/hypharos_racecar">https://github.com/Hypha-ROS/hypharos_racecar</a></p><p><a href="https://github.com/leggedrobotics/se2_navigation">https://github.com/leggedrobotics/se2_navigation</a></p><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>车辆轨迹跟踪，目前的主流方法分为两类：基于几何追踪的方法和基于模型预测的方法。本文主要介绍基于几何追踪的pure-pursuit（纯跟踪）算法。</p><h3 id="阿克曼转向几何"><a href="#阿克曼转向几何" class="headerlink" title="阿克曼转向几何"></a>阿克曼转向几何</h3><p>首先介绍一下车辆的转向模型–<strong>阿克曼转向几何</strong></p><center>    <img src="https://i.loli.net/2020/08/06/PWR3ZML9wnVlgxG.png" width="380">  <img src="https://i.loli.net/2020/08/06/5YDtXLxK1QHgjfw.png" width="380"></center><p>对转向时（假定小转向角）的正确几何关系，由于内外侧轮胎的转向半径不同，可以得出左右轮转向角为：</p><center><img src="https://i.loli.net/2020/08/06/dvRgexEI3a4jpDQ.png" width="180"></center><center><img src="https://i.loli.net/2020/08/06/G5cNUyuDWRhr8Xt.png" width="190"></center><p>则前轮平均转角为：</p><p><img src="https://i.loli.net/2020/08/06/Zp5qU1uKhWMPs8Y.png" alt="image-20200806112031110"></p><h3 id="自行车模型"><a href="#自行车模型" class="headerlink" title="自行车模型"></a>自行车模型</h3><p>接下来，我们再来看一个阿克曼几何的简化版–车辆单轨模型（即自行车模型）</p><center><img src="https://i.loli.net/2020/08/06/rjPWD4bzLVBvq1I.png" width="450"></center><p>自行车模型实际上是对阿克曼转向几何的一个简化，我们知道，自行车模型将4轮车辆简化成2轮的模型，并且假定车龄只在平面上行驶，采用自行车模型的一大好处就在于它简化了前轮转向角与后轴将遵循的曲率之间的几何关系，其关系如下式所示：</p><img src="https://i.loli.net/2020/08/06/QpkDz1lwc49fId7.png" alt="image-20200806112242669" style="zoom:80%;" /><p>其中δ表示前轮的转角，L为轴距（Wheelbase），R则为在给定的转向角下后轴遵循着的圆的半径。这个公式能够在较低速度的场景下对车辆运动做估计。</p><h3 id="Pure-pursuit纯追踪算法"><a href="#Pure-pursuit纯追踪算法" class="headerlink" title="Pure pursuit纯追踪算法"></a>Pure pursuit纯追踪算法</h3><p>从自行车模型出发，纯跟踪算法以车后轴为切点, 车辆纵向车身为切线, 通过控制前轮转角，使车辆可以沿着一条经过目标路点（goal point）的圆弧行驶，如下图所示：</p><center><img src="https://i.loli.net/2020/08/06/rNYsO5lTcwnyM2a.png" width="450"></center><p>如上，pure pursuit 需要给出预瞄距离Ld，因此后期当工作效果不好的时候可以对这个预瞄距离进行tuning，但是过程繁琐，在某些情况下使用该模型效果不佳。给定预瞄距离后在预定轨迹上获得采样点(gx,gy)。本车的后轴中心，采样点(gx,gy)，以及车辆的运动学半径中心行程三角形，根据sin正弦函数三角公式，获得如下：</p><center><img src="https://i.loli.net/2020/08/06/Bo4j8DSRef2niQP.png" width="250"></center><p>因为道路的曲率：</p><center><img src="https://i.loli.net/2020/08/06/nc8NgKibxZ7RUhG.png" width="80"></center><p>上式也可以表示为：</p><center><img src="https://i.loli.net/2020/08/06/doJZ8pMkFT2GyQU.png" width="150"></center><p>则由自行车模型中的式子 ，可得</p><img src="https://i.loli.net/2020/08/06/3lGmBkieQdECPhf.png" alt="image-20200806113935265" style="zoom:80%;" /><h2 id="改进部分"><a href="#改进部分" class="headerlink" title="改进部分"></a>改进部分</h2><h3 id="引入横向偏差"><a href="#引入横向偏差" class="headerlink" title="引入横向偏差"></a>引入横向偏差</h3><p>我们知道pure pursuit中的控制方法只对角度进行了控制，这种方法在实践中会出现一个弊端，纯在某种情况——小车的角度已经符合要求但并不在所规划的路线上，而是与其平行。我们的改进方法之一就是添加横向偏差，令其自动纠正这种平行的现象</p><p>由于原理相同但实现方法很多，这里引用 <a href="https://blog.csdn.net/gophae/article/details/100012763">博客链接</a> 中的描述——Stanley进行描述</p><img src="https://i.loli.net/2020/08/06/YZcI13A7FxdRoTK.png" alt="image-20200806114312699" style="zoom: 50%;" /><p>Stanley 考虑到了车辆后轴中心与预定轨迹的横向偏差e_fa，车辆头指向与预定轨迹heading angle 方向的夹角，stanley车辆期望转角的第一项为</p><img src="https://i.loli.net/2020/08/06/bxtzpG1g4UKRE7c.png" alt="image-20200806115151112" style="zoom:67%;" /><p>这里，theta为车辆的真实heading angle，theta_p为预定轨迹点的heading angle，差值就是车辆需要被纠正的heading angle。如果横向偏差不为零，车辆期望转角会产生第二个控制量，这个控制量和pure pursuit很相似，由前轴中心对应的车辆预定轨迹点C出，往切线防线延伸预瞄距离L，这里的预瞄距离仍然与车速成正比。于是，两项控制量可合并为：</p><img src="https://i.loli.net/2020/08/06/nfY1DvW2H8GKpoL.png" alt="image-20200806115227666" style="zoom: 62%;" /><p>体现在源码上如下：</p><div class="code-wrapper"><pre><code class="hljs prolog">angle_error = self.determine_steering_angle(self.<span class="hljs-symbol">Pose</span>, self.<span class="hljs-symbol">NextPoint</span>)angle = angle_raw + <span class="hljs-number">0.2215</span>*angle_error# ...def determine_steering_angle(self, pose, lookahead_point):        global steering_angle_last        rot = np.matrix([[np.cos(-pose[<span class="hljs-number">2</span>]), -np.sin(-pose[<span class="hljs-number">2</span>])], [np.sin(-pose[<span class="hljs-number">2</span>]), np.cos(-pose[<span class="hljs-number">2</span>])]]) # [ [a,b] , [c,d] ]        delta = np.matrix([[lookahead_point[<span class="hljs-number">0</span>] - pose[<span class="hljs-number">0</span>]],[lookahead_point[<span class="hljs-number">1</span>] - pose[<span class="hljs-number">1</span>]]])        local_delta = (rot*delta).transpose()        local_delta = np.array([local_delta[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], local_delta[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])        angle_error = self.model.steering_angle(local_delta)        return angle_error</code></pre></div><h3 id="引入前馈控制"><a href="#引入前馈控制" class="headerlink" title="引入前馈控制"></a>引入前馈控制</h3><p>这一块内容是为了给小车一个预先量，防止小车高速过程中无法及时调整其角度和速度</p><p>我们知道阿卡曼模型的小车无论是用TEB和DWA等局部路径规划还是使用纯追踪算法都是需要解算出小车的角度及速度，再发布给小车控制器达到控制小车的目的，而当小车速度达到一定程度时可能会出现控制器输出的角度、速度无法实现及时且精准的控制</p><p>博主是用的纯追踪算法框架，其核心就是追踪路径规划算法规划出的全局&#x2F;局部路径，而路径是以若干个点为元素的数组，我们的做法简单概括就是取包括小车下一目标点在内的多个点一同作为小车angle和velocity输出，在思想上类似于引入前馈控制</p><p>体现在源码上就是</p><div class="code-wrapper"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#Calculate the angle to control</span>angle_to_go = []<span class="hljs-keyword">if</span> goal&gt;=(<span class="hljs-built_in">len</span>(dist_array)<span class="hljs-number">-3</span>):Ls = dist_array[goal]diff_angles = path_points_w[goal] - yaw <span class="hljs-comment"># Find the turning angle</span>rs = Ls/(<span class="hljs-number">2</span>*math.<span class="hljs-built_in">sin</span>(diff_angles)) <span class="hljs-comment"># Calculate the turning radius</span>angle_raw = math.<span class="hljs-built_in">atan</span>(<span class="hljs-number">0.335</span>/rs) <span class="hljs-comment"># Find the wheel turning radius</span><span class="hljs-keyword">else</span>:<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>):Ls = dist_array[goal+i]diff_angles = path_points_w[goal+i] - yaw <span class="hljs-comment"># Find the turning angle</span>rs = Ls/(<span class="hljs-number">2</span>*math.<span class="hljs-built_in">sin</span>(diff_angles)) <span class="hljs-comment"># Calculate the turning radius</span>angles = math.<span class="hljs-built_in">atan</span>(<span class="hljs-number">0.335</span>/rs) <span class="hljs-comment"># Find the wheel turning radius</span>angle_to_go.append(angles)angle_raw = <span class="hljs-number">0.5</span>*angle_to_go[<span class="hljs-number">0</span>] + <span class="hljs-number">0.3</span>*angle_to_go[<span class="hljs-number">1</span>] + <span class="hljs-number">0.2</span>*angle_to_go[<span class="hljs-number">2</span>]<span class="hljs-comment"># ...</span><span class="hljs-comment">#Calculate the velocity to control</span>diff_control_angle_array = []<span class="hljs-comment"># ponits after goal</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>):veclocity_control = self.dist((path_points_x[goal+i], path_points_y[goal+i]), (x,y))control_L = dist_array[goal+i]diff_control_angle = path_points_w[goal+i] - yaw <span class="hljs-comment"># Find the turning angle</span>control_r = control_L/(<span class="hljs-number">2</span>*math.<span class="hljs-built_in">sin</span>(diff_control_angle)) <span class="hljs-comment"># Calculate the turning radius</span>control_angle = math.<span class="hljs-built_in">atan</span>(<span class="hljs-number">0.335</span>/control_r) <span class="hljs-comment"># Find the wheel turning radius</span>diff_control_angle_array.append(control_angle)angle_control = np.mean(diff_control_angle_array)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（六）- Navigation导航包</title>
    <link href="/2020/08/05/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%85%AD%EF%BC%89-%20Navigation%E5%AF%BC%E8%88%AA%E5%8C%85/"/>
    <url>/2020/08/05/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%85%AD%EF%BC%89-%20Navigation%E5%AF%BC%E8%88%AA%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（六）-Navigation导航包"><a href="#racecar仿真竞赛经验总结（六）-Navigation导航包" class="headerlink" title="racecar仿真竞赛经验总结（六）- Navigation导航包"></a>racecar仿真竞赛经验总结（六）- Navigation导航包</h1><p>前文链接：</p><p><a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><p><a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a></p><p><a href="https://zacdeng.github.io/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/">racecar仿真竞赛经验总结（三）- 激光SLAM建图</a></p><p><a href="https://zacdeng.github.io/2020/08/03/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89-%20AMCL%E4%B8%8E%E5%B0%8F%E8%BD%A6%E5%AE%9A%E4%BD%8D/">racecar仿真竞赛经验总结（四）- AMCL与小车定位</a></p><p><a href="https://zacdeng.github.io/2020/08/04/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89-%20TF%E6%A0%91/">racecar仿真竞赛经验总结（五）- TF树</a></p><p>接下来的部分应该算是整个智能车仿真比赛最为核心的部分——move_base（路径规划包）</p><h2 id="move-base-package"><a href="#move-base-package" class="headerlink" title="move_base package"></a>move_base package</h2><h3 id="博文链接"><a href="#博文链接" class="headerlink" title="博文链接"></a>博文链接</h3><p>创客智造Navigation系列教程：<a href="https://www.ncnynl.com/archives/201708/1880.html">https://www.ncnynl.com/archives/201708/1880.html</a></p><p><em>创客智造里面的博文挺老的了可能会有错误，但总体还是挺好的，有比较全的Navigation教程</em></p><p>ROS Navigation github源码包：<a href="https://github.com/ros-planning/navigation">https://github.com/ros-planning/navigation</a></p><p>move_base：</p><ul><li>ROS Wiki：<a href="http://wiki.ros.org/move_base">http://wiki.ros.org/move_base</a></li><li>古月居：<a href="https://www.guyuehome.com/270">https://www.guyuehome.com/270</a></li><li>CSDN：<a href="https://blog.csdn.net/heyijia0327/article/details/41823809">https://blog.csdn.net/heyijia0327/article/details/41823809</a></li></ul><p>TEB local planner：</p><ul><li>ROS Wiki：<a href="http://wiki.ros.org/teb_local_planner">http://wiki.ros.org/teb_local_planner</a></li><li>TEB参数调整 <em>1</em>：<a href="https://blog.csdn.net/Fourier_Legend/article/details/89398485">https://blog.csdn.net/Fourier_Legend/article/details/89398485</a></li><li>TEB参数调整 <em>2</em>：<a href="https://www.knightdusk.cn/2019/06/features-and-tuning-guide-for-teb-local-planner/">https://www.knightdusk.cn/2019/06/features-and-tuning-guide-for-teb-local-planner/</a></li></ul><p>DWA local planner:</p><ul><li><p>ROS Wiki：<a href="http://wiki.ros.org/dwa_local_planner">http://wiki.ros.org/dwa_local_planner</a></p></li><li><p>DWA参数调整：<a href="https://www.ncnynl.com/archives/201708/1906.html">https://www.ncnynl.com/archives/201708/1906.html</a></p><p><em>DWA相较于TEB而言参数比较少，含义也很清晰，网上的资源会比较少一些</em></p></li></ul><p>其他局部路径规划算法：</p><ul><li>古月居：<a href="https://www.guyuehome.com/5500">https://www.guyuehome.com/5500</a></li></ul><h3 id="简单阐述"><a href="#简单阐述" class="headerlink" title="简单阐述"></a>简单阐述</h3><p><img src="https://i.loli.net/2020/08/04/Q6ufzjZVtwkYIT7.png" alt="image-20200804225115898"></p><p>在总体框架图中可以看到，move_base提供了ROS导航的配置、运行、交互接口，它主要包括四个部分：</p><p>（1）全局路径规划（global planner）：根据给定的目标位置进行总体路径的规划；</p><p>（2）本地实时规划（local planner）：根据附近的障碍物进行躲避路线规划。</p><p>（3）全局代价地图（global costmap）：用于在全局地图中将laser扫面数据或者点云数据转化成一个2d的网格地图</p><p>（4）局部代价地图（local costmap）：用于在局部地图中将laser扫面数据或者点云数据转化成一个2d的网格地图</p><p>上图中位于导航功能正中心的蓝色方框是<code>move_base</code>节点，可以理解为一个强大的路径规划器，在实际的导航任务中，你只需要启动这一个node，并且给它提供数据，就可以规划出路径和速度。 <code>move_base</code>之所以能做到路径规划，是因为它包含了很多的插件，像图中的圆圈<code>global_planner</code>、<code>local_planner</code>、<code>global_costmap</code>、<code>local_costmap</code>、<code>recovery_behaviors</code>。这些插件用于负责一些更细微的任务：全局路径规划、局部路径规划、全局代价地图、局部代价地图、恢复行为。而每一个插件其实也都是一个package，放在Navigation Stack里。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>以下配置文件仅针对博主提供的racecar源码包</p><h4 id="move-base启动文件"><a href="#move-base启动文件" class="headerlink" title="move_base启动文件"></a>move_base启动文件</h4><ul><li><p>racecar_runway_navigation.launch 启动move_base节点的launch文件</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Launch the move base with time elastic band--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/use_sim_time&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;move_base&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;move_base&quot;</span> <span class="hljs-attr">respawn</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;move_base&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;screen&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/costmap_common_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> <span class="hljs-attr">ns</span>=<span class="hljs-string">&quot;global_costmap&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/costmap_common_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> <span class="hljs-attr">ns</span>=<span class="hljs-string">&quot;local_costmap&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/local_costmap_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/global_costmap_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/global_planner_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">rosparam</span> <span class="hljs-attr">file</span>=<span class="hljs-string">&quot;$(find racecar_gazebo)/config/teb_local_planner_params.yaml&quot;</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;load&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!--&lt;rosparam file=&quot;$(find racecar_gazebo)/config/dwa_local_planner_params.yaml&quot; command=&quot;load&quot; /&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_global_planner&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;global_planner/GlobalPlanner&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;planner_frequency&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.0&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;planner_patience&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6.0&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!--param name=&quot;use_dijkstra&quot; value=&quot;false&quot; /--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_local_planner&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;teb_local_planner/TebLocalPlannerROS&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!--&lt;param name=&quot;base_local_planner&quot; value=&quot;dwa_local_planner/DWAPlannerROS&quot; /&gt; --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;controller_frequency&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10.0&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- 5.0 15.0 --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;controller_patience&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;15.0&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clearing_rotation_allowed&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span></code></pre></div><p>从上面可以看到，在启动move_base节点时，前四个参数是配置代价地图相关参数，首先加载了costmap_common_params.yaml到global_costmap和local_costmap两个命名空间中，因为该配置文件是一个通用的代价地图配置参数，即local_costmap和global_costmap都需要配置的参数。然后下面的local_costmap_params.yaml是专门为了局部代价地图配置的参数，global_costmap_params.yaml是专门为全局代价地图配置的参数。而后面三个是配置路径规划相关参数。</p></li></ul><h4 id="代价地图配置"><a href="#代价地图配置" class="headerlink" title="代价地图配置"></a>代价地图配置</h4><ul><li><p>costmap_common_params.yaml   代价地图通用配置文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">footprint:</span> [[<span class="hljs-number">0.27</span>,<span class="hljs-number">0.23</span>], [<span class="hljs-number">0.27</span>,<span class="hljs-number">-0.23</span>], [<span class="hljs-number">-0.27</span>,<span class="hljs-number">-0.23</span>], [<span class="hljs-number">-0.27</span>,<span class="hljs-number">0.23</span>]]<span class="hljs-attr">transform_tolerance:</span> <span class="hljs-number">0.2</span><span class="hljs-attr">map_type:</span> <span class="hljs-string">costmap</span><span class="hljs-attr">obstacle_layer:</span> <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-attr">obstacle_range:</span> <span class="hljs-number">3.0</span> <span class="hljs-attr">raytrace_range:</span> <span class="hljs-number">3.5</span> <span class="hljs-attr">inflation_radius:</span> <span class="hljs-number">0.2</span> <span class="hljs-attr">track_unknown_space:</span> <span class="hljs-literal">false</span> <span class="hljs-attr">combination_method:</span> <span class="hljs-number">1</span> <span class="hljs-attr">observation_sources:</span> <span class="hljs-string">laser_scan_sensor</span> <span class="hljs-attr">laser_scan_sensor:</span> &#123;<span class="hljs-attr">data_type:</span> <span class="hljs-string">LaserScan</span>, <span class="hljs-attr">topic:</span> <span class="hljs-string">scan</span>, <span class="hljs-attr">marking:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">clearing:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">truemin_obstacle_height:</span> <span class="hljs-number">-1</span>, <span class="hljs-attr">max_obstacle_height:</span> <span class="hljs-number">1</span>&#125;<span class="hljs-attr">inflation_layer:</span>  <span class="hljs-attr">enabled:</span>              <span class="hljs-literal">true</span>  <span class="hljs-attr">cost_scaling_factor:</span>  <span class="hljs-number">10.0</span>  <span class="hljs-comment"># exponential rate at which the obstacle cost drops off (default: 10)</span>  <span class="hljs-attr">inflation_radius:</span>     <span class="hljs-number">0.45</span>  <span class="hljs-comment"># max. distance from an obstacle at which costs are incurred for planning paths.</span><span class="hljs-attr">static_layer:</span>  <span class="hljs-attr">enabled:</span>              <span class="hljs-literal">true</span>  <span class="hljs-attr">map_topic:</span>            <span class="hljs-string">&quot;/map&quot;</span></code></pre></div><p>下面来依次解释下各参数的意义：</p><ul><li><p><strong>footprint</strong>：每一个坐标代表机器人上的一点，设置机器人的中心为[0,0]，根据机器人不同的形状，找到机器人各凸出的坐标点即可，具体可参考下图来设置(如果是圆形底盘机器人，直接设置半径大小即可：例如 <strong>robot_radius: 0.5</strong>)：</p><p><a href="https://s2.ax1x.com/2019/06/01/V3CLrT.png"><img src="https://i.loli.net/2020/08/04/rIRimT4w2f1GlL9.png" alt="V3CLrT.png"></a></p></li><li><p><strong>map_type</strong>: 地图类型，这里为<code>costmap</code>(代价地图)。另一种地图类型为为<code>voxel</code>(体素地图)。这两者之间的区别是前者是世界的2D表示，后者为世界的3D表示。</p></li><li><p><strong>obstacle_layer</strong>：配置障碍物图层</p><ul><li><em>enabled</em>: 是否启用该层</li><li><em>combination_method(default: 1)</em>: 只能设置为0或1，用来更新地图上的代价值，一般设置为1;</li><li><em>track_unknown_space (default: false)</em>: 如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种。意思是说假如该参数设置为false的话，就意味着地图上的未知区域也会被认为是可以自由移动的区域，这样在进行全局路径规划时，可以把一些未探索的未知区域也来参与到路径规划，如果你需要这样的话就将该参数设置为false。不过一般情况未探索的区域不应该当作可以自由移动的区域，因此一般将该参数设置为true;</li><li><em>obstacle_range(default: 2.5)</em>: 设置机器人检测障碍物的最大范围，意思是说超过该范围的障碍物，并不进行检测，只有靠近到该范围内才把该障碍物当作影响路径规划和移动的障碍物;</li><li><em>raytrace_range(default: 3.0)</em>: 在机器人移动过程中，实时清除代价地图上的障碍物的最大范围，更新可自由移动的空间数据。假如设置该值为3米，那么就意味着在3米内的障碍物，本来开始时是有的，但是本次检测却没有了，那么就需要在代价地图上来更新，将旧障碍物的空间标记为可以自由移动的空间</li><li><em>observation_sources</em>: 设置导航中所使用的传感器，这里可以用逗号形式来区分开很多个传感器，例如激光雷达，碰撞传感器，超声波传感器等，我这里只设置了激光雷达;<ul><li>data_type: 激光雷达数据类型;</li><li>topic: 该激光雷达发布的话题名;</li><li>marking: 是否可以使用该传感器来标记障碍物;</li><li>clearing: 是否可以使用该传感器来清除障碍物标记为自由空间;</li><li><em>max_obstacle_height(default: 2.0)</em>: 以米为单位插入costmap的任何障碍物的最大高度。此参数应设置为略高于机器人的高度。</li><li><em>min_obstacle_height</em>: 传感器读数的最小高度（以米为单位）视为有效。通常设置为地面高度。</li></ul></li></ul></li><li><p><strong>inflation_layer</strong>: 膨胀层，用于在障碍物外标记一层危险区域，在路径规划时需要避开该危险区域</p><ul><li><p><em>enabled</em>: 是否启用该层;</p></li><li><p><em>cost_scaling_factor(default: 10.0)</em>: 膨胀过程中应用到代价值的比例因子，代价地图中到实际障碍物距离在内切圆半径到膨胀半径之间的所有cell可以使用如下公式来计算膨胀代价：</p><p>exp(-1.0 * cost_scaling_factor * (distance_from_obstacle – inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE – 1)</p><p>公式中costmap_2d::INSCRIBED_INFLATED_OBSTACLE目前指定为254，</p><p>注意： 由于在公式中cost_scaling_factor被乘了一个负数，所以增大比例因子反而会降低代价。</p></li><li><p><em>inflation_radius(default: 0.55)</em>: 膨胀半径，膨胀层会把障碍物代价膨胀直到该半径为止，一般将该值设置为机器人底盘的直径大小。</p></li></ul></li><li><p><strong>Static_layer</strong>: 静态地图层，即SLAM中构建的地图层</p><ul><li><em>enabled</em>: 是否启用该地图层;</li></ul></li></ul></li><li><p>global_costmap_params.yaml   全局代价地图配置文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">global_costmap:</span>  <span class="hljs-attr">global_frame:</span> <span class="hljs-string">map</span>  <span class="hljs-attr">robot_base_frame:</span> <span class="hljs-string">base_footprint</span>  <span class="hljs-attr">update_frequency:</span> <span class="hljs-number">3.0</span>  <span class="hljs-attr">publish_frequency:</span> <span class="hljs-number">2.0</span>  <span class="hljs-attr">static_map:</span> <span class="hljs-literal">true</span>   <span class="hljs-attr">transform_tolerance:</span> <span class="hljs-number">0.5</span>  <span class="hljs-attr">plugins:</span>    <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">static_layer</span>,            <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;costmap_2d::StaticLayer&quot;</span>&#125;    <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">obstacle_layer</span>,          <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;costmap_2d::VoxelLayer&quot;</span>&#125;    <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">inflation_layer</span>,         <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;costmap_2d::InflationLayer&quot;</span>&#125;</code></pre></div><p>下面是该全局代价地图配置文件中各参数的意义：</p><ul><li><strong>global_frame</strong>：全局代价地图需要在哪个坐标系下运行；</li><li><strong>robot_base_frame</strong>：在全局代价地图中机器人本体的基坐标系，就是机器人上的根坐标系。通过global_frame和robot_base_frame就可以计算两个坐标系之间的变换，得知机器人在全局坐标系中的坐标了；</li><li><strong>update_frequency</strong>：全局代价地图更新频率(单位:Hz），一般全局代价地图更新频率设置的比较小；</li><li><strong>publish_frequency</strong>：全局代价地图发布的频率(单位:Hz）。</li><li><strong>static_map</strong>：配置是否使用map_server提供的地图来初始化;如果不需要使用已有的地图或者map_server，最好设置为false；</li><li><strong>rolling_window</strong>：是否在机器人移动过程中需要滚动窗口，始终保持机器人在当前窗口中心位置；</li><li><strong>transform_tolerance</strong>：坐标系间的转换可以忍受的最大延时。</li><li><strong>plugins</strong>：在global_costmap中使用下面三个插件来融合三个不同图层，分别是static_layer、obstacle_layer和inflation_layer，合成一个master_layer来进行全局路径规划。</li></ul></li><li><p>local_costmap_params.yaml   本地代价地图配置文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">local_costmap:</span>  <span class="hljs-attr">global_frame:</span> <span class="hljs-string">map</span>  <span class="hljs-attr">robot_base_frame:</span> <span class="hljs-string">base_footprint</span>  <span class="hljs-attr">update_frequency:</span> <span class="hljs-number">5.0</span>  <span class="hljs-attr">publish_frequency:</span> <span class="hljs-number">3.0</span>  <span class="hljs-attr">static_map:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">rolling_window:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">width:</span> <span class="hljs-number">5.0</span>  <span class="hljs-attr">height:</span> <span class="hljs-number">5.0</span>  <span class="hljs-attr">resolution:</span> <span class="hljs-number">0.1</span>  <span class="hljs-attr">transform_tolerance:</span> <span class="hljs-number">0.5</span>    <span class="hljs-attr">plugins:</span>   <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">static_layer</span>,        <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;costmap_2d::StaticLayer&quot;</span>&#125;   <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">obstacle_layer</span>,      <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;costmap_2d::ObstacleLayer&quot;</span>&#125;</code></pre></div><p>下面是详细解释每个参数的意义：</p><ul><li><strong>global_frame</strong>：在局部代价地图中的全局坐标系，一般需要设置为odom_frame;</li><li><strong>robot_base_frame</strong>：机器人本体的基坐标系;</li><li><strong>update_frequency</strong>：局部代价地图的更新频率;</li><li><strong>publish_frequency</strong>：局部代价地图的发布频率;</li><li><strong>static_map</strong>：局部代价地图一般不设置为静态地图，因为需要检测是否在机器人附近有新增的动态障碍物;</li><li><strong>rolling_window</strong>：使用滚动窗口，始终保持机器人在当前局部地图的中心位置;</li><li><strong>width</strong>：滚动窗口的宽度，单位是米;</li><li><strong>height</strong>：滚动窗口的高度，单位是米;</li><li><strong>resolution</strong>：地图的分辨率，该分辨率可以从加载的地图相对应的配置文件中获取到;</li><li><strong>transform_tolerance</strong>：局部代价地图中的坐标系之间转换的最大可忍受延时;</li><li><strong>plugins</strong>：在局部代价地图中，不需要静态地图层，因为我们使用滚动窗口来不断的扫描障碍物，所以就需要融合两层地图（inflation_layer和obstacle_layer）即可，融合后的地图用于进行局部路径规划。</li></ul></li></ul><h4 id="全局规划器配置"><a href="#全局规划器配置" class="headerlink" title="全局规划器配置"></a>全局规划器配置</h4><ul><li><p>global_planner_params.yaml  全局路径规划配置文件</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">GlobalPlanner:</span>  <span class="hljs-attr">allow_unknown:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">default_tolerance:</span> <span class="hljs-number">0.2</span>  <span class="hljs-attr">visualize_potential:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">use_dijkstra:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">use_quadratic:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">use_grid_path:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">old_navfn_behavior:</span> <span class="hljs-literal">false</span>   <span class="hljs-attr">lethal_cost:</span> <span class="hljs-number">253</span>  <span class="hljs-attr">neutral_cost:</span> <span class="hljs-number">66</span>  <span class="hljs-attr">cost_factor:</span> <span class="hljs-number">0.55</span>    <span class="hljs-attr">publish_potential:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">orientation_mode:</span> <span class="hljs-number">0</span>  <span class="hljs-attr">orientation_window_size:</span> <span class="hljs-number">1</span></code></pre></div><p>下面来依次解释下各参数意义：</p><ul><li><strong>allow_unknown(default: true)</strong>: 是否允许规划器规划穿过未知区域的路径,只设计该参数为true还不行,还要在costmap_commons_params.yaml中设置track_unknown_space参数也为false才行。</li><li><strong>default_tolerance(default: 0.0)</strong>: 当设置的目的地被障碍物占据时,需要以该参数为半径寻找到最近的点作为新目的地点.</li><li><strong>visualize_potential(default: false)</strong>: 是否显示从PointCloud2计算得到的势区域.</li><li><strong>use_dijkstra(default: true)</strong>: 如果设置为true,将使用dijkstra算法,否则使用A*算法.</li><li><strong>use_quadratic(default: true)</strong>: 如果设置为true,将使用二次函数近似函数,否则使用更加简单的计算方式,这样节省硬件计算资源.</li><li><strong>use_grid_path(default: false)</strong>: 如果如果设置为true,则会规划一条沿着网格边界的路径,偏向于直线穿越网格,否则将使用梯度下降算法,路径更为光滑点.</li><li><strong>old_navfn_behavior(default: false)</strong>: 若在某些情况下,想让global_planner完全复制navfn的功能,那就设置为true,但是需要注意navfn是非常旧的ROS系统中使用的,现在已经都用global_planner代替navfn了,所以不建议设置为true.</li><li><strong>lethal_cost(default: 253)</strong>: 致命代价值</li><li><strong>neutral_cost(default: 50)</strong>: 中等代价值</li><li><strong>cost_factor(default: 3.0)</strong>: 代价地图与每个代价值相乘的因子</li><li><strong>publish_potential(default: true)</strong>: 是否发布costmap的势函数</li><li><strong>orientation_mode(default: 0)</strong>: 如何设置每个点的方向（None &#x3D; 0,Forward &#x3D; 1,Interpolate &#x3D; 2,ForwardThenInterpolate &#x3D; 3,Backward &#x3D; 4,Leftward &#x3D; 5,Rightward &#x3D; 6）</li><li><strong>orientation_window_size(default: 1)</strong>: 根据orientation_mode指定的位置积分来得到使用窗口的方向。</li></ul></li></ul><h4 id="局部规划器配置"><a href="#局部规划器配置" class="headerlink" title="局部规划器配置"></a>局部规划器配置</h4><ul><li><p>teb_local_planner_params.yaml TEB局部路径规划配置文件</p><p><em>关于teb和dwa的调参同样可以使用rqt_reconfigure实现</em></p><p><img src="https://i.loli.net/2020/08/05/x6IunsDvTafHgSB.png" alt="image-20200805150542853"></p></li></ul><p>关于TEB_local_planner的调整网上有很多但都参差不齐，大家可以自己google一下，博主提供的源码包里没有用teb进行运动控制，只利用了它规划出的局部路径所以这一块也没有调的很明白，我把ROS Wiki上的teb_local_planner参数说明做了一个表方便大家查阅：</p><table><thead><tr><th>参数</th><th>类型</th><th>含义</th><th>最小</th><th>默认</th><th>最大</th></tr></thead><tbody><tr><td>teb_autosize</td><td>bool</td><td>优化期间允许改变轨迹的时域长度；Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended)</td><td>False</td><td>True</td><td>True</td></tr><tr><td>dt_ref</td><td>double</td><td>局部路径规划的解析度;Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1&#x2F;control_rate)</td><td>0.01</td><td>0.3</td><td>1.0</td></tr><tr><td>dt_hysteresis</td><td>double</td><td>允许改变的时域解析度的浮动范围， 一般为 dt_ref 的 10% 左右; Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref</td><td>0.002</td><td>0.1</td><td>0.5</td></tr><tr><td>global_plan_overwrite_orientation</td><td>bool</td><td>覆盖全局路径中局部路径点的朝向，Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically</td><td>False</td><td>True</td><td>True</td></tr><tr><td>allow_init_with_backwards_motion</td><td>bool</td><td>允许在开始时想后退来执行轨迹，If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors)</td><td>False</td><td>False</td><td>True</td></tr><tr><td>max_global_plan_lookahead_dist</td><td>double</td><td>考虑优化的全局计划子集的最大长度（累积欧几里得距离）（如果为0或负数：禁用；长度也受本地Costmap大小的限制）， Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size ]</td><td>0.0</td><td>3.0</td><td>50.0</td></tr><tr><td>force_reinit_new_goal_dist</td><td>double</td><td>如果上一个目标的间隔超过指定的米数（跳过热启动），则强制规划器重新初始化轨迹，Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting)</td><td>0.0</td><td>1.0</td><td>10.0</td></tr><tr><td>feasibility_check_no_poses</td><td>int</td><td>检测位姿可到达的时间间隔，Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval</td><td>0</td><td>5</td><td>50</td></tr><tr><td>exact_arc_length</td><td>bool</td><td>如果为真，规划器在速度、加速度和转弯率计算中使用精确的弧长[-&gt;增加的CPU时间]，否则使用欧几里德近似。If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-&gt; increased cpu time], otherwise the euclidean approximation is used.</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><table><thead><tr><th>publish_feedback</th><th>bool</th><th>发布包含完整轨迹和活动障碍物列表的规划器反馈，Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes)</th><th>False</th><th>False</th><th>True</th></tr></thead><tbody><tr><td>visualize_with_time_as_z_axis_scale</td><td>double</td><td>如果该值大于0，则使用该值缩放的Z轴的时间在3D中可视化轨迹和障碍物。最适用于动态障碍。 If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles.</td><td>0.0</td><td>0.0</td><td>1.0</td></tr><tr><td>global_plan_viapoint_sep</td><td>double</td><td>从全局计划中提取的每两个连续通过点之间的最小间隔[如果为负：禁用]， Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]</td><td>-0.1</td><td>-0.1</td><td>5.0</td></tr><tr><td>via_points_ordered</td><td>bool</td><td>如果为真，规划器遵循存储容器中通过点的顺序。If true, the planner adheres to the order of via-points in the storage container</td><td>False</td><td>False</td><td>True</td></tr><tr><td>max_vel_x</td><td>double</td><td>最大x前向速度，Maximum translational velocity of the robot</td><td>0.01</td><td>0.4</td><td>100.0</td></tr><tr><td>max_vel_x_backwards</td><td>double</td><td>最大x后退速度，Maximum translational velocity of the robot for driving backwards</td><td>0.01</td><td>0.2</td><td>100.0</td></tr><tr><td>max_vel_theta</td><td>double</td><td>最大转向叫速度 Maximum angular velocity of the robot</td><td>0.01</td><td>0.3</td><td>100.0</td></tr><tr><td>acc_lim_x</td><td>double</td><td>最大x加速度，Maximum translational acceleration of the robot</td><td>0.01</td><td>0.5</td><td>100.0</td></tr><tr><td>acc_lim_theta</td><td>double</td><td>最大角速度，Maximum angular acceleration of the robot</td><td>0.01</td><td>0.5</td><td>100.0</td></tr><tr><td>is_footprint_dynamic</td><td>bool</td><td>是否footprint 为动态的，If true, updated the footprint before checking trajectory feasibility</td><td>False</td><td>False</td><td>True</td></tr></tbody></table><table><thead><tr><th>min_turning_radius</th><th>double</th><th><strong>车类机器人的最小转弯半径，Minimum turning radius of a carlike robot (diff-drive robot: zero)</strong></th><th>0.0</th><th>0.0</th><th>50.0</th></tr></thead><tbody><tr><td>wheelbase</td><td>double</td><td>驱动轴和转向轴之间的距离（仅适用于启用了“Cmd_angle_而不是_rotvel”的Carlike机器人）；对于后轮式机器人，该值可能为负值！ The distance between the drive shaft and steering axle (only required for a carlike robot with ‘cmd_angle_instead_rotvel’ enabled); The value might be negative for back-wheeled robots</td><td>-10.0</td><td>1.0</td><td>10.0</td></tr><tr><td>cmd_angle_instead_rotvel</td><td>bool</td><td>将收到的角速度消息转换为 操作上的角度变化。 Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check ‘axles_distance’)</td><td>False</td><td>False</td><td>True</td></tr><tr><td>max_vel_y</td><td>double</td><td>最大y方向速度， Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)</td><td>0.0</td><td>0.0</td><td>100.0</td></tr><tr><td>acc_lim_y</td><td>double</td><td>最大y向加速度， Maximum strafing acceleration of the robot</td><td>0.01</td><td>0.5</td><td>100.0</td></tr><tr><td>xy_goal_tolerance</td><td>double</td><td>目标 xy 偏移容忍度，Allowed final euclidean distance to the goal position</td><td>0.001</td><td>0.2</td><td>10.0</td></tr><tr><td>yaw_goal_tolerance</td><td>double</td><td>目标 角度 偏移容忍度， Allowed final orientation error to the goal orientation</td><td>0.001</td><td>0.1</td><td>3.2</td></tr><tr><td>free_goal_vel</td><td>bool</td><td>允许机器人以最大速度驶向目的地， Allow the robot’s velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed)</td><td>False</td><td>False</td><td>True</td></tr><tr><td>min_obstacle_dist</td><td>double</td><td>和障碍物最小距离， Minimum desired separation from obstacles</td><td>0.0</td><td>0.5</td><td>10.0</td></tr><tr><td>inflation_dist</td><td>double</td><td>障碍物膨胀距离， Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)</td><td>0.0</td><td>0.6</td><td>15.0</td></tr></tbody></table><table><thead><tr><th align="left">include_dynamic_obstacles</th><th>bool</th><th>是否将动态障碍物预测为速度模型， Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static.</th><th>False</th><th>False</th><th>True</th></tr></thead><tbody><tr><td align="left">include_costmap_obstacles</td><td>bool</td><td>costmap 中的障碍物是否被直接考虑， Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented)</td><td>False</td><td>True</td><td>True</td></tr><tr><td align="left">legacy_obstacle_association</td><td>bool</td><td>是否严格遵循局部规划出来的路径， If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only ‘relevant’ obstacles).</td><td>False</td><td>False</td><td>True</td></tr><tr><td align="left">obstacle_association_force_inclusion_factor</td><td>double</td><td>The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist.</td><td>0.0</td><td>1.5</td><td>100.0</td></tr><tr><td align="left">obstacle_association_cutoff_factor</td><td>double</td><td>See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first.</td><td>1.0</td><td>5.0</td><td>100.0</td></tr><tr><td align="left">costmap_obstacles_behind_robot_dist</td><td>double</td><td>Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters)</td><td>0.0</td><td>1.5</td><td>20.0</td></tr><tr><td align="left">obstacle_poses_affected</td><td>int</td><td>The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well</td><td>0</td><td>30</td><td>200</td></tr><tr><td align="left">no_inner_iterations</td><td>int</td><td>被外循环调用后内循环执行优化次数， Number of solver iterations called in each outerloop iteration</td><td>1</td><td>5</td><td>100</td></tr><tr><td align="left">no_outer_iterations</td><td>int</td><td>执行的外循环的优化次数， Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations</td><td>1</td><td>4</td><td>100</td></tr><tr><td align="left">optimization_activate</td><td>bool</td><td>激活优化， Activate the optimization</td><td>False</td><td>True</td><td>True</td></tr></tbody></table><table><thead><tr><th>optimization_verbose</th><th>bool</th><th>打印优化过程详情， Print verbose information</th><th>False</th><th>False</th><th>True</th></tr></thead><tbody><tr><td>penalty_epsilon</td><td>double</td><td>对于硬约束近似，在惩罚函数中添加安全范围， Add a small safty margin to penalty functions for hard-constraint approximations</td><td>0.0</td><td>0.1</td><td>1.0</td></tr><tr><td>weight_max_vel_x</td><td>double</td><td>最大x速度权重， Optimization weight for satisfying the maximum allowed translational velocity</td><td>0.0</td><td>2.0</td><td>1000.0</td></tr><tr><td>weight_max_vel_y</td><td>double</td><td>最大y速度权重，Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots)</td><td>0.0</td><td>2.0</td><td>1000.0</td></tr><tr><td>weight_max_vel_theta</td><td>double</td><td>最大叫速度权重， Optimization weight for satisfying the maximum allowed angular velocity</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_acc_lim_x</td><td>double</td><td>最大x 加速度权重，Optimization weight for satisfying the maximum allowed translational acceleration</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_acc_lim_y</td><td>double</td><td>最大y 加速度权重，Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots)</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_acc_lim_theta</td><td>double</td><td>最大角速度权重，Optimization weight for satisfying the maximum allowed angular acceleration</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_kinematics_nh</td><td>double</td><td>Optimization weight for satisfying the non-holonomic kinematics</td><td>0.0</td><td>1000.0</td><td>10000.0</td></tr><tr><td>weight_kinematics_forward_drive</td><td>double</td><td>优化过程中，迫使机器人只选择前进方向，差速轮适用，Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot)</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr></tbody></table><table><thead><tr><th>weight_kinematics_turning_radius</th><th>double</th><th><strong>优化过程中，车型机器人的最小转弯半径的权重。 Optimization weight for enforcing a minimum turning radius (carlike robots)</strong></th><th>0.0</th><th>1.0</th><th>1000.0</th></tr></thead><tbody><tr><td>weight_optimaltime</td><td>double</td><td>优化过程中，基于轨迹的时间上的权重， Optimization weight for contracting the trajectory w.r.t transition time</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_obstacle</td><td>double</td><td>优化过程中，和障碍物最小距离的权重，Optimization weight for satisfying a minimum seperation from obstacles</td><td>0.0</td><td>50.0</td><td>1000.0</td></tr><tr><td>weight_inflation</td><td>double</td><td>优化过程中， 膨胀区的权重，Optimization weight for the inflation penalty (should be small)</td><td>0.0</td><td>0.1</td><td>10.0</td></tr><tr><td>weight_dynamic_obstacle</td><td>double</td><td>优化过程中，和动态障碍物最小距离的权重，Optimization weight for satisfying a minimum seperation from dynamic obstacles</td><td>0.0</td><td>50.0</td><td>1000.0</td></tr><tr><td>weight_dynamic_obstacle_inflation</td><td>double</td><td>优化过程中，和动态障碍物膨胀区的权重，Optimization weight for the inflation penalty of dynamic obstacles (should be small)</td><td>0.0</td><td>0.1</td><td>10.0</td></tr><tr><td><em><strong>weight_viapoint</strong></em></td><td>double</td><td>优化过程中，和全局路径采样点距离的权重， Optimization weight for minimizing the distance to via-points</td><td>0.0</td><td>1.0</td><td>1000.0</td></tr><tr><td>weight_adapt_factor</td><td>double</td><td>Some special weights (currently ‘weight_obstacle’) are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.</td><td>1.0</td><td>2.0</td><td>100.0</td></tr><tr><td>enable_multithreading</td><td>bool</td><td>允许多线程并行处理， Activate multiple threading for planning multiple trajectories in parallel</td><td>False</td><td>True</td><td>True</td></tr><tr><td>max_number_classes</td><td>int</td><td>允许的线程数， Specify the maximum number of allowed alternative homotopy classes (limits computational effort)</td><td>1</td><td>5</td><td>100</td></tr></tbody></table><table><thead><tr><th>selection_cost_hysteresis</th><th>double</th><th>Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost &lt; old_cost*factor)</th><th>0.0</th><th>1.0</th><th>2.0</th></tr></thead><tbody><tr><td>selection_prefer_initial_plan</td><td>double</td><td>Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.)</td><td>0.0</td><td>0.95</td><td>1.0</td></tr><tr><td>selection_obst_cost_scale</td><td>double</td><td>Extra scaling of obstacle cost terms just for selecting the ‘best’ candidate (new_obst_cost: obst_cost*factor)</td><td>0.0</td><td>100.0</td><td>1000.0</td></tr><tr><td>selection_viapoint_cost_scale</td><td>double</td><td>Extra scaling of via-point cost terms just for selecting the ‘best’ candidate. (new_viapt_cost: viapt_cost*factor)</td><td>0.0</td><td>1.0</td><td>100.0</td></tr><tr><td>selection_alternative_time_cost</td><td>bool</td><td>If true, time cost is replaced by the total transition time.</td><td>False</td><td>False</td><td>True</td></tr><tr><td>switching_blocking_period</td><td>double</td><td>Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed</td><td>0.0</td><td>0.0</td><td>60.0</td></tr><tr><td>roadmap_graph_no_samples</td><td>int</td><td>Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off</td><td>1</td><td>15</td><td>100</td></tr><tr><td>roadmap_graph_area_width</td><td>double</td><td>Specify the width of the area in which sampled will be generated between start and goal [m ] (the height equals the start-goal distance)</td><td>0.1</td><td>5.0</td><td>20.0</td></tr><tr><td>roadmap_graph_area_length_scale</td><td>double</td><td>矩形区域的长度取决于起点和目标之间的距离。 此参数进一步缩放距离，以使几何中心保持相等！The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!)</td><td>0.5</td><td>1.0</td><td>2.0</td></tr><tr><td>h_signature_prescaler</td><td>double</td><td>标度障碍物的数量，以允许数量巨大的障碍物。 不要选择太低，否则无法将障碍物彼此区分开（0.2 &lt;H &lt;&#x3D; 1）Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2&lt;H&lt;&#x3D;1)</td><td>0.2</td><td>1.0</td><td>1.0</td></tr></tbody></table><table><thead><tr><th>h_signature_threshold</th><th>double</th><th>如果实部和复数部分的差都低于指定的阈值，则假设两个h-符号相等Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold</th><th>0.0</th><th>0.1</th><th>1.0</th></tr></thead><tbody><tr><td>obstacle_heading_threshold</td><td>double</td><td>指定障碍物航向和目标航向之间的归一化标量积的值，以便将它们(障碍物)考虑在内进行探索Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration</td><td>0.0</td><td>0.45</td><td>1.0</td></tr><tr><td>viapoints_all_candidates</td><td>bool</td><td>如果为TRUE，则将不同拓扑的所有轨迹附加到通过点集合，否则仅附加与初始&#x2F;全局计划共享相同的轨迹(在TEST_OPTIM_NODE中无效)。If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial&#x2F;global plan is attached (no effect in test_optim_node).</td><td>False</td><td>True</td><td>True</td></tr><tr><td>visualize_hc_graph</td><td>bool</td><td>可视化新创建的图Visualize the graph that is created for exploring new homotopy classes</td><td>False</td><td>False</td><td>True</td></tr><tr><td>shrink_horizon_backup</td><td>bool</td><td>当规划器检测到系统异常，允许缩小时域规划范围。Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues.</td><td>False</td><td>True</td><td>True</td></tr><tr><td>oscillation_recovery</td><td>bool</td><td>尝试检测和解决振荡，Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left&#x2F;right&#x2F;forward&#x2F;backwards).</td><td>False</td><td>True</td><td>True</td></tr></tbody></table><p>博主的teb配置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">TebLocalPlannerROS:</span> <span class="hljs-attr">odom_topic:</span> <span class="hljs-string">/odom111</span>     <span class="hljs-comment"># Trajectory</span>   <span class="hljs-attr">teb_autosize:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">dt_ref:</span> <span class="hljs-number">0.3</span> <span class="hljs-attr">dt_hysteresis:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">max_samples:</span> <span class="hljs-number">500</span> <span class="hljs-attr">global_plan_overwrite_orientation:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">allow_init_with_backwards_motion:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">max_global_plan_lookahead_dist:</span> <span class="hljs-number">3.0</span> <span class="hljs-attr">global_plan_viapoint_sep:</span> <span class="hljs-number">-1</span> <span class="hljs-attr">global_plan_prune_distance:</span> <span class="hljs-number">1</span> <span class="hljs-attr">exact_arc_length:</span> <span class="hljs-literal">False</span> <span class="hljs-attr">feasibility_check_no_poses:</span> <span class="hljs-number">2</span> <span class="hljs-attr">publish_feedback:</span> <span class="hljs-literal">False</span>     <span class="hljs-comment"># Robot</span>          <span class="hljs-attr">max_vel_x:</span> <span class="hljs-number">0.5</span> <span class="hljs-attr">max_vel_x_backwards:</span> <span class="hljs-number">0.2</span> <span class="hljs-attr">max_vel_y:</span> <span class="hljs-number">0.0</span> <span class="hljs-attr">max_vel_theta:</span> <span class="hljs-number">0.3</span> <span class="hljs-comment"># the angular velocity is also bounded by min_turning_radius in case of a carlike robot (r = v / omega)</span> <span class="hljs-attr">acc_lim_x:</span> <span class="hljs-number">0.5</span> <span class="hljs-attr">acc_lim_theta:</span> <span class="hljs-number">0.5</span> <span class="hljs-comment"># ********************** Carlike robot parameters ********************</span> <span class="hljs-attr">min_turning_radius:</span> <span class="hljs-number">0.15</span>        <span class="hljs-comment"># Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)</span> <span class="hljs-attr">wheelbase:</span> <span class="hljs-number">0.31</span>                 <span class="hljs-comment"># Wheelbase of our robot</span> <span class="hljs-attr">cmd_angle_instead_rotvel:</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># stage simulator takes the angle instead of the rotvel as input (twist message)</span> <span class="hljs-comment"># ********************************************************************</span> <span class="hljs-attr">footprint_model:</span> <span class="hljs-comment"># types: &quot;point&quot;, &quot;circular&quot;, &quot;two_circles&quot;, &quot;line&quot;, &quot;polygon&quot;</span>   <span class="hljs-attr">type:</span> <span class="hljs-string">&quot;polygon&quot;</span>   <span class="hljs-attr">radius:</span> <span class="hljs-number">0.2</span> <span class="hljs-comment"># for type &quot;circular&quot;</span>   <span class="hljs-attr">line_start:</span> [<span class="hljs-number">0.5</span>, <span class="hljs-number">0.0</span>] <span class="hljs-comment"># for type &quot;line&quot;</span>   <span class="hljs-attr">line_end:</span> [<span class="hljs-number">-0.08</span>, <span class="hljs-number">0.0</span>] <span class="hljs-comment"># for type &quot;line&quot;</span>   <span class="hljs-attr">front_offset:</span> <span class="hljs-number">0.2</span> <span class="hljs-comment"># for type &quot;two_circles&quot;</span>   <span class="hljs-attr">front_radius:</span> <span class="hljs-number">0.2</span> <span class="hljs-comment"># for type &quot;two_circles&quot;</span>   <span class="hljs-attr">rear_offset:</span> <span class="hljs-number">0.2</span> <span class="hljs-comment"># for type &quot;two_circles&quot;</span>   <span class="hljs-attr">rear_radius:</span> <span class="hljs-number">0.2</span> <span class="hljs-comment"># for type &quot;two_circles&quot;</span>   <span class="hljs-attr">vertices:</span> [[<span class="hljs-number">0.27</span>,<span class="hljs-number">0.23</span>], [<span class="hljs-number">0.27</span>,<span class="hljs-number">-0.23</span>], [<span class="hljs-number">-0.27</span>,<span class="hljs-number">-0.23</span>], [<span class="hljs-number">-0.27</span>,<span class="hljs-number">0.23</span>]] <span class="hljs-comment"># for type &quot;polygon&quot;</span> <span class="hljs-comment"># GoalTolerance</span>     <span class="hljs-attr">xy_goal_tolerance:</span> <span class="hljs-number">0.2</span> <span class="hljs-attr">yaw_goal_tolerance:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">free_goal_vel:</span> <span class="hljs-literal">False</span> <span class="hljs-attr">complete_global_plan:</span> <span class="hljs-literal">True</span>     <span class="hljs-comment"># Obstacles</span>     <span class="hljs-attr">min_obstacle_dist:</span> <span class="hljs-number">0.05</span> <span class="hljs-comment"># This value must also include our robot&#x27;s expansion, since footprint_model is set to &quot;line&quot;.</span> <span class="hljs-attr">inflation_dist:</span> <span class="hljs-number">0.5</span> <span class="hljs-attr">include_costmap_obstacles:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">costmap_obstacles_behind_robot_dist:</span> <span class="hljs-number">1.0</span> <span class="hljs-attr">obstacle_poses_affected:</span> <span class="hljs-number">5</span> <span class="hljs-attr">dynamic_obstacle_inflation_dist:</span> <span class="hljs-number">0.6</span> <span class="hljs-attr">include_dynamic_obstacles:</span> <span class="hljs-literal">True</span>  <span class="hljs-attr">costmap_converter_plugin:</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">costmap_converter_spin_thread:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">costmap_converter_rate:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># Optimization</span>     <span class="hljs-attr">no_inner_iterations:</span> <span class="hljs-number">5</span> <span class="hljs-attr">no_outer_iterations:</span> <span class="hljs-number">4</span> <span class="hljs-attr">optimization_activate:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">optimization_verbose:</span> <span class="hljs-literal">False</span> <span class="hljs-attr">penalty_epsilon:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">obstacle_cost_exponent:</span> <span class="hljs-number">4</span> <span class="hljs-attr">weight_max_vel_x:</span> <span class="hljs-number">2</span> <span class="hljs-attr">weight_max_vel_theta:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_acc_lim_x:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_acc_lim_theta:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_kinematics_nh:</span> <span class="hljs-number">1000</span> <span class="hljs-attr">weight_kinematics_forward_drive:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_kinematics_turning_radius:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_optimaltime:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># must be &gt; 0</span> <span class="hljs-attr">weight_shortest_path:</span> <span class="hljs-number">0</span> <span class="hljs-attr">weight_obstacle:</span> <span class="hljs-number">100</span> <span class="hljs-attr">weight_inflation:</span> <span class="hljs-number">0.2</span> <span class="hljs-attr">weight_dynamic_obstacle:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># not in use yet</span> <span class="hljs-attr">weight_dynamic_obstacle_inflation:</span> <span class="hljs-number">0.2</span> <span class="hljs-attr">weight_viapoint:</span> <span class="hljs-number">1</span> <span class="hljs-attr">weight_adapt_factor:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># Homotopy Class Planner</span> <span class="hljs-attr">enable_homotopy_class_planning:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">enable_multithreading:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">max_number_classes:</span> <span class="hljs-number">4</span> <span class="hljs-attr">selection_cost_hysteresis:</span> <span class="hljs-number">1.0</span> <span class="hljs-attr">selection_prefer_initial_plan:</span> <span class="hljs-number">0.95</span> <span class="hljs-attr">selection_obst_cost_scale:</span> <span class="hljs-number">1.0</span> <span class="hljs-attr">selection_alternative_time_cost:</span> <span class="hljs-literal">False</span> <span class="hljs-attr">roadmap_graph_no_samples:</span> <span class="hljs-number">15</span> <span class="hljs-attr">roadmap_graph_area_width:</span> <span class="hljs-number">5</span> <span class="hljs-attr">roadmap_graph_area_length_scale:</span> <span class="hljs-number">1.0</span> <span class="hljs-attr">h_signature_prescaler:</span> <span class="hljs-number">0.5</span> <span class="hljs-attr">h_signature_threshold:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">obstacle_heading_threshold:</span> <span class="hljs-number">0.45</span> <span class="hljs-attr">switching_blocking_period:</span> <span class="hljs-number">0.0</span> <span class="hljs-attr">viapoints_all_candidates:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">delete_detours_backwards:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">max_ratio_detours_duration_best_duration:</span> <span class="hljs-number">3.0</span> <span class="hljs-attr">visualize_hc_graph:</span> <span class="hljs-literal">False</span> <span class="hljs-attr">visualize_with_time_as_z_axis_scale:</span> <span class="hljs-literal">False</span><span class="hljs-comment"># Recovery</span>  <span class="hljs-attr">shrink_horizon_backup:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">shrink_horizon_min_duration:</span> <span class="hljs-number">10</span> <span class="hljs-attr">oscillation_recovery:</span> <span class="hljs-literal">True</span> <span class="hljs-attr">oscillation_v_eps:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">oscillation_omega_eps:</span> <span class="hljs-number">0.1</span> <span class="hljs-attr">oscillation_recovery_min_duration:</span> <span class="hljs-number">10</span> <span class="hljs-attr">oscillation_filter_duration:</span> <span class="hljs-number">10</span></code></pre></div><p>至于其他局部路径规划器的配置建议参考网上的教程</p><h3 id="Navigation-Global-Planner"><a href="#Navigation-Global-Planner" class="headerlink" title="Navigation - Global Planner"></a>Navigation - Global Planner</h3><p>依赖于<code>nav core::BaseGlobalPlanner</code>接口的全局规划器有3个：</p><p>1.<code>carrot_planner</code></p><p>2.<code>navfn</code></p><p>3.<code>global planner</code></p><p>比较常用的是后两个，博主提供的代码包用的是global planner</p><h5 id="carrot-planner"><a href="#carrot-planner" class="headerlink" title="carrot_planner"></a>carrot_planner</h5><p>carrot_planner检查需要到达的目标是不是一个障碍物，如果是一个障碍物，它就将目标点替换成一个附近可接近的点。因此，这个模块其实并没有做任何全局规划的工作。在复杂的室内环境中，这个模块并不实用。</p><h5 id="navfn"><a href="#navfn" class="headerlink" title="navfn"></a>navfn</h5><p><code>navfn</code>使用Dijkstra算法找到最短路径。</p><h5 id="global-planner"><a href="#global-planner" class="headerlink" title="global planner"></a>global planner</h5><p><code>global planner</code>是<code>navfn</code>的升级版。它相对于<code>navfn</code>增加了更多的选项：</p><p>1）支持A*算法；</p><p>2）可以切换二次近似；</p><p>3）切换网格路径；</p><h5 id="navfn和global-planner"><a href="#navfn和global-planner" class="headerlink" title="navfn和global_planner"></a>navfn和global_planner</h5><p>关于navfn和global_planner的区别有一篇博客写的很清楚：<a href="https://blog.csdn.net/heyijia0327/article/details/45030929">博文链接</a></p><p>简单来说可以将navfn包和global_planner包理解成一个并列关系，因为他们两个都是用来做全局规划的，两个包里面也都实现了A*，Dijkstra算法。早期的开发中是用navfn包做导航的，那时候并没有global_planner这个包，并且在navfn的源代码里可以看到这个包默认是使用Dijkstra做全局路径规划，并且有A*的代码。但先前navfn里的A*算法存在bug，没人有时间去弄，到13年David Lu才完成了这部分工作，重新发布了global_planner包，修改好的代码封装性更强，更清晰明了，同时为了和以前兼容就没有用global_planner替换掉navfn。</p><h4 id="Dijkstra-和-A"><a href="#Dijkstra-和-A" class="headerlink" title="Dijkstra 和 A*"></a>Dijkstra 和 A*</h4><p>关于Dijkstra算法和A*算法的原理这里就不再阐述了，有兴趣的朋友可以自行google</p><p>这里主要通过图像和动画直观的看一下两种算法规划出的路径区别：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/g024lzsknDo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>如果youtube视频感觉还不直观的话有一个github上搭建的项目可以很方便的可视化包括A*和Dijkstra算法在内的多种不同路径规划算法的区别，对于A*和Dijkstra算法还可以可视化其不同实现方式下规划的结果：<a href="https://qiao.github.io/PathFinding.js/visual/">github传送门</a></p><ul><li>A*算法不带障碍物效果</li></ul><p><img src="https://i.loli.net/2020/08/05/Qnshgy3KLdFDwbf.png" alt="image-20200805141114490"></p><ul><li>Dijkstra算法不带障碍物效果</li></ul><p><img src="https://i.loli.net/2020/08/05/4mMGoP39chwXgHL.png" alt="image-20200805141232494"></p><ul><li>A*算法带障碍物效果</li></ul><p><img src="https://i.loli.net/2020/08/05/IDz9kOlrPN3dBa2.png" alt="image-20200805141327151"></p><ul><li>Dijkstra算法带障碍物效果</li></ul><p><img src="https://i.loli.net/2020/08/05/RhF6Xj3D8wt7YA5.png" alt="image-20200805141347334"></p><p>两种不同算法体现到咱们racecar里具体就是：</p><p>左图为Dijkstra，右图为A*</p><center>    <img src="https://i.loli.net/2020/08/06/mfLrbjOSxXJcYtG.png">　　　　　<img src="https://i.loli.net/2020/08/06/qYlsKCnxNuhA3oe.png"></center><h3 id="Navigation-Local-Planner"><a href="#Navigation-Local-Planner" class="headerlink" title="Navigation - Local Planner"></a>Navigation - Local Planner</h3><p>对于室内小车，ROS社区已有很多大牛们贡献了各种不同的局部规划器，总结主要有以下几种：</p><ul><li><a href="http://wiki.ros.org/base_local_planner">base_local_planner</a></li><li><a href="http://wiki.ros.org/dwa_local_planner">DWA_local_planner</a></li><li><a href="http://wiki.ros.org/dwb_local_planner">DWB_local_planner</a></li><li><a href="http://wiki.ros.org/asr_ftc_local_planner">asr_ftc_local_planner</a></li><li><a href="http://wiki.ros.org/teb_local_planner">TEB_local_planner</a></li><li><a href="http://wiki.ros.org/eband_local_planner">Eband_local_planner</a></li></ul><p>比较常用的是base_local_planner、DWA_local_planner和TEB_local_planner，</p><h4 id="TEB-lcoal-planner"><a href="#TEB-lcoal-planner" class="headerlink" title="TEB_lcoal_planner"></a>TEB_lcoal_planner</h4><p><code>teb_local_planner</code>实现了一个在线优化的局部轨迹规划器，用于移动机器人的导航和控制，可以作为ROS导航包的插件。</p><p>由全局规划器生成的初始轨迹在运行期间进行优化，以最小化轨迹的执行时间（时间最优目标），与障碍物分离处理，满足诸如最大速度和加速度的动力学约束。</p><p><code>teb_local_planner</code>的当前实现符合非完整机器人（差动驱动和类似汽车的机器人）的运动学特征。<br>（注：对地面移动机器人来说，非完整机器人指<em>X</em>—方向有速度，而<em>Y</em>-速度为0的机器人）</p><p><strong>注意</strong>:<code>teb_local_planner</code>的最重要特征在于：在行进过程中调整机器人的朝向以使到达位置时的朝向是所要的朝向，因此行进过程中会有倒车（左图）。此外，它在行进过程中也不会紧密贴合路径（右图），但可以调大<em>weight_viapoint</em>和<em>global_plan_viapoint_sep</em>来调整。</p><center>    <img src="https://i.loli.net/2020/08/05/qBbACo9VGEXkzhT.png" width="300"><img src="https://i.loli.net/2020/08/05/1ONC4buEZQMFjrm.png" width="300"></center><h4 id="DWA-local-planner"><a href="#DWA-local-planner" class="headerlink" title="DWA_local_planner"></a>DWA_local_planner</h4><p><code>base_local_planner</code>包含有轨迹展开(Trajectory Rollout)和动态窗口方法（Dynamic Window Approach,DWA）算法。基本思想如下：</p><ol><li>在机器人的控制空间（dx，dy，dtheta）中进行离散采样。</li><li>对于每个采样速度，从机器人的当前状态执行前向模拟，以预测如果应用采样速度在某个（短）时间段内会发生什么情况。</li><li>使用包含以下特征的度量来评估（评分）由前向模拟产生的每个轨迹：接近障碍物程度，接近目标程度，接近全局路径程度和采用的速度。丢弃非法轨迹（与障碍物碰撞的轨迹）。</li><li>选择得分最高的轨迹并将相关的速度发送到移动基座。</li><li>清零并重复。</li></ol><p>DWA与“Trajectory Rollout”的不同之处在于如何对机器人的控制空间进行采样。在给定机器人的加速度极限的情况下，Trajectory Rollout在整个前向模拟周期内从可实现的速度集合中进行采样，而DWA在给定机器人的加速度极限的情况下仅针对一个模拟步骤从可实现的速度集合中进行采样。这意味着DWA是一种更有效的算法，因为它可以采样更小的空间，但是对于具有低加速度限制的机器人，可能性能不如“Trajectory Rollout”，因为DWA不会向前模拟恒定加速度。然而，在实践中，我们发现DWA和轨迹展示在我们的所有测试中都具有相同的性能，建议使用DWA来提高效率。</p><p>同时dwa_local_planner包提供了一个控制器，用于驱动在所述平面上的移动基座。该控制器用于将路径规划器连接到机器人。使用地图，规划器为机器人创建从一个起点到目标位置的运动轨迹。在此过程中，计划员至少在机器人周围创建一个值函数，表示为网格图。该值函数编码遍历网格单元的成本。控制器的工作是使用此值函数来确定要发送给机器人的dx，dy，dtheta速度。</p><center><img src="https://i.loli.net/2020/08/05/C2nbsNX19oGAqQe.png" width="400"></center>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（五）- TF树</title>
    <link href="/2020/08/04/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89-%20TF%E6%A0%91/"/>
    <url>/2020/08/04/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89-%20TF%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（五）-TF树"><a href="#racecar仿真竞赛经验总结（五）-TF树" class="headerlink" title="racecar仿真竞赛经验总结（五）- TF树"></a>racecar仿真竞赛经验总结（五）- TF树</h1><p>前文链接：</p><p><a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><p><a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a></p><p><a href="https://zacdeng.github.io/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/">racecar仿真竞赛经验总结（三）- 激光SLAM建图</a></p><p><a href="https://zacdeng.github.io/2020/08/03/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89-%20AMCL%E4%B8%8E%E5%B0%8F%E8%BD%A6%E5%AE%9A%E4%BD%8D/">racecar仿真竞赛经验总结（四）- AMCL与小车定位</a></p><p>关于机器人TF变换的原理和解析网上有许多优质博文，后面会附上相应链接，这里博主就不再多做赘述了，这篇博文的内容主要围绕racecar竞速小车中涉及的一些比较重要的内容和踩过的一些坑</p><h2 id="博文推荐"><a href="#博文推荐" class="headerlink" title="博文推荐"></a>博文推荐</h2><p>这里仅列出一些博主学习过程中参考过的博文，大体上能把东西讲明白，建议学习时先看ROS Wiki上的讲解，在实际过程中遇到问题时针对问题查询资料</p><h3 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h3><p>ROS Wiki上的tf官方教程：</p><p><a href="http://wiki.ros.org/tf/Tutorials">http://wiki.ros.org/tf/Tutorials</a></p><p><a href="http://wiki.ros.org/tf">http://wiki.ros.org/tf</a></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>ROS坐标系统：<a href="http://community.bwbot.org/topic/227/ros%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9D%90%E6%A0%87%E7%B3%BB%E5%92%8C%E5%85%B6%E5%90%AB%E4%B9%89">蓝鲸ROS机器人论坛</a></p><p>ROS坐标转换讲解：<a href="https://www.jianshu.com/p/935e0e954026">https://www.jianshu.com/p/935e0e954026</a></p><h3 id="实用讲解"><a href="#实用讲解" class="headerlink" title="实用讲解"></a>实用讲解</h3><p>关于tf的监听和发布：<a href="https://blog.csdn.net/Start_From_Scratch/article/details/50762293">https://blog.csdn.net/Start_From_Scratch/article/details/50762293</a></p><p>ubuntu小乌龟实例分析：<a href="https://blog.csdn.net/hcx25909/article/details/9255001">https://blog.csdn.net/hcx25909/article/details/9255001</a></p><p>古月居-设置机器人tf：<a href="https://www.guyuehome.com/355">https://www.guyuehome.com/355</a></p><h2 id="tf工具"><a href="#tf工具" class="headerlink" title="tf工具"></a>tf工具</h2><p>利用一些tf工具能够获知一些坐标系的关系情况<br>1、<code>view_frames</code>能够监听当前时刻所有通过ROS广播的tf坐标系，并绘制出树状图表示坐标系之间的连接关系保存到离线文件中：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">rosrun tf view_frames</span></code></pre></div><p>2、<code>rqt_tf_tree</code>工具<br>虽然view_frames能够将当前坐标系关系保存在离线文件中，但是无法实时反映坐标关系，所以可以用rqt_tf_tree实时刷新显示坐标系关系：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">rosrun rqt_tf_tree rqt_tf_tree</span></code></pre></div><p>直接在终端中显示不同坐标系之间的关系：</p><div class="code-wrapper"><pre><code class="hljs css">rosrun tf tf_echo <span class="hljs-selector-attr">[reference_frame]</span> <span class="hljs-selector-attr">[target_frame]</span></code></pre></div><p>3、<code>tf_echo</code>工具<br>使用tf_echo工具可以查看两个广播参考系之间的关系。</p><div class="code-wrapper"><pre><code class="hljs jboss-cli">rosrun tf tf_<span class="hljs-keyword">echo</span> turtle1 turtle2</code></pre></div><h2 id="racecar中的tf"><a href="#racecar中的tf" class="headerlink" title="racecar中的tf"></a>racecar中的tf</h2><h3 id="竞速小车中的tf简单阐述"><a href="#竞速小车中的tf简单阐述" class="headerlink" title="竞速小车中的tf简单阐述"></a>竞速小车中的tf简单阐述</h3><p>​    ROS中的很多软件包都需要机器人发布tf变换树，那么什么是tf变换树呢？抽象的来讲，一棵tf变换树定义了不同坐标系之间的平移与旋转变换关系。具体来说，我们假设有一个机器人，包括一个机器人移动平台和一个安装在平台之上的激光雷达，以这个机器人为例，定义两个坐标系，一个坐标系以机器人移动平台的中心为原点，称为base_link参考系，另一个坐标系以激光雷达的中心为原点，称为base_laser参考系</p><p><img src="https://i.loli.net/2020/08/04/ZSqLkhYnMQwBK9V.png" alt="image-20200804113141687"></p><p>​    单拿激光雷达和小车模型之间的tf变换来说：假设在机器人运行过程中，激光雷达可以采集到距离前方障碍物的数据，这些数据当然是以激光雷达为原点的测量值，换句话说，也就是base_laser参考系下的测量值。现在，如果我们想使用这些数据帮助机器人完成避障功能，当然，由于激光雷达在机器人之上，直接使用这些数据不会产生太大的问题，但是激光雷达并不在机器人的中心之上，在极度要求较高的系统中，会始终存在一个雷达与机器人中心的偏差值。这个时候，如果我们采用一种坐标变换，将及激光数据从base_laser参考系变换到base_link参考下，问题不就解决了么。这里我们就需要定义这两个坐标系之间的变换关系。</p><p>​    当然上述假设只列出了激光雷达和小车之间的坐标系差异，如果是一个复杂的系统呢？比如racecar小车中的四个车轮、电池模块以及车上搭载的摄像头和imu等外设都需要一个相应的坐标变换（如下图所示），那这个工程就比较繁琐了，ROS中的tf包就是为这类问题准备的。</p><center><img src="https://i.loli.net/2020/08/04/Zi1lajcQJkLpvwG.png" width="400"/></center><h3 id="小车中涉及的tf变换简要分析"><a href="#小车中涉及的tf变换简要分析" class="headerlink" title="小车中涉及的tf变换简要分析"></a>小车中涉及的tf变换简要分析</h3><p>​    首先我们使用rqt_tf_tree查看整个racecar的tf树结构，结果如下：</p><p><img src="https://i.loli.net/2020/08/04/RwIzZPLFjyvdgGW.png" alt="image-20200803195009706"></p><p>​    可以直观的发现小车的tf树总架构并不是常见的map-&gt;odom-&gt;base_link的结构，而是map-&gt;odom_combined-&gt;base_footprint-&gt;base_link。其中odom环节被我们替换为了odom_combined，也就是ekf融合后的里程计坐标系。而odom-&gt;base_link之间又添加了一层base_footprint，其实base_footprint和base_link大体上可以认为是差不多的，只不过base_footprint可以认为是base_link消除z轴后小车投影的坐标系，其总架构还是和常见的小车tf树结构相似。常见的小车tf树结构应该如下图所示：</p><p><img src="https://i.loli.net/2020/08/04/7yMTzXxEsupihBb.png" alt="image-20200804114350145"></p><hr><ul><li><p>base_link和base_footprint的区别</p><ul><li><p>base_link</p><p>与机器人中心重合，坐标系原点一般为机器人的旋转中心</p></li><li><p>base_footprint</p><p>原点为<code>base_link</code>原点在地面的投影，有些许区别（z值不同）</p></li></ul></li></ul><hr><p>​    首先我们来看base_footprint及其底下的tf树结构，这一部分内容是官方封装好发给我们的材料，其中已经搭建好了小车机身各部分之间的tf变换且不允许更改，这一部分内容可以通过使用racecar_rviz.launch文件打开小车的rviz模型并观察其中的tf变换</p><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_gazebo racecar_rviz.<span class="hljs-built_in">launch</span></code></pre></div><p>​    留给我们的主要工作也是最重要的工作是完成map-&gt;odom_combined-&gt;base_footprint之间的tf变换，其中map-&gt;odom_combined之间的tf变换通过amcl发布，odom_combined-&gt;base_footprint之间的tf变换通过robot_pose_ekf发布</p><ul><li><p>map-&gt;odom_combined</p><p>amcl原函数里已经编写了了tf发布的相关代码，通过设置amcl.launch文件中的接口可以自动完成tf的变换</p><p><img src="https://i.loli.net/2020/08/04/gPkFVApqMl1S9zy.png" alt="image-20200804152621688"></p><p>到这里amcl的tf树看上去已经没有问题了，但是！！！仅发布这样的tf变换只能显示一下机器人的位姿（in rviz），我们想要实现的利用amcl矫正定位的功能其实并未用上，博主也是在这个地方踩了坑，我们先来看看amcl到底是怎么实现定位矫正功能的</p><p><img src="https://i.loli.net/2020/08/04/5Pfgz9FVD2dbruo.png" alt="image-20200804154014219"></p><p>通过原理图不难发现amcl是矫正&#x2F;map_frame-&gt;&#x2F;base_frame之间的偏差，如果不主动监听的话是没办法实现其矫正功能的，结果就是小车始终带着一个偏移量在跑，还傻乎乎的以为自己的位置是正确的（惨状可以参考上一篇博客）</p><p>实现方法也很简单，主动监听后再发布就可以了：</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;nav_msgs/Odometry.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ros/ros.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;std_msgs/String.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tf/transform_listener.h&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><span class="hljs-function"></span>&#123;  ros::<span class="hljs-built_in">init</span>(argc, argv, <span class="hljs-string">&quot;tf_to_odom_converter&quot;</span>);  std::string source_frame_id, target_frame_id, odom_frame_id;  ros::NodeHandle node;  <span class="hljs-function">ros::NodeHandle <span class="hljs-title">priv_node</span><span class="hljs-params">(<span class="hljs-string">&quot;~&quot;</span>)</span></span>;  <span class="hljs-comment">// priv_node.param&lt;std::string&gt;(&quot;odom_frame&quot;, odom_frame_id, &quot;odom&quot;);</span>  <span class="hljs-comment">// priv_node.param&lt;std::string&gt;(&quot;source_frame&quot;, source_frame_id, &quot;/base_footprint&quot;);</span>  <span class="hljs-comment">// priv_node.param&lt;std::string&gt;(&quot;target_frame&quot;, target_frame_id, &quot;/odom_combined&quot;);</span>  ros::Publisher odom_pub = node.<span class="hljs-built_in">advertise</span>&lt;nav_msgs::Odometry&gt;(<span class="hljs-string">&quot;odom111&quot;</span>, <span class="hljs-number">1</span>);  tf::TransformListener listener;  <span class="hljs-function">ros::Rate <span class="hljs-title">rate</span><span class="hljs-params">(<span class="hljs-number">25.0</span>)</span></span>;  <span class="hljs-keyword">while</span> (node.<span class="hljs-built_in">ok</span>())  &#123;    tf::StampedTransform transform;    <span class="hljs-keyword">try</span>    &#123;      listener.<span class="hljs-built_in">waitForTransform</span>(<span class="hljs-string">&quot;map&quot;</span>, <span class="hljs-string">&quot;base_footprint&quot;</span>, ros::<span class="hljs-built_in">Time</span>(<span class="hljs-number">0</span>), ros::<span class="hljs-built_in">Duration</span>(<span class="hljs-number">20.0</span>));      <span class="hljs-comment">// ros::Time::now()</span>      listener.<span class="hljs-built_in">lookupTransform</span>(<span class="hljs-string">&quot;map&quot;</span>, <span class="hljs-string">&quot;base_footprint&quot;</span>, ros::<span class="hljs-built_in">Time</span>(<span class="hljs-number">0</span>), transform);    &#125;    <span class="hljs-built_in">catch</span> (tf::TransformException ex)    &#123;      <span class="hljs-built_in">ROS_ERROR</span>(<span class="hljs-string">&quot;%s&quot;</span>, ex.<span class="hljs-built_in">what</span>());    &#125;    nav_msgs::Odometry odom;    <span class="hljs-comment">// copy pose to odom msg</span>    odom.header.stamp = transform.stamp_;    odom.header.frame_id = <span class="hljs-string">&quot;map&quot;</span>;    odom.child_frame_id = <span class="hljs-string">&quot;base_footprint&quot;</span>;    geometry_msgs::TransformStamped ts_msg;    tf::<span class="hljs-built_in">transformStampedTFToMsg</span>(transform, ts_msg);    odom.pose.pose.position.x = ts_msg.transform.translation.x;    odom.pose.pose.position.y = ts_msg.transform.translation.y;    odom.pose.pose.position.z = ts_msg.transform.translation.z;    odom.pose.pose.orientation = ts_msg.transform.rotation;    odom_pub.<span class="hljs-built_in">publish</span>(odom);    rate.<span class="hljs-built_in">sleep</span>();  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>具体文件我放在了odom_tf_converter&#x2F;src&#x2F;tf_to_odom.cpp下面了</p></li><li><p>odom_combined-&gt;base_footprint</p><p>同理robot_pose_ekf的原函数里已经编写了了tf发布的相关代码，通过设置odom_combined.launch文件中的接口可以自动完成tf的变换</p><p><img src="https://i.loli.net/2020/08/04/QX2W5Etz9CO3e7m.png" alt="image-20200804152949504"></p><p><em>注意一定要将 rf2o 中的 tf 发布相关代码注释掉，否则构建出的 tf 树将出现问题，具体方法可以参考之前的博客内容</em></p></li></ul><p>完成这两步内容后我们小车的tf树就没有问题了，接下来就是导航相关内容啦</p>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（四）- AMCL与小车定位</title>
    <link href="/2020/08/03/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89-%20AMCL%E4%B8%8E%E5%B0%8F%E8%BD%A6%E5%AE%9A%E4%BD%8D/"/>
    <url>/2020/08/03/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89-%20AMCL%E4%B8%8E%E5%B0%8F%E8%BD%A6%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（四）-AMCL与小车定位"><a href="#racecar仿真竞赛经验总结（四）-AMCL与小车定位" class="headerlink" title="racecar仿真竞赛经验总结（四）- AMCL与小车定位"></a>racecar仿真竞赛经验总结（四）- AMCL与小车定位</h1><p>前文链接：</p><p><a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><p><a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a></p><p><a href="https://zacdeng.github.io/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/">racecar仿真竞赛经验总结（三）- 激光SLAM建图</a></p><p>由于比赛禁止使用gazebo中直接发布的小车位置坐标，只允许使用车模上有的相机、10HZ激光雷达和100HZ的IMU进行定位。为保证定位精度，博主采用rf2o_laser_odometry将小车的激光雷达数据转为能标识小车所在位置的里程计信息，同时为了提升精度，将此里程计信息通过robot_pose_ekf融合IMU数据生成更精准的里程计信息。最后搭配AMCL解决小车的定位问题。</p><h2 id="rf2o-laser-odometry"><a href="#rf2o-laser-odometry" class="headerlink" title="rf2o_laser_odometry"></a>rf2o_laser_odometry</h2><p>源码包github链接：<a href="https://github.com/MAPIRlab/rf2o_laser_odometry">rf2o_laser_odometry</a></p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>RF2O是一种基于平面激光扫描的2D里程表估算方法。 对于没有精确里程表的移动机器人很有用。RF2O是一种快速精确的方法，可以从连续的范围扫描中估算激光雷达的平面运动。 对于每个扫描点，其根据传感器速度制定范围流量约束方程，并最小化所得几何约束的鲁棒函数以获得运动估计。 与传统方法相反，此方法不搜索对应关系，而是以密集3D视觉测距法为基础，基于扫描梯度执行密集扫描对齐。RF2O的极低计算成本（在单个CPU内核上为0.9毫秒）加上较高的精确度，使其成为那些需要平面测距的机器人应用的合适方法。</p><h3 id="视频Demo"><a href="#视频Demo" class="headerlink" title="视频Demo"></a>视频Demo</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/eGDoVk93otY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>从激光雷达数据获得里程计信息的方法除了rf2o_laser_odometry之外，laser_scan_matcher也是一个很不错的选择！</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><h4 id="订阅主题-Subscribed-Topics"><a href="#订阅主题-Subscribed-Topics" class="headerlink" title="订阅主题 - Subscribed Topics"></a>订阅主题 - Subscribed Topics</h4><ul><li><p><code>laser_scan</code> (<a href="http://docs.ros.org/api/sensor_msgs/html/msg/LaserScan.html">sensor_msgs&#x2F;LaserScan</a>)D</p><p>Laser scans to process. (This topic can be remapped via the ~laser_scan_topic parameter)</p></li><li><p><code> tf</code> (<a href="http://docs.ros.org/api/tf/html/msg/tfMessage.html">tf&#x2F;tfMessage</a>)</p><p>Transforms</p></li></ul><h4 id="发布主题-Published-Topics"><a href="#发布主题-Published-Topics" class="headerlink" title="发布主题 - Published Topics"></a>发布主题 - Published Topics</h4><ul><li><p><code>odom</code> (<a href="http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html">nav_msgs&#x2F;Odometry</a>)</p><p>Odometry estimations as a ROS topic. (This topic can be remapped via the ~odom_frame_id parameter)</p></li><li><p><code>tf</code> (<a href="http://docs.ros.org/api/tf/html/msg/tfMessage.html">tf&#x2F;tfMessage</a>)</p><p>Publishes the transform from the \base_link (which can be remapped via the ~base_frame_id parameter) to \odom (which can be remapped via the ~odom_frame_id parameter).</p></li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>由于rf2o_laser_odometry包发出的&#x2F;odom主题中的pose和twist是不包含covariance的，而之后使用的robot_pose_ekf需要用到协方差矩阵，因此这里需要提供一个静止和运动时的协方差矩阵才可以正常工作，以下的协方差矩阵可供参考（使用不同的协方差矩阵对其效果有很大影响！可以自行尝试）</li></ul><div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment">#define ODOM_POSE_COVARIANCE  &#123;1e-3, 0, 0, 0, 0, 0, </span>   <span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,    <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,    <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,   <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>,   <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e3&#125;<span class="hljs-comment">#define ODOM_POSE_COVARIANCE2 &#123;1e-9, 0, 0, 0, 0, 0, </span>   <span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">3</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,   <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                               <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                               <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>,                               <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">9</span>&#125;<span class="hljs-comment">#define ODOM_TWIST_COVARIANCE &#123;1e-3, 0, 0, 0, 0, 0, </span>   <span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                               <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e3&#125;<span class="hljs-comment">#define ODOM_TWIST_COVARIANCE2 &#123;1e-9, 0, 0, 0, 0, 0,</span><span class="hljs-attribute">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">3</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e6, <span class="hljs-number">0</span>,                                <span class="hljs-attribute">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>e-<span class="hljs-number">9</span>&#125;</code></pre></div><p>有了协方差矩阵后只需要在特定位置将其付给odom.pose.covariance和odom.twist.covariance即可</p><p><img src="https://i.loli.net/2020/08/03/q37UknbQBlytPO9.png" alt="image-20200803173956794"></p><ul><li>由于rf2o_laser_odometry会发布一个tf变化，这将导致tf树发生改变，这里不需要使用可以在源码中禁止其发布</li></ul><p><img src="https://i.loli.net/2020/08/03/XzwLkdF9QetlR1r.png" alt="image-20200803174131147"></p><h4 id="参数调整"><a href="#参数调整" class="headerlink" title="参数调整"></a>参数调整</h4><ul><li><p><code>~laser_scan_topic</code> (string, default: &#x2F;laser_scan)</p><p>Topic name where lidar scans are being published.</p></li><li><p><code>~base_frame_id</code> (string, default: &#x2F;base_link)</p><p>TF frame name of the mobile robot base. A tf transform from the laser_frame to the base_frame should exist.</p></li><li><p><code>~odom_frame_id</code> (string, default: &#x2F;odom)</p><p>TF frame name for published odometry estimations. This same parameter is used to publish odometry as a topic.</p></li><li><p><code>~freq</code> (double, default: 10.0)</p><p>Odometry publication rate (Hz).</p></li></ul><h3 id="launch文件参考"><a href="#launch文件参考" class="headerlink" title="launch文件参考"></a>launch文件参考</h3><div class="code-wrapper"><pre><code class="hljs abnf">&lt;launch&gt; &lt;node pkg<span class="hljs-operator">=</span><span class="hljs-string">&quot;rf2o_laser_odometry&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;rf2o_laser_odometry_node&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;rf2o_laser_odometry&quot;</span>&gt;  &lt;param name<span class="hljs-operator">=</span><span class="hljs-string">&quot;laser_scan_topic&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;/scan&quot;</span>/&gt;  &lt;param name<span class="hljs-operator">=</span><span class="hljs-string">&quot;base_frame_id&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;/base_footprint&quot;</span>/&gt;  &lt;param name<span class="hljs-operator">=</span><span class="hljs-string">&quot;odom_frame_id&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;/odom&quot;</span>/&gt;  &lt;param name<span class="hljs-operator">=</span><span class="hljs-string">&quot;freq&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;10.0&quot;</span>/&gt; &lt;/node&gt;&lt;/launch&gt;</code></pre></div><h2 id="robot-pose-ekf"><a href="#robot-pose-ekf" class="headerlink" title="robot_pose_ekf"></a>robot_pose_ekf</h2><p>ROS Wiki：<a href="http://wiki.ros.org/robot_pose_ekf">http://wiki.ros.org/robot_pose_ekf</a></p><p>源码包github链接：<a href="https://github.com/ros-planning/navigation/tree/kinetic-devel/robot_pose_ekf">robot_pose_ekf</a></p><p>创客智造教程：<a href="https://www.ncnynl.com/archives/201708/1909.html">https://www.ncnynl.com/archives/201708/1909.html</a></p><p>源码分析：<a href="https://blog.csdn.net/zhxue_11/article/details/83828877">https://blog.csdn.net/zhxue_11/article/details/83828877</a></p><p>问题整理和修改教程：<a href="https://blog.csdn.net/shenghuaijing3314/article/details/78220151">https://blog.csdn.net/shenghuaijing3314/article/details/78220151</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><a href="https://github.com/ros-planning/navigation/tree/kinetic-devel/robot_pose_ekf">robot_pose_ekf</a>是ROS Navigation stack中的一个包，通过扩展卡尔曼滤波器对imu、里程计odom、视觉里程计vo的数据进行融合，来估计平面移动机器人的真实位置姿态，输出odom_combined消息。robot_pose_ekf只适用于平面上的轮式移动机器人，因此odom信息中的z，pitch和roll分量可以被忽略。IMU可以提供车体坐标系相对于世界坐标系的姿态（RPY角），其中Roll和Pitch是绝对角度，因为有重力方向作为参考，而偏航角Yaw则是一个相对角度（如果IMU中没有集成电子罗盘测量地球磁场角作为参考）。IMU姿态的协方差矩阵代表了姿态测量的不确定度。</p><h3 id="节点-1"><a href="#节点-1" class="headerlink" title="节点"></a>节点</h3><h4 id="订阅主题-Subscribed-Topics-1"><a href="#订阅主题-Subscribed-Topics-1" class="headerlink" title="订阅主题 - Subscribed Topics"></a>订阅主题 - Subscribed Topics</h4><ul><li><p><code>odom</code>（编码器）<br> (<a href="https://link.jianshu.com/?t=http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html">nav_msgs&#x2F;Odometry</a>)<strong>2D pose</strong> (轮式里程计): 二维姿态包含机器人平面中的坐标和朝向以及方位协方差。平面机器人中，其中z, roll and pitch 忽略。</p></li><li><p><code>imu_data</code>（IMU）<br> (<a href="https://link.jianshu.com/?t=http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html">sensor_msgs&#x2F;Imu</a>)<strong>3D orientation</strong> (used by the IMU): 提供包含相对世界坐标系的Roll, Pitch 和 Yaw 角度。 Roll 和 Pitch 角是绝对角度，Yaw是相对角度。协方差矩阵决定了方向的不确定性， robot pose ekf 在仅仅接收此msg时不会工作，它需要 ‘vo’ 或’odom’ 主题。</p></li><li><p><code>vo</code>（视觉里程计）<br> (<a href="https://link.jianshu.com/?t=http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html">nav_msgs&#x2F;Odometry</a>)<strong>3D pose</strong> (used by Visual Odometry): 此主题包含机器人全方向及相应协方差信息，当传感器只测量部分3维信息时，需要制定一个较大的协方差用来忽略此项数据。</p></li></ul><p>The robot_pose_ekf节点不需要三个主题同时有效，每个主题数据都会产生一个位置估计及协方差。主题的频率也不一定一致，也具有不同的延迟。数据间歇收发，这时节点将自动检测使用有效的传感数据。添加自主的传感数据参照GPS的示例即可。 <a href="https://link.jianshu.com/?t=http://wiki.ros.org/robot_pose_ekf/Tutorials/AddingGpsSensor">the Adding a GPS sensor tutorial</a></p><h4 id="发布主题-Published-Topics-1"><a href="#发布主题-Published-Topics-1" class="headerlink" title="发布主题 - Published Topics"></a>发布主题 - Published Topics</h4><ul><li><code>robot_pose_ekf/odom_combined</code> (<a href="https://link.jianshu.com/?t=http://docs.ros.org/api/geometry_msgs/html/msg/PoseWithCovarianceStamped.html">geometry_msgs&#x2F;PoseWithCovarianceStamped</a>)<br>过滤器的输出（估计的3D机器人姿态）</li></ul><h4 id="TF变换"><a href="#TF变换" class="headerlink" title="TF变换"></a>TF变换</h4><ul><li><code>odom_combined</code> → <code>base_footprint</code></li></ul><p>robot_pose_ekf在输出odom_combined信息同时还会发布相关的坐标变换，输入下面指令查看tf变换关系：</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">rosrun rqt_tf_tree rqt_tf_tree</span></code></pre></div><p>可以看出robot_pose_ekf节点会发布base_footprint坐标系相对于odom_combined坐标系的变换：</p><p><img src="https://i.loli.net/2020/08/03/8LPASBuq2vRFyMw.png" alt="image-20200803175848822"></p><h3 id="launch文件参考-1"><a href="#launch文件参考-1" class="headerlink" title="launch文件参考"></a>launch文件参考</h3><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">launch</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;robot_pose_ekf&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;robot_pose_ekf&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robot_pose_ekf&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;output_frame&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;odom_combined&quot;</span>/&gt;</span>  #表示输出的主题：odom_combined    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_footprint_frame&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;base_footprint&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;freq&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30.0&quot;</span>/&gt;</span>                   #表示发布主题的频率 30hz    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sensor_timeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1.0&quot;</span>/&gt;</span>          #表示超时时间，1.0表示1秒，如果1秒内没有传感器输入，会报错。    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_used&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>              #表示里程计使能    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;imu_used&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>               #表示imu使能    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vo_used&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>               #视觉里程计    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;self_diagnose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!--remap from=&quot;imu_data&quot;  to =&quot;imu_data1&quot;/--&gt;</span>      #取消注释为添加滤波  <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">launch</span>&gt;</span></code></pre></div><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>robot_pose_ekf中用到的imu和odom数据都需要有协方差矩阵</p><p>imu数据的协方差矩阵设置可以参考：<a href="https://github.com/Arkapravo/turtlebot/blob/master/turtlebot_node/src/turtlebot_node/gyro.py">https://github.com/Arkapravo/turtlebot/blob/master/turtlebot_node/src/turtlebot_node/gyro.py</a> (官方提供的模型中已经设置好这里可以直接使用)</p><div class="code-wrapper"><pre><code class="hljs stylus">self<span class="hljs-selector-class">.imu_data</span><span class="hljs-selector-class">.orientation_covariance</span> = <span class="hljs-selector-attr">[1e6, 0, 0, 0, 1e6, 0, 0, 0, 1e-6]</span>self<span class="hljs-selector-class">.imu_data</span><span class="hljs-selector-class">.angular_velocity_covariance</span> = <span class="hljs-selector-attr">[1e6, 0, 0, 0, 1e6, 0, 0, 0, 1e-6]</span></code></pre></div><p>底盘运动时odom的协方差矩阵在上文rf2o_laser_odometry时已给出</p><p><em>注意imu信息的协方差矩阵中代表机器人航向角的分量方差为1e-6，而里程计信息的协方差矩阵中机器人姿态分量的协方差为1e3，两个值相差很大。在进行EKF融合时，会更“相信”imu提供的姿态信息，因为其方差更小。比如机器人在转动过程中轮子发生了打滑，用编码器推算出的姿态一直在旋转，而实际姿态（主要由IMU测量得到）却没发生太大变化，这种情况就需要使用信息融合方法来减小误差。协方差矩阵中的参数设置非常重要，要根据传感器手册或者实际使用测量来确定。</em></p><p>在网上看到一个博主写的很不错这里引用一下–<a href="https://www.cnblogs.com/21207-iHome/p/8117069.html">博客链接</a></p><p>下图为vrep仿真中robot_pose_ekf的效果，其中蓝色的曲线是使用robot_pose_ekf融合后的机器人运动轨，红色为原始的带噪声的轨迹曲线（这只是一个例子，实际效果怎么样还要调整各种参数）：</p><p><img src="https://i.loli.net/2020/08/03/xElAv7Y8stwQX1z.gif" alt="img"></p><p>另外需要注意的是，robot_pose_ekf会发布base_link到odom的tf变换，因此我们自己的程序中就不用发布了，否则会出现冲突（在tf树中是不能构成回路的，只能有一个父坐标系，但是可以有很多子坐标系 ）。下图是仿真过程中rivz显示的原始odom（黄色箭头）和融合后的odom_combined（红色箭头）信息，以及base_link坐标系和odom坐标系间的变换关系。</p><p><img src="https://i.loli.net/2020/08/03/bh4S1gk5HluOxoi.gif" alt="img"></p><h2 id="AMCL"><a href="#AMCL" class="headerlink" title="AMCL"></a>AMCL</h2><p>ROS Wiki：<a href="http://wiki.ros.org/amcl">amcl</a></p><p>古月居教程：<a href="https://www.guyuehome.com/273">https://www.guyuehome.com/273</a></p><p>创客智造教程：<a href="https://www.ncnynl.com/archives/201708/1911.html">https://www.ncnynl.com/archives/201708/1911.html</a></p><p>参数调整——csdn：<a href="https://www.cnblogs.com/dyan1024/p/7825988.html">https://www.cnblogs.com/dyan1024/p/7825988.html</a></p><p>其他博客链接：<a href="https://magicalsoso.github.io/2020/02/18/TwoWheelDiffChassisSLAM10-Navigation/#amcl%E9%85%8D%E7%BD%AE">https://magicalsoso.github.io/2020/02/18/TwoWheelDiffChassisSLAM10-Navigation/#amcl%E9%85%8D%E7%BD%AE</a></p><p>关于amcl的相关教程在网上很多，这里就不对其原理再展开描述了，博主主要分享一下amcl参数配置和所遇到的问题</p><h3 id="amcl中包含的话题和服务"><a href="#amcl中包含的话题和服务" class="headerlink" title="amcl中包含的话题和服务"></a>amcl中包含的话题和服务</h3><p><img src="https://i.loli.net/2020/08/03/iPthjyTXAZMK83W.png" alt="image-20200803183524490"></p><h3 id="amcl参数配置"><a href="#amcl参数配置" class="headerlink" title="amcl参数配置"></a>amcl参数配置</h3><p>先上我们的amcl配置</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">launch</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scan_topic&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;scan&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;amcl&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;amcl&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;amcl&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;screen&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">remap</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;scan_filtered&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- Overall filter parameters --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;min_particles&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;500&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;max_particles&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kld_err&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kld_z&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.99&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update_min_d&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.25&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Translational movement required before performing a filter update. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update_min_a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Rotational movement required before performing a filter update. 0.1 represents 5.7 degrees  --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;resample_interval&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Number of filter updates required before resampling. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;transform_tolerance&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.1&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Default 0.1; time with which to post-date the transform that is published, to indicate that this transform is valid into the future. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;recovery_alpha_slow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.001&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;recovery_alpha_fast&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.1&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gui_publish_rate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10.0&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save_pose_rate&quot;</span>   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.3&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;use_map_topic&quot;</span>    <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;first_map_only&quot;</span>   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- set particles init pose to robot pose --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_pose_x&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-0.5&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- -0.5 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_pose_y&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.0&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_pose_a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.0&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_cov_xx&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.09&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_cov_yy&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.09&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initial_cov_aa&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.03&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- pi/12 * pi/12 0.033--&gt;</span>        <span class="hljs-comment">&lt;!-- Laser model parameters --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">remap</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;$(arg scan_topic)&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_min_range&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-1&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_max_range&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_max_beams&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_z_hit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.5&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_z_short&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_z_max&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_z_rand&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.5&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_sigma_hit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_lambda_short&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.1&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_likelihood_max_dist&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2.0&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;laser_model_type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;likelihood_field&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!-- Odometry model parameters --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_model_type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;diff&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_alpha1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Specifies the expected noise in odometry&#x27;s rotation estimate from the rotational component of the robot&#x27;s motion. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_alpha2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Specifies the expected noise in odometry&#x27;s rotation estimate from translational component of the robot&#x27;s motion. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_alpha3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Specifies the expected noise in odometry&#x27;s translation estimate from the translational component of the robot&#x27;s motion. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_alpha4&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.2&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Specifies the expected noise in odometry&#x27;s translation estimate from the rotational component of the robot&#x27;s motion. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_alpha5&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.1&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--only used if model is &quot;omni&quot;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_frame_id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;odom_combined&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_frame_id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;base_footprint&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- Change this if you want to change your base frame id. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;global_frame_id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;map&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tf_broadcast&quot;</span>    <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">launch</span>&gt;</span></code></pre></div><p>其中具体的参数含义请自行查阅ros wiki或者其他博客链接，博主分享一下这里面比较重要的参数</p><ul><li><p><code>min_particles</code>：</p><p>滤波器中的最少粒子数，值越大定位效果越好，但是相应的会增加主控平台的计算资源消耗。</p></li><li><p><code>max_particles</code>：</p><p>滤波器中最多粒子数，是一个上限值，因为太多的粒子数会导致系统资源消耗过多。</p></li><li><p><code>initial_pose_x</code>、<code>initial_pose_y</code>和<code>initial_pose_a</code>：</p><p>初始位姿均值，用于初始化高斯分布滤波器，initial_pose_参数决定撒出去的初始位姿粒子集范围中心，这里只要把位置定在小车中心即可</p></li><li><p><code>initial_cov_xx</code>、<code>initial_cov_yy</code>和<code>initial_cov_aa</code>：</p><p>初始位姿协方差，用于初始化高斯分布滤波器。initial_cov_参数决定初始粒子集的范围，将其调大会扩大初始化的粒子分布范围，比赛中只要将其范围扩大到赛道宽度左右大小即可</p></li><li><p><code>odom_alpha1~4</code>：</p><p>由于小车模型为阿卡曼模型，amcl中odom_model_type设置为diff故只需前四个即可</p><ul><li><code>odom_alpha1</code> (<code>double</code>, default: 0.2)：指定由机器人运动部分的旋转分量估计的里程计旋转的期望噪声，默认0.2（旋转存在旋转噪声）</li><li><code>odom_alpha2</code> (<code>double</code>, default: 0.2)：机器人运动部分的平移分量估计的里程计旋转的期望噪声，默认0.2（旋转中可能出现平移噪声）</li><li><code>odom_alpha3</code> (<code>double</code>, default: 0.2)：机器人运动部分的平移分量估计的里程计平移的期望噪声，如果你自认为自己机器人的里程计信息比较准确那么就可以将该值设置的很小</li><li><code>odom_alpha4</code> (<code>double</code>, default: 0.2)：机器人运动部分的旋转分量估计的里程计平移的期望噪声，你设置的这4个alpha值越大说明里程计的误差越大</li></ul></li></ul><h3 id="比赛中遇到的坑"><a href="#比赛中遇到的坑" class="headerlink" title="比赛中遇到的坑"></a>比赛中遇到的坑</h3><p>首先有朋友可能要问，amcl发布的主题不是有一个&#x2F;amcl_pose了吗？为什么还要使用rf2o + ekf这样的方法来定位呢？</p><p>确实理论上可以使用&#x2F;amcl_pose发布的信息直接进行定位，但&#x2F;amcl_pose发布的频率太低了…根本没办法让高速移动的小车实现精准的定位，关于其频率可以使用以下代码进行查看</p><div class="code-wrapper"><pre><code class="hljs bash">rostopic hz /amcl_pose</code></pre></div><p>由于当时没有具体搞懂amcl的原理，配置完amcl的launch文件并搭建好tf树后以为已经把amcl用上了，当时的tf树变换如下：</p><p><img src="https://i.loli.net/2020/08/03/pOjK2nJFd4rmhMx.png" alt="image-20200803195009706"></p><p>结果最后发现实际使用的还是laser+imu整合出的odometry，效果飘得一批，如下图所示</p><p><img src="https://i.loli.net/2020/08/03/P9ByWHrKDeGCRMa.png" alt="image-20200803192118274"></p><p>其中绿色点是小车读到的下一个目标点的位置，黑色点是小车获得的自身位置，可以发现两者在拐弯时偏差很大，当时以为是amcl协方差的问题尝试了半天，也修改了robot_pose_ekf和rf2o_laser_odometry里的与yaw相关的协方差矩阵，效果都不尽人意…后来请教学长才发现tf变换压根没发布，最后是主动监听map-&gt;basefootprint的tf变换把amcl纠正偏差的效果用上在解决问题（具体代码在odom_tf_converter包里了）</p><p>最后定位结果如下：</p><p><img src="https://i.loli.net/2020/08/03/nX5SCz6QaAl1ZvU.png" alt="image-20200803193322430"></p>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（三）- 激光SLAM建图</title>
    <link href="/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/"/>
    <url>/2020/08/02/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%20SLAM/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（三）-激光SLAM"><a href="#racecar仿真竞赛经验总结（三）-激光SLAM" class="headerlink" title="racecar仿真竞赛经验总结（三）- 激光SLAM"></a>racecar仿真竞赛经验总结（三）- 激光SLAM</h1><p>前文链接：</p><p><a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><p><a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a></p><p>由于使用激光SLAM建图需要搭建完整的tf树变换，博主提供的代码包已完整包含可以直接使用并建图，初学者建议使用<a href="https://zacdeng.github.io/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/">racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</a>中提供的北邮老哥的racecar demo进行尝试</p><h2 id="Gmapping构建地图"><a href="#Gmapping构建地图" class="headerlink" title="Gmapping构建地图"></a>Gmapping构建地图</h2><p><a href="http://wiki.ros.org/gmapping">Gmapping - ROS Wiki</a></p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>此部分介绍ROS封装了的OpenSlam GMapping，gmapping功能包提供了基于激光的SLAM，在ROS系统中使用slam_gmapping节点表示。 通过该节点用户可以用机器人在移动过程中激光传感器获取的数据创建2D栅格地图。</p><h4 id="订阅主题-Subscribed-Topics"><a href="#订阅主题-Subscribed-Topics" class="headerlink" title="订阅主题 - Subscribed Topics"></a>订阅主题 - Subscribed Topics</h4><ul><li>tf (tf&#x2F;tfMessage)，用于激光器坐标系，基座坐标系，里程计坐标系之间转换</li><li>scan (sensor_msgs&#x2F;LaserScan ) ，激光器扫描数据</li></ul><h4 id="发布主题-Published-Topics"><a href="#发布主题-Published-Topics" class="headerlink" title="发布主题 - Published Topics"></a>发布主题 - Published Topics</h4><ul><li>map_metadata (nav_msgs&#x2F;MapMetaData)，周期性发布地图metadata数据</li><li>map (nav_msgs&#x2F;OccupancyGrid)，周期性发布地图数据</li><li>~entropy (std_msgs&#x2F;Float64)，发布机器人姿态分布熵的估计</li></ul><h4 id="服务-Service"><a href="#服务-Service" class="headerlink" title="服务 - Service"></a>服务 - Service</h4><ul><li>dynamic_map (nav_msgs&#x2F;GetMap)，调用该服务可以获取地图数据</li></ul><h4 id="参数调节"><a href="#参数调节" class="headerlink" title="参数调节"></a>参数调节</h4><h5 id="重要参数说明"><a href="#重要参数说明" class="headerlink" title="重要参数说明"></a>重要参数说明</h5><ul><li>particles (int, default: 30) gmapping算法中的粒子数，因为gmapping使用的是粒子滤波算法，粒子在不断地迭代更新，所以选取一个合适的粒子数可以让算法在保证比较准确的同时有较高的速度</li><li>minimumScore (float, default: 0.0) 最小匹配得分，这个参数很重要，它决定了对激光的一个置信度，越高说明对激光匹配算法的要求越高，激光的匹配也越容易失败而转去使用里程计数据，而设的太低又会使地图中出现大量噪声，所以需要权衡调整</li></ul><h5 id="所有参数索引"><a href="#所有参数索引" class="headerlink" title="所有参数索引"></a>所有参数索引</h5><p>这里提供一些中文翻译版本的参数说明，建议直接去上文ros wiki查</p><ul><li>~inverted_laser (string, default:”false”)， (已经已出在 版本 1.1.1; 用transform data 替换它) 激光器是right side up (scans are ordered CCW),还是 upside down (scans are ordered CW)?</li><li>~throttle_scans (int, default: 1)，处理的扫描数据门限，默认每次处理1个扫描数据（可以设置更大跳过一些扫描数据）</li><li>~base_frame (string, default:”base_link”)，机器人基座坐标系，在此例程中应为base_footprint</li><li>~map_frame (string, default:”map”)，地图坐标系</li><li>~odom_frame (string, default:”odom”)，里程计坐标系</li><li>~map_update_interval (float, default: 5.0)，地图更新频率</li><li>~maxUrange (float, default: 80.0)，探测最大可用范围，即光束能到达的范围</li><li>~sigma (float, default: 0.05)，endpoint匹配标准差</li><li>~kernelSize (int, default: 1)，用于查找对应的kernel size</li><li>~lstep (float, default: 0.05)，平移优化步长</li><li>~astep (float, default: 0.05)，旋转优化步长</li><li>~iterations (int, default: 5)，扫描匹配迭代步数</li><li>~lsigma (float, default: 0.075)，用于扫描匹配概率的激光标准差</li><li>~ogain (float, default: 3.0)，似然估计为平滑重采样影响使用的gain</li><li>~lskip (int, default: 0)，每次扫描跳过的光束数.</li><li>~minimumScore (float, default: 0.0)，为获得好的扫描匹配输出结果，用于避免在大空间范围使用有限距离的激光扫描仪（如5m）出现的jumping pose estimates问题。 当 Scores高达600+，如果出现了该问题可以考虑设定值50。</li><li>~srr (float, default: 0.1)，平移时里程误差作为平移函数(rho&#x2F;rho)</li><li>~srt (float, default: 0.2)，平移时的里程误差作为旋转函数 (rho&#x2F;theta)</li><li>~str (float, default: 0.1)，旋转时的里程误差作为平移函数 (theta&#x2F;rho)</li><li>~stt (float, default: 0.2)，旋转时的里程误差作为旋转函数 (theta&#x2F;theta)</li><li>~linearUpdate (float, default: 1.0)，机器人每旋转这么远处理一次扫描</li><li>~angularUpdate (float, default: 0.5)，Process a scan each time the robot rotates this far</li><li>~temporalUpdate (float, default: -1.0)，如果最新扫描处理比更新慢，则处理1次扫描。该值为负数时候关闭基于时间的更新</li><li>~resampleThreshold (float, default: 0.5)，基于重采样门限的Neff</li><li>~particles (int, default: 30)，滤波器中粒子数目</li><li>~xmin (float, default: -100.0)，地图初始尺寸</li><li>~ymin (float, default: -100.0)，地图初始尺寸</li><li>~xmax (float, default: 100.0)，地图初始尺寸</li><li>~ymax (float, default: 100.0)，地图初始尺寸</li><li>~delta (float, default: 0.05)，地图分辨率</li><li>~llsamplerange (float, default: 0.01)，于似然计算的平移采样距离</li><li>~llsamplestep (float, default: 0.01)，用于似然计算的平移采样步长</li><li>~lasamplerange (float, default: 0.005)，用于似然计算的角度采样距离</li><li>~lasamplestep (float, default: 0.005)，用于似然计算的角度采样步长</li><li>~transform_publish_period (float, default: 0.05)，变换发布时间间隔.</li><li>~occ_thresh (float, default: 0.25)，栅格地图栅格值 (i.e., set to 100 in the resultingsensor_msgs&#x2F;LaserScan)</li><li>~maxRange (float)，传感器最大范围。如果在传感器距离范围内没有障碍物应该在地图上显示为自由空间。 maxUrange &lt; 真实传感器最大距离范围 &lt;&#x3D; maxRange</li></ul><h5 id="参考配置"><a href="#参考配置" class="headerlink" title="参考配置"></a>参考配置</h5><p>北邮老哥的gmapping配置在官方地图上效果不是很理想，具体怎么不理想呢…嗯</p><p><img src="https://i.loli.net/2020/08/03/ewaTQIKN6hBEnx9.png" alt="image-20200803190939274"></p><p>这里给出一份gmapping参考配置（如果安装了turtlebot可以直接用turtlebot的gmapping建图😁 比赛时我们就是走了这个捷径没怎么配置gmapping）</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">launch</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;scan_topic&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;scan&quot;</span> /&gt;</span> //laser的topic名称，与自己的激光的topic相对应 <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_frame&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;base_footprint&quot;</span>/&gt;</span>//机器人的坐标系 <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_frame&quot;</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;odom&quot;</span>/&gt;</span>//世界坐标  <span class="hljs-tag">&lt;<span class="hljs-name">node</span> <span class="hljs-attr">pkg</span>=<span class="hljs-string">&quot;gmapping&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;slam_gmapping&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slam_gmapping&quot;</span> <span class="hljs-attr">output</span>=<span class="hljs-string">&quot;screen&quot;</span>&gt;</span>//启动slam的节点 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;base_frame&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$(arg base_frame)&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;odom_frame&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$(arg odom_frame)&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map_update_interval&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.01&quot;</span>/&gt;</span>//地图更新的一个间隔，两次scanmatch的间隔，地图更新也受scanmach的影响，如果scanmatch没有成功的话，是不会更新地图的 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUrange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4.0&quot;</span>/&gt;</span>//set maxUrange &lt; maximum range of the real sensor &lt;= maxRange <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxRange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5.0&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sigma&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kernelSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lstep&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>optimize机器人移动的初始值（距离） <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;astep&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>//optimize机器人移动的初始值（角度） <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;iterations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span>//icp的迭代次数 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lsigma&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.075&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ogain&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.0&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lskip&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span>//为0,表示所有的激光都处理，尽可能为零，如果计算压力过大，可以改成1 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minimumScore&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span>//很重要，判断scanmatch是否成功的阈值，过高的话会使scanmatch失败，从而影响地图更新速率 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;srr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.01&quot;</span>/&gt;</span>//以下四个参数是运动模型的噪声参数 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;srt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.02&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.01&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stt&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.02&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;linearUpdate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span>//机器人移动linearUpdate距离，进行scanmatch <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;angularUpdate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.0436&quot;</span>/&gt;</span>机器人选装angularUpdate角度，进行scanmatch <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;temporalUpdate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-1.0&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;resampleThreshold&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.5&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;particles&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8&quot;</span>/&gt;</span>//很重要，粒子个数 <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">&lt;param name=&quot;xmin&quot; value=&quot;-50.0&quot;/&gt;</span><span class="hljs-comment">&lt;param name=&quot;ymin&quot; value=&quot;-50.0&quot;/&gt;</span><span class="hljs-comment">&lt;param name=&quot;xmax&quot; value=&quot;50.0&quot;/&gt;</span><span class="hljs-comment">&lt;param name=&quot;ymax&quot; value=&quot;50.0&quot;/&gt;</span><span class="hljs-comment">make the starting size small for the benefit of the Android client&#x27;s memory...</span><span class="hljs-comment">--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xmin&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-1.0&quot;</span>/&gt;</span>//map初始化的大小 <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ymin&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;-1.0&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xmax&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1.0&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ymax&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1.0&quot;</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delta&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.05&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;llsamplerange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.01&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;llsamplestep&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.01&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lasamplerange&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.005&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lasamplestep&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.005&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">remap</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;$(arg scan_topic)&quot;</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">node</span>&gt;</span></code></pre></div><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://openslam.org/gmapping.html">http://openslam.org/gmapping.html</a></li><li><a href="http://blog.csdn.net/x_r_su/article/details/52723244">http://blog.csdn.net/x_r_su/article/details/52723244</a></li><li><a href="http://blog.csdn.net/eaibot/article/details/51628371">http://blog.csdn.net/eaibot/article/details/51628371</a></li><li><a href="http://www.ncnynl.com/archives/201702/1364.html">http://www.ncnynl.com/archives/201702/1364.html</a></li></ul><h5 id="方法推荐"><a href="#方法推荐" class="headerlink" title="方法推荐"></a>方法推荐</h5><p>使用reconfigure调参会方便很多，也比在yaml文件里直观</p><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">rosrun rqt_reconfigure rqt_reconfigure</span></code></pre></div><p><img src="https://i.loli.net/2020/08/03/acYQRkEd8lSrI1q.png" alt="image-20200803130216057"></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul><li><p>打开键盘控制，启动gazebo并加载地图</p><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_gazebo racecar.<span class="hljs-built_in">launch</span></code></pre></div></li><li><p>修改gmapping参数配置</p><p>在racecar_gazebo&#x2F;launch&#x2F;gmapping.launch中修改对应参数项后启动gmapping（由于官方提供的源码包已经搭建好了激光雷达的tf树变换，这里直接启动就可以）</p><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_gazebo slam_gmapping.<span class="hljs-built_in">launch</span></code></pre></div></li><li><p>通过键盘操控小车完成建图</p></li><li><p>运行map_saver节点保存地图至racecar_gazebo&#x2F;worlds&#x2F;文件夹下</p><div class="code-wrapper"><pre><code class="hljs arcade">rosrun map_server map_saver -f ~<span class="hljs-regexp">/racecar_gazebo/</span>worlds</code></pre></div></li></ul><h2 id="Hector-mapping构建地图"><a href="#Hector-mapping构建地图" class="headerlink" title="Hector-mapping构建地图"></a>Hector-mapping构建地图</h2><p><a href="http://wiki.ros.org/hector_mapping">Hector_mapping - ROS Wiki</a></p><h3 id="参数介绍-1"><a href="#参数介绍-1" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>hector_mapping是基于LIDAR的SLAM的节点，没有里程计量和低计算资源。为了简单起见，下面详细介绍的ROS API从用户角度提供了常用选项的信息，但不是所有可用于调试的选项。</p><h4 id="订阅主题-Subscribed-Topics-1"><a href="#订阅主题-Subscribed-Topics-1" class="headerlink" title="订阅主题 - Subscribed Topics"></a>订阅主题 - Subscribed Topics</h4><ul><li>scan (sensor_msgs&#x2F;LaserScan) ，SLAM系统使用的激光扫描</li><li>syscommand (std_msgs&#x2F;String) ，系统命令。 如果字符串等于“复位”，则地图和机器人姿势被重置为其初始状态</li></ul><h4 id="发布主题-Published-Topics-1"><a href="#发布主题-Published-Topics-1" class="headerlink" title="发布主题 - Published Topics"></a>发布主题 - Published Topics</h4><ul><li>map_metadata (nav_msgs&#x2F;MapMetaData) ，从此话题获取地图元数据，将其锁定并定期更新</li><li>map (nav_msgs&#x2F;OccupancyGrid) ，从此话题获取地图数据，将其锁定并定期更新</li><li>slam_out_pose (geometry_msgs&#x2F;PoseStamped) ，估计的机器人姿势没有协方差</li><li>poseupdate (geometry_msgs&#x2F;PoseWithCovarianceStamped) ，估计的机器人姿态具有高斯估计的不确定性</li></ul><h4 id="服务-Service-1"><a href="#服务-Service-1" class="headerlink" title="服务 - Service"></a>服务 - Service</h4><ul><li>dynamic_map (nav_msgs&#x2F;GetMap) ，调用此服务以获取地图数据</li></ul><h4 id="参数调节-1"><a href="#参数调节-1" class="headerlink" title="参数调节"></a>参数调节</h4><h5 id="所有参数索引-1"><a href="#所有参数索引-1" class="headerlink" title="所有参数索引"></a>所有参数索引</h5><p>这里提供一些中文翻译版本的参数说明，建议直接去上文ros wiki查</p><ul><li>~base_frame (string, default: base_link) ，机器人基本坐标系的名称。这是用于定位和用于激光扫描数据的变换</li><li>~map_frame (string, default: map_link) ，map 坐标系的名称。</li><li>~odom_frame (string, default: odom) ，里程坐标系的名称。</li><li>~map_resolution (double, default: 0.025) ，地图分辨率[m]。 这是网格单元边缘的长度。</li><li>~map_size (int, default: 1024) ，地图的大小[每个轴的单元格数量]。 地图是正方形的并且具有（map_size * map_size）网格单元。</li><li>~map_start_x (double, default: 0.5) ，&#x2F;map的原点[0.0，1.0]在x轴上相对于网格图的位置。 0.5在中间。</li><li>~map_start_y (double, default: 0.5) ，&#x2F;map的原点[0.0，1.0]在y轴上相对于网格图的位置。 0.5在中间。</li><li>~map_update_distance_thresh (double, default: 0.4) ，执行地图更新的阈值[m]。平台必须以米为单位计算，在地图上一次更新起算到直行距离达到参数值之后再更新。</li><li>~map_update_angle_thresh (double, default: 0.9) ，执行地图更新的阈值[rad]。平台必须以米为单位计算，在地图上一次更新起算到转动达到参数值之后再更新。</li><li>~map_pub_period (double, default: 2.0) ，地图发布周期</li><li>~map_multi_res_levels (int, default: 3) ，地图多分辨率网格级数。</li><li>~update_factor_free (double, default: 0.4) ，用于更新范围[0.0,1.0]中的空闲单元格的地图更新修改器。 值0.5表示没有变化。</li><li>~update_factor_occupied (double, default: 0.9) ，用于在范围[0.0,1.0]中更新被占用单元的地图更新修改器。 值0.5表示没有变化。</li><li>~laser_min_dist (double, default: 0.4) ，系统使用的激光扫描端点的最小距离[m]。 距离此值更近的扫描端点将被忽略</li><li>~laser_max_dist (double, default: 30.0) ，系统使用的激光扫描端点的最大距离[m]。 超出此值的扫描端点将被忽略。</li><li>~laser_z_min_value (double, default: -1.0) ，相对于激光扫描器框架的最小高度[m]，用于系统使用的激光扫描端点。 低于此值的扫描端点将被忽略。</li><li>~laser_z_max_value (double, default: 1.0) ，相对于激光扫描仪框架的最大高度[m]，用于系统使用的激光扫描终点。 高于此值的扫描端点将被忽略。</li><li>~pub_map_odom_transform (bool, default: true) ，确定map-&gt; odom转换是否应该由系统发布</li><li>~output_timing (bool, default: false) ，通过ROS_INFO处理每个激光扫描的输出时序信息。</li><li>~scan_subscriber_queue_size (int, default: 5) ，扫描订阅器的队列大小。 如果日志文件以比实时速度更快的速度回放到hector_mapping，则应将此值设置为高值（例如50）。</li><li>~pub_map_scanmatch_transform (bool, default: true) ，确定scanmatcher到map的转换是否发布到TF.坐标名通过tf_map_scanmatch_transform_frame_name参数确定。</li><li>~tf_map_scanmatch_transform_frame_name (string, default: scanmatcher_frame) ，发布scanmatcher到map转换的坐标名。</li></ul><h5 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://wiki.ros.org/hector_slam/Tutorials/SettingUpForYourRobot">http://wiki.ros.org/hector_slam/Tutorials/SettingUpForYourRobot</a></li><li><a href="http://wiki.ros.org/hector_mapping">http://wiki.ros.org/hector_mapping</a></li><li><a href="http://www.youtube.com/playlist?list=PL0E462904E5D35E29">http://www.youtube.com/playlist?list=PL0E462904E5D35E29</a></li><li><a href="http://www.sim.tu-darmstadt.de/publ/download/2011_SSRR_KohlbrecherMeyerStrykKlingauf_Flexible_SLAM_System.pdf">http://www.sim.tu-darmstadt.de/publ/download/2011_SSRR_KohlbrecherMeyerStrykKlingauf_Flexible_SLAM_System.pdf</a></li></ul><h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>博主直接用turtlebot建好了地图，gmapping 的启动文件北邮老哥那个包里有写好的，如果需要使用hector需要自己编写launch文件了，编写好launch文件后启动方式和顺序与gmapping一样</p><h2 id="建图效果"><a href="#建图效果" class="headerlink" title="建图效果"></a>建图效果</h2><p><img src="https://i.loli.net/2020/08/03/8vQ42XOApMFrVEJ.png" alt="image-20200803130039780"></p>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</title>
    <link href="/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2020/08/01/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%20racecar%E4%BB%BF%E7%9C%9F%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（二）-racecar仿真模型介绍"><a href="#racecar仿真竞赛经验总结（二）-racecar仿真模型介绍" class="headerlink" title="racecar仿真竞赛经验总结（二）- racecar仿真模型介绍"></a>racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</h1><p>上篇博客链接：<a href="https://zacdeng.github.io/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/">racecar仿真竞赛经验总结（一） - 前言</a></p><h2 id="模型搭建"><a href="#模型搭建" class="headerlink" title="模型搭建"></a>模型搭建</h2><p>在上篇博客的依赖安装完全的基础上：</p><h3 id="直接使用github上搭建好的模型"><a href="#直接使用github上搭建好的模型" class="headerlink" title="直接使用github上搭建好的模型"></a>直接使用github上搭建好的模型</h3><ul><li>访问<a href="https://github.com/zacdeng/SmartCar-Competition">racecar_github</a>仓库并下载相应功能包</li><li>新建一个workspace，并将&#x2F;src移动到该工作空间下</li><li>在当前工作空间中右键打开终端，输入以下命令编译：</li></ul><div class="code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">catkin_make</span></code></pre></div><ul><li>建议直接将工作路径添加到系统总bashrc文件中，用以下命令可以进行编辑</li></ul><div class="code-wrapper"><pre><code class="hljs bash">gedit ~/.bashrc</code></pre></div><p>在最后添加 source + 工作空间路径 即可，这样每次roslaunch就可以自动source，如果不添加需要在每次打开工作空间时在终端输入 source devel&#x2F;setup.bash 进行手动source（一定要在总目录下）</p><p><strong>由于该模型用到了robot_pose_ekf，odom_tf_converter，rf2o_laser_odometry三个额外功能包，可能需要安装一些其他依赖，根据cmake提示进行安装即可（melodic版本可能会遇到一些问题无法正常使用，建议还是使用kinetic）</strong></p><p>鉴于博主开源代码中的模型已搭建完成，进行到这一步就可以直接使用launch文件启动了，这里简要介绍一些常用功能的启动，具体的使用方法在github中已详细说明</p><ul><li>启动rviz和gazebo查看小车结构以及初始地图</li></ul><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_gazbeo racecar_rviz.<span class="hljs-built_in">launch</span></code></pre></div><ul><li>启动键盘控制节点</li></ul><p>由于博主将这个node编写到racecar.launch文件中了，这里找到racecar.launch文件中的节点控制取消注释后重新使用上面的roslaunch，在打开的gazebo环境中就可以使用键盘控制小车运动</p><p><img src="https://i.loli.net/2020/08/01/KPbABGuqRQMIFY8.png" alt="image-20200801215552429"></p><h3 id="重新搭建模型"><a href="#重新搭建模型" class="headerlink" title="重新搭建模型"></a>重新搭建模型</h3><p>为了方便入门，这里建议直接使用北邮老哥提供的<a href="https://github.com/xmy0916/racecar">racecar_demo</a></p><ul><li>创建新的工作空间</li></ul><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p smartcar_ws/src</code></pre></div><ul><li>初始化工作空间</li></ul><div class="code-wrapper"><pre><code class="hljs arcade">cd ~<span class="hljs-regexp">/smartcar_ws/</span>srccatkin_init_workspace</code></pre></div><p>然后导入仿真文件，将百度云下载的压缩文件解压，将其中的racecar_description.7z文件复制到smartcar_ws&#x2F;src下并提取（如下图）：</p><p><img src="https://i.loli.net/2020/08/01/zM7V5orFsGWn92K.png" alt="image-20200801223218118"></p><p>将压缩文件中的smartcar_plane.7z文件提取到.gazebo下的models下，具体操作如下：</p><ul><li>在home目录下ctrl + h显示隐藏文件</li><li>找到.gazebo文件</li><li>进入文件中的models文件夹（如果没有就自己创建一个）</li><li>将smartcar_plane.7z解压到models下</li></ul><p><img src="https://i.loli.net/2020/08/01/quAswkVPjOedGTF.png" alt="image-20200801223555985"></p><p><img src="https://i.loli.net/2020/08/01/G9uwtY67RVaIlfi.png" alt="image-20200801223608474"></p><ul><li>在racecar_description文件夹下创建worlds文件夹，然后把百度网盘的world文件放到下面：</li></ul><p><img src="https://i.loli.net/2020/08/01/mNXDZenYbd6IAMg.png" alt="image-20200801223642163"></p><ul><li>修改一下launch文件夹中的racecar.launch文件:</li></ul><p><img src="https://i.loli.net/2020/08/01/2XIiSQWYChnlHqD.png" alt="image-20200801223756961"></p><ul><li>编译工程：</li></ul><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/smartcar_wscatkin_make</code></pre></div><ul><li>使能环境变量：</li></ul><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source ~/smartcar_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<span class="hljs-built_in">source</span> ~/.bashrc</code></pre></div><ul><li>启动仿真环境：</li></ul><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_description racecar.<span class="hljs-built_in">launch</span></code></pre></div><p><img src="https://i.loli.net/2020/08/01/BJROox2tknEDTuw.png" alt="image-20200801223934398"></p><ul><li>启动rviz和gazebo：</li></ul><div class="code-wrapper"><pre><code class="hljs applescript">roslaunch racecar_description racecar_rviz.<span class="hljs-built_in">launch</span></code></pre></div><p><img src="https://i.loli.net/2020/08/01/zyO3qrLlt1jCY8d.png" alt="image-20200801224012014"></p><h4 id="关于运动控制的配置"><a href="#关于运动控制的配置" class="headerlink" title="关于运动控制的配置"></a>关于运动控制的配置</h4><p>官方提供的车模已经配置好了关节，要做的就是写关节的控制器，关节控制器代码在racecar_control&#x2F;config&#x2F;racecar_control.yaml文件中，内容如下：</p><p><img src="https://i.loli.net/2020/08/01/qozBP9WMGlkTO3F.png" alt="image-20200801224518936"></p><p>其中Velocity Controllers部分控制转速的pid以及关节定义，Position Controllers部分配置转向关节的pid以及关节定义，对照官方的车模（文件路径在~&#x2F;urdf&#x2F;racecar.urdf.xacro下）修改对应的关节名字就行，也可以根据launch文件修改相应关节名：</p><p><img src="https://i.loli.net/2020/08/01/5KUsHnN8koJP6Rp.png" alt="image-20200801224842229"></p><p><em>在&lt;！–load the controllers–&gt;中指明了各个关节名，对应进行修改就行，有问题也可以参考github中&#x2F;src文件下已修改的文件就行</em></p>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>racecar仿真竞赛经验总结（一）- 前言</title>
    <link href="/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/"/>
    <url>/2020/07/31/racecar%E4%BB%BF%E7%9C%9F%E7%AB%9E%E8%B5%9B%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="racecar仿真竞赛经验总结（一）-前言"><a href="#racecar仿真竞赛经验总结（一）-前言" class="headerlink" title="racecar仿真竞赛经验总结（一） - 前言"></a>racecar仿真竞赛经验总结（一） - 前言</h1><p>由于疫情原因，今年的十五届恩智浦杯智能车竞赛室外光电组（ROS组别）初赛方式改为线上 rviz + gazebo 仿真的方式，由于是首次采用这个形式进行竞赛，博主遇到了一点问题也积累了一些经验，这个博客系列主要进行一些博主自己的经验分享以及心得总结~</p><p>因为官方要求提交源码的缘故，这里也将博主自己的源码包开源啦~</p><p>源码包地址放在这里，如果有帮助的话希望顺手给个star~😀   <a href="https://github.com/zacdeng/SmartCar-Competition">github传送门</a></p><p>(github里README文件列出了包的使用方法和遇到的一些问题的解决方法)</p><hr><h2 id="系列博客"><a href="#系列博客" class="headerlink" title="系列博客"></a>系列博客</h2><ul><li>racecar仿真竞赛经验总结（二）- racecar仿真模型介绍</li><li>racecar仿真竞赛经验总结（三）- Navigation导航包</li><li>racecar仿真竞赛经验总结（四）- Pure pursuit纯追踪算法</li><li>racecar仿真竞赛经验总结（五）- AMCL与小车定位</li><li>racecar仿真竞赛经验总结（六）- TF树</li></ul><hr><h2 id="仿真概要"><a href="#仿真概要" class="headerlink" title="仿真概要"></a>仿真概要</h2><p>博主参考的代码是基于ros组官方提供的代码包进行优化，重写了控制器和路径追踪算法（参考pure_pursuit算法：<a href="https://github.com/Hypha-ROS/hypharos_minicar">Ackermann based on MPC</a> 以及 <a href="https://github.com/Hypha-ROS/hypharos_racecar">Ackermann only</a>），优化了navigation导航包中的全局路径规划和局部路径规划算法（添加权重值避免遇到道路中间的障碍时反复规划路径），具体的算法以及该代码包的使用方法在github中已给出。</p><h3 id="环境及功能包"><a href="#环境及功能包" class="headerlink" title="环境及功能包"></a>环境及功能包</h3><ul><li>ubuntu16.04 ROS-Kinetic（ubuntu18.04 ROS-Melodic 也可以但有一些indigo版本的包无法使用，需要自行更换）</li><li><a href="http://wiki.ros.org/rf2o_laser_odometry">rf2o_laser_odometry</a>：订阅激光雷达&#x2F;scan话题进行一级定位</li><li><a href="http://wiki.ros.org/robot_pose_ekf">robot_pose_ekf</a>：整合rf2o和imu进行更精确的定位</li><li><a href="http://wiki.ros.org/amcl">amcl</a>：修正定位误差，实现相对精准的定位</li><li><a href="http://wiki.ros.org/navigation">navigation</a>：实现小车自主导航和避障功能</li><li>官方提供的小车模型和gazebo环境功能包</li></ul><h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><p>具体使用步骤参考北邮老哥的博客：<a href="https://www.guyuehome.com/9123">智能车仿真 —— 2020室外光电创意组线上仿真赛</a></p><h4 id="模型下载地址"><a href="#模型下载地址" class="headerlink" title="模型下载地址"></a>模型下载地址</h4><p><a href="https://pan.baidu.com/s/1TFBTbCeyQMuKnxemCbyNSw">https://pan.baidu.com/s/1TFBTbCeyQMuKnxemCbyNSw</a> 提取码: crm5</p><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><ul><li>这里需要注意一些依赖的安装要到位，防止踩坑（上文博客里都有~）</li></ul><p>包括但不仅限于：</p><ol><li><code>sudo apt-get install ros-kinetic-controller-manager </code></li><li><code>sudo apt-get install ros-kinetic-gazebo-ros-control </code></li><li><code>sudo apt-get install ros-kinetic-effort-controllers </code></li><li><code>sudo apt-get install ros-kinetic-joint-state-controller </code></li><li><code>sudo apt-get install ros-kinetic-driver-base </code></li><li><code>sudo apt-get install ros-kinetic-rtabmap-ros </code></li><li><code>sudo apt-get install ros-kinetic-ackermann-msgs </code></li><li><code>sudo apt-get install ros-kinetic-teb-local-planner</code></li></ol><p><strong>如果GAZEBO打开仿真出现CMD134字眼是GAZEBO版本太低的原因从7.0.0升级到7.16.0即可！！！</strong></p><hr><h2 id="仿真效果"><a href="#仿真效果" class="headerlink" title="仿真效果"></a>仿真效果</h2><p>这里展示一些博主自己比赛的仿真效果，主要是一些rviz和gazebo的截图给大家看一下效果</p><ul><li><p>开始仿真——加载gazebo地图和rviz模型，初始化amcl等相关文件：</p><p><img src="https://i.loli.net/2020/07/31/ZbFiDw5NCIAk2YE.jpg" alt="ros1"></p></li><li><p>仿真进行——发布目标点后小车巡线进行导航及避障：</p><p><img src="https://i.loli.net/2020/08/01/iLV9qyQwCAt7oPM.png" alt="ros3"></p></li><li><p>仿真结束——小车完成：<img src="https://i.loli.net/2020/08/01/DP2aXkxo45QL3N8.png" alt="ros2"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>racecar simulation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>You build it , You run it.</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="Zhihao-Zach-Deng"><a href="#Zhihao-Zach-Deng" class="headerlink" title="Zhihao(Zach) Deng"></a>Zhihao(Zach) Deng</h2><hr><div align="center">  <img alt="image" src="https://s2.loli.net/2024/04/28/AVNdD8iRBt4oHp2.jpg" width=200 /></div><br><p align="center">  <span>　<img src="https://i.loli.net/2020/07/19/B4sGYjqAmCTVxgb.png" width="20px"> <a href="mailto:zacdeng0720@email.com">zacdeng0720@gmail.com</a></span>  <span>　<img src="https://i.loli.net/2020/07/19/M4OCy2hxLdNbJZG.png" width="20px"> <a href="https://github.com/zacdeng">Github</a></span>  <span>　<img src="https://i.loli.net/2020/07/19/MVqscdbJDt8IuRi.png" width="18px"> <a href="https://zacdeng.github.io">My Blog</a></span>  <span>　<img src="https://s2.loli.net/2022/04/06/stM2Knu9D3q5lgr.png" width="20px"> <a href="https://www.linkedin.com/in/zhihaodeng/">Linkedin</a></span></p><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b>Education Background</b></p><p><strong>Northwestern University (NU), US</strong>   09&#x2F;2021 - 12&#x2F;2022</p><ul><li><em>Master of Science in Computer Engineering, GPA: 3.764&#x2F;4.0</em></li></ul><p><strong>Northeastern University (NEU), CN</strong>  08&#x2F;2017 - 06&#x2F;2021</p><ul><li><p><em>Bachelor of Engineering in Robot Engineering, GPA: 3.473&#x2F;5.0</em></p></li><li><p><em>Serve as the president on Student Union of Faculty of Robot Science and Engineering, NEU</em></p></li></ul><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b> Proficient Skills </b></p><p><strong>Programming language:</strong></p><ul><li><em><strong>Typescript</strong></em>, <em><strong>Python</strong></em>, <em><strong>MSSQL</strong></em>, <em><strong>C#</strong></em>, Javascript, Java, Amber, Sex, Blowjob, Onlyfans, GraphQL, HTML, CSS(SASS), C&#x2F;C++, Bash&#x2F;Shell, MATLAB</li></ul><p><strong>Developer Tools:</strong></p><ul><li>AWS, Postman, Git, Datadog, Apollo, Figma, Docker, Heroku, Firebase</li></ul><p><strong>Database:</strong></p><ul><li>Microsoft SQL Server, DynamoDB, MySQL, SQLite3, NoSQL</li></ul><p><strong>Web Technologies:</strong></p><ul><li>Angular, GraphQL, ReactJS, Redux, Node.js, Flask, Django, Bootstrap, RESTful API</li></ul><p><strong>Other:</strong></p><ul><li>ROS, Linux, OpenCV, Pandas, Markdown, Jira, PyTorch, Jupyter, Anaconda, Tensorflow, Latex, Labview, Json</li></ul><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b>Work Experience</b></p><p><strong>NRG Kiosk LLC (Power Kiosk)</strong> - Full Stack Software Engineer - 01&#x2F;2023-present</p><ul><li><p>Participated in all phases of the agile software development life cycle as a full stack developer, including frontend(<strong><em>Angular</em></strong>), backend(<strong><em>Controller-Service-Repository</em></strong> pattern), <strong><em>GraphQL middleware</em></strong> and database(<strong><em>MSSQL</em></strong>).</p></li><li><p>Developed a <strong><em>C#</em></strong> rate matrix loader for multiple suppliers, extracted email attachments from <strong><em>AWS S3</em></strong>, and engineered RESTful APIs to retrieve constant variables. Integrated the results into database. Configured <strong><em>AWS CodePipeline</em></strong> and <strong><em>EC2</em></strong> instance, and established a CronJob to automate this as a daily routine.</p></li><li><p>Tuned stored procedures to promote reusability of code, thereby improving system performance and reliability. Monitored <strong><em>Datadog</em></strong> and <strong><em>Apollo</em></strong> server performance to ensure smooth operation and conducted routine maintenance.</p></li><li><p>Analyzed and implemented the contract reinstatement process, including database design and tuning, RESTful APIs development, frontend and backend logic implementation. Helped the company retain customers, bringing in higher profits.</p></li><li><p>Designed a Python-based OCR model that automatically verifies and processes billing files, deployed on AWS EC2 with a scheduled <strong><em>CronJob</em></strong>. This automation significantly enhanced system efficiency by minimizing the need for manual verification.</p></li></ul><p><strong>Healthy Hop LLC</strong> - Full Stack Software Engineering Intern - 05&#x2F;2022-09&#x2F;2022</p><ul><li><p>Partnered with UI&#x2F;UX team to design mock-ups and prototypes of the components on <strong><em>Figma</em></strong>. Utilized <strong><em>ReactJS</em></strong> and <strong><em>NodeJS</em></strong> to implement the frontend and backend logic. Experienced in DynamoDB tables design using <strong><em>NoSQL</em></strong>.</p></li><li><p>Designed <strong><em>RESTful APIs</em></strong> using AWS gateway and conducted testing using <strong><em>Postman</em></strong>, implemented the lambda functions with NodeJS to interact with the <strong><em>DynamoDB</em></strong>.</p></li><li><p>Optimized UI rendering speed by <strong><em>25%</em></strong> using debouncing in react and limited excessive API requests from the text field. Engaged in front-end test and lifted test coverage by <strong><em>40%</em></strong>. Collaborated with systems team to implement CI&#x2F;CD pipelines.</p></li><li><p>Refactored product code to fix code smells and certain structures that indicate violation of fundamental design principles.</p></li></ul><p><strong>iFlytek</strong>, Hardware dept. - Software Development Engineer - 01&#x2F;2021-05&#x2F;2021</p><ul><li><p>Revamped the remote-control module for driverless car in the web application to improve the control precision. Designed and implemented user-friendly components for real-time map building and path planning visualization using Flask, CSS and <strong><em>Javascript</em></strong>.</p></li><li><p>Migrated the C-based navigation and path planning algorithms for driverless car using Python. Developed the backend of the application using <strong><em>Flask</em></strong> framework</p></li><li><p>Collaborated with Tsinghua University to offer training for <em><strong>34</strong></em> ROS beginners in speech recognition，map building, localization, and navigation.</p></li></ul><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b>Research and Projects</b><p><strong>1. Research about Reinforcement Learning Based on Google Research Football Framework</strong> - <em>09&#x2F;2020 06&#x2F;2021</em></p><p><em>Member of the Research Lab (Tutor: Zixi Jia, Associate Dean of Faculty of Robot Science and Engineering, NEU)</em></p><ul><li><p>Researched about <em><strong>reinforcement learning</strong></em> in <em><strong>multi-agent system</strong></em> under the instruction of Zixi Jia and Jingyu Ru.</p></li><li><p>Designed a multi-agents football simulation with <em><strong>Unity3D ML-Agents</strong></em> and used <em><strong>C#</strong></em> to add specific features.</p></li><li><p>Proposed a <em><strong>distributed PPO algorithm</strong></em>, which uses multi-threaded parallel computing to significantly shorten the training time by <em><strong>22 percent</strong></em></p></li><li><p>Proposed a strategy algorithm that uses the real-time scores of the game as a penalty reward when training the model. The trained model based on this algorithm greatly improves the winning rate of the agent by <em><strong>20 percent</strong></em> in most scenarios</p></li></ul><p><strong>2. A Racing Smart Car based on Deep Learning (Sponsored by Baidu)</strong> - <em>10&#x2F;2019 - 08&#x2F;2020</em></p><p><em>Co researcher &amp; Team Leader (Tutor: Prof. Zheng Fang, NEU)</em></p><ul><li><p>Completed the <em><strong>PID control</strong></em> program for the smart car mainly with Python. Enabled the smart car to avoid obstacles independently with a monocular camera using <em><strong>OpenCV</strong></em></p></li><li><p>Equipped the smart car with the function of collecting the data of relevant marks, conducted <em><strong>CNN</strong></em> under the Paddle framework, identified obstacles and marks at high speed, increased the identify accuracy by 30%</p></li><li><p>Led the team to take part in the 15th National College Students Smart Car Competition and won <em><strong>National First Prize</strong></em></p></li></ul><p><strong>3. Verification Code Recognition Based on Convolutional Neural Network</strong> - <em>04&#x2F;2020 - 06&#x2F;2020</em></p><p><em>Team Leader (Tutor: Prof. Nick Feamster, University of Chicago)</em></p><ul><li><p>Under the requirement of applying machine learning to solve a real world problem, my team decided to conduct this project</p></li><li><p>Randomly selected four from 56 numbers and symbols as the verification code with Captcha Library in PyPI to solve the verification code problem in crawling</p></li><li><p>Set up a <em><strong>CNN</strong></em> network with multiple convolutional layers to train characters so that verification codes comprised of characters could be automatically recognized in the crawling process without human intervention</p></li><li><p>Constructed environments in <em><strong>Linux</strong></em> and <em><strong>Tensorflow</strong></em>, designed and set up the structure of the convolutional neural network, adjusted parameters, and completed training and experiments</p></li><li><p>The final recognition accuracy rate was 92%, and the project was rated A. <em><strong>First author</strong></em> of an abstract paper on Conference on Soft Computing &amp; Machine Intelligence (ISCMI 2020)</p></li></ul><p><strong>4. An Intelligent Rubik’s Cube Resolving Robot</strong> - <em>11&#x2F;2019 - 02&#x2F;2020</em></p><p><em>Team Member (Tutor: Researcher Shuai Wang)</em></p><ul><li><p>Teamed up with other students to conduct this project for participating in the Provincial Contest of the National Artificial Intelligence Competition</p></li><li><p>The competition required contestants to enable robots to revert cube based on <em><strong>stm32</strong></em> and computer vision</p></li><li><p>Constructed the mechanical structure of the robot, dealt with cube reverting algorithms, used <em><strong>Keil</strong></em> and <em><strong>C&#x2F;C++</strong></em> to optimize the algorithm as well as the <em><strong>PID</strong></em> control of the motor, and applied <em><strong>STM32CubeMX</strong></em> to set the single chip microcomputer</p></li><li><p>The completed robot could revert a magic cube to its original state within <em><strong>20 seconds</strong></em></p></li></ul><p><strong>5. OpenCV Based Probot Anno Arm Gripping</strong> - <em>09&#x2F;2019 - 01&#x2F;2020</em></p><p><em>Researcher (Tutor: Researcher Shuai Wang)</em></p><ul><li><p>Proposed a <em><strong>ROS-based</strong></em> robot arm control system design and aimed to solve the difficulty in traditional manipulator control system design and the poor portability</p></li><li><p>Added binocular vision based on traditional robotic arm control to avoid obstacles and grab objects</p></li><li><p>Used <em><strong>MoveIt!</strong></em> to plan the trajectory in a point to point manner and displayed it dynamically on <em><strong>Rviz</strong></em></p></li><li><p>Implemented binocular vision based on <em><strong>OpenCV</strong></em></p></li><li><p>Completed camera calibration, image acquisition, preprocessing, feature extraction, etc., calculated the target distance based on the parallax value, and fed back to MoveIt!</p></li><li><p>Conducted independent planning through MoveIt! and completed grab movements</p></li></ul><p><strong>6. Subscript Web Application 09&#x2F;2021</strong> - <em>09&#x2F;2021 - 10&#x2F;2021</em></p><ul><li><p>Designed and established a web application with classmates for managing subscriptions in software development class</p></li><li><p>Used <em><strong>React</strong></em> to set up the app, styled the app by <em><strong>JavaScript inline</strong></em>, <em><strong>CSS</strong></em> and Material UI. Achieved the user authentication using <em><strong>Google Sign-In</strong></em> and interaction with database, finished user-related functions with <em><strong>React Hook</strong></em></p></li><li><p>Made it public using <em><strong>Firebase</strong></em>, used <em><strong>Cypress</strong></em> to test the web page and writing a series of unit tests by <em><strong>Jest</strong></em></p></li></ul><p><strong>7. Recovery Tracker Software System (Full Stack)</strong> - 02&#x2F;2022 - 03&#x2F;2022</p><ul><li><p>Constructed an app under client’s requirement, including front-end to back-end, aimed to help patients and doctors keep in touch with the progress in their recovery</p></li><li><p>Set up and managed the project using <em><strong>Git</strong></em>, implemented functions using related API, styled our app using <em><strong>Material UI</strong></em></p></li><li><p>Managed the application state with <em><strong>Redux</strong></em> and <em><strong>React Hook</strong></em>, displayed multiple views in a single page using <em><strong>React Router</strong></em></p></li><li><p>Categorized the recovery data and user profile on <em><strong>Json</strong></em> based on <em><strong>Firebase</strong></em> then visualized the data using <em><strong>Chart.js</strong></em></p></li></ul><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b>Publication</b><p><strong>Verification Code Recognition Using Convolutional Neural Network</strong> 11&#x2F;2020 </p><p><em>First Author of Abstract</em> </p><ul><li>Oral presentation on Conference on Soft Computing &amp; Machine Intelligence (ISCMI 2020), Stockholm, Sweden during November 14-15, 2020</li></ul><hr><p style="color:rgb(19, 138, 192);font-size:19px"><b>Honors and Awards</b><p><strong>Scholarships &amp; Academic Performance</strong> </p><ul><li><p>Outstanding Graduate of Liaoning 2020 </p></li><li><p>Model Student, NEU 2020 </p></li><li><p>“Dimension Robotics” Scholarship for Outstanding Individual in Scientific Innovation, NEU 2020 </p></li><li><p>“SMS Group” Top Grade Award for Excellent Students, NEU 2020 </p></li><li><p>Second Class Scholarship, NEU 2020 </p></li><li><p>Third Class “Dimension Robotics” Scholarship, NEU 2020</p></li></ul><p><strong>Competitions &amp; Projects</strong> </p><ul><li><p>National First Prize in the 15th National College Students Smart Car Competition 2020 </p></li><li><p>Honorable Mention in MCM&#x2F;ICM 2020 </p></li><li><p>Second Prize in NEU, Liaoning Market Investigation and Analysis Contest 2020 </p></li><li><p>Third Award, National Selection of CUMCM 2019 </p></li><li><p>First Award, University Selection of CUMCM 2019 </p></li><li><p>Third Prize in NEU, Internet+ Innovation and Entrepreneurship Competition 2019</p></li></ul><p><strong>Activities</strong> </p><ul><li><p>Outstanding Individual in Summer Practice, NEU 2019 </p></li><li><p>National Project, National College Students “One Belt One Road” Summer Practice 2019</p></li></ul>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h3 id="Hey-🙌🏻-I-am-Zach-😀"><a href="#Hey-🙌🏻-I-am-Zach-😀" class="headerlink" title="Hey 🙌🏻, I am Zach 😀"></a>Hey 🙌🏻, I am Zach 😀</h3><p>A full stack software developer based in Chicago.</p><p>A graduate student of  <a href="https://www.northwestern.edu/">Northwestern University(US)</a> and major in <a href="https://www.mccormick.northwestern.edu/electrical-computer/academics/graduate/masters/computer-engineering.html">Computer Engineering</a>.</p><p style="margin-left: 5%">    😄 Any questions about my repositories are welcome！</p><p style="margin-left: 5%">    🏫 Northeastern University（CN, undergraduate）</p><p style="margin-left: 5%">    🤖 Major: Robot Science and Engineering</p><p style="margin-left: 5%">    👨‍🎓  Northwestern University（US, graduate）</p><p style="margin-left: 5%">    👨‍💻 Major: Computer Engineering</p><p style="margin-left: 5%">    📃 More information please see <a href="https://zacdeng.github.io/resume/"> Resume </a></p><p style="margin-left: 5%">    📫 How to reach me: <b><i>zacdeng0720@gmail.com</i></b></p><p><em><b>I love connecting with different people</b> so if you want to say <b>hi, I’ll be happy to meet you more!</b> :)</em></p><div align="center">    <img align="center" src="https://media.giphy.com/media/LnQjpWaON8nhr21vNW/giphy.gif" width="300"></div><hr><p align="center">    TimeLine: Set up by <b>07/19/2020</b></p><p align="center">    Current Status : Life is an adventure, so I am enjoying my life... 😊</p><p align="center">    <img alt="GIF" src="https://media.giphy.com/media/836HiJc7pgzy8iNXCn/giphy.gif" width="400" /></p>]]></content>
    
  </entry>
  
  
  
</search>
